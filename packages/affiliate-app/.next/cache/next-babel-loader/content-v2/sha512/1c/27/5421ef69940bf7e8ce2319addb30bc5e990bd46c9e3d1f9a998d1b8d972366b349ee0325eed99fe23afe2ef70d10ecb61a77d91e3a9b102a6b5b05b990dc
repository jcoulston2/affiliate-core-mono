{"ast":null,"code":"import { getSingle } from '@helpers/common';\nexport function getProductLink(productViewData) {\n  var _productViewData$topL, _productViewData$meta;\n\n  const link = productViewData === null || productViewData === void 0 ? void 0 : (_productViewData$topL = productViewData.topLevelData) === null || _productViewData$topL === void 0 ? void 0 : _productViewData$topL.link;\n  const validatedLink = getSingle(link);\n  const domain = productViewData === null || productViewData === void 0 ? void 0 : (_productViewData$meta = productViewData.metaData) === null || _productViewData$meta === void 0 ? void 0 : _productViewData$meta.domain;\n\n  if (validatedLink && domain) {\n    if (link.startsWith('//')) {\n      return `https:${link}`;\n    } else {\n      return validatedLink !== null && validatedLink !== void 0 && validatedLink.includes(domain) ? validatedLink : domain + validatedLink;\n    }\n  } else {\n    return '';\n  }\n}","map":{"version":3,"sources":["/Users/justincoulston/Desktop/affilaite-core-mono/packages/affiliate-app/helpers/page/product.js"],"names":["getSingle","getProductLink","productViewData","link","topLevelData","validatedLink","domain","metaData","startsWith","includes"],"mappings":"AAEA,SAASA,SAAT,QAA0B,iBAA1B;AAEA,OAAO,SAASC,cAAT,CAAwBC,eAAxB,EAA+D;AAAA;;AACpE,QAAMC,IAAI,GAAGD,eAAH,aAAGA,eAAH,gDAAGA,eAAe,CAAEE,YAApB,0DAAG,sBAA+BD,IAA5C;AACA,QAAME,aAAa,GAAGL,SAAS,CAACG,IAAD,CAA/B;AACA,QAAMG,MAAM,GAAGJ,eAAH,aAAGA,eAAH,gDAAGA,eAAe,CAAEK,QAApB,0DAAG,sBAA2BD,MAA1C;;AAEA,MAAID,aAAa,IAAIC,MAArB,EAA6B;AAC3B,QAAIH,IAAI,CAACK,UAAL,CAAgB,IAAhB,CAAJ,EAA2B;AACzB,aAAQ,SAAQL,IAAK,EAArB;AACD,KAFD,MAEO;AACL,aAAOE,aAAa,SAAb,IAAAA,aAAa,WAAb,IAAAA,aAAa,CAAEI,QAAf,CAAwBH,MAAxB,IAAkCD,aAAlC,GAAkDC,MAAM,GAAGD,aAAlE;AACD;AACF,GAND,MAMO;AACL,WAAO,EAAP;AACD;AACF","sourcesContent":["//@flow\nimport { type ProductData } from '@types/Product';\nimport { getSingle } from '@helpers/common';\n\nexport function getProductLink(productViewData: ProductData): ?string {\n  const link = productViewData?.topLevelData?.link;\n  const validatedLink = getSingle(link);\n  const domain = productViewData?.metaData?.domain;\n\n  if (validatedLink && domain) {\n    if (link.startsWith('//')) {\n      return `https:${link}`;\n    } else {\n      return validatedLink?.includes(domain) ? validatedLink : domain + validatedLink;\n    }\n  } else {\n    return '';\n  }\n}\n"]},"metadata":{},"sourceType":"module"}