{"ast":null,"code":"// TODO: we need to make the redis import work\n// import redis from 'redis';\nimport * as Promise from 'bluebird';\nimport { IS_PROD } from '../../constants';\nimport storeCache from '../../__store-cache__/store-cache.json';\nimport { zipParse } from '../../helpers/common';\n\nclass Store {\n  constructor(data) {\n    this.store = data || null;\n  } // Redis only\n\n\n  getStore() {\n    return this.store;\n  }\n\n}\n\nfunction getStore() {\n  const store = storeCache.store;\n  const parsedStore = zipParse(store);\n}\n\nconst configuredStore = getStore(zipParse(storeCache.store));\nexport { configuredStore, Store };","map":{"version":3,"sources":["/Users/justincoulston/Desktop/affilaite-core-mono/packages/affiliate-app/server/store/Store.js"],"names":["Promise","IS_PROD","storeCache","zipParse","Store","constructor","data","store","getStore","parsedStore","configuredStore"],"mappings":"AAEA;AACA;AACA,OAAO,KAAKA,OAAZ,MAAyB,UAAzB;AACA,SAASC,OAAT,QAAwB,iBAAxB;AACA,OAAOC,UAAP,MAAuB,wCAAvB;AACA,SAASC,QAAT,QAAyB,sBAAzB;;AAOA,MAAMC,KAAN,CAAY;AAGVC,EAAAA,WAAW,CAACC,IAAD,EAAkB;AAC3B,SAAKC,KAAL,GAAaD,IAAI,IAAI,IAArB;AACD,GALS,CAOV;;;AACAE,EAAAA,QAAQ,GAAyB;AAC/B,WAAO,KAAKD,KAAZ;AACD;;AAVS;;AAaZ,SAASC,QAAT,GAAoB;AAClB,QAAMD,KAAK,GAAGL,UAAU,CAACK,KAAzB;AACA,QAAME,WAAW,GAAGN,QAAQ,CAACI,KAAD,CAA5B;AACD;;AAED,MAAMG,eAAe,GAAGF,QAAQ,CAACL,QAAQ,CAACD,UAAU,CAACK,KAAZ,CAAT,CAAhC;AAEA,SAASG,eAAT,EAA0BN,KAA1B","sourcesContent":["//@flow\n\n// TODO: we need to make the redis import work\n// import redis from 'redis';\nimport * as Promise from 'bluebird';\nimport { IS_PROD } from '../../constants';\nimport storeCache from '../../__store-cache__/store-cache.json';\nimport { zipParse } from '../../helpers/common';\nimport { type ParsedStore } from '../../types/store';\n\ntype StoreConfig = {\n  useRedis: boolean,\n};\n\nclass Store {\n  store: Array<any> | Object;\n\n  constructor(data: any): void {\n    this.store = data || null;\n  }\n\n  // Redis only\n  getStore(): Promise<ParsedStore> {\n    return this.store;\n  }\n}\n\nfunction getStore() {\n  const store = storeCache.store;\n  const parsedStore = zipParse(store);\n}\n\nconst configuredStore = getStore(zipParse(storeCache.store));\n\nexport { configuredStore, Store };\n"]},"metadata":{},"sourceType":"module"}