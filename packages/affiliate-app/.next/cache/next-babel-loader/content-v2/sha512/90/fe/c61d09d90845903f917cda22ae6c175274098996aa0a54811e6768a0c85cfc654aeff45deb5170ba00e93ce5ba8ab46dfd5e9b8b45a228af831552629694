{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/extends\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nvar _jsxFileName = \"/Users/justincoulston/Desktop/affilaite-core-mono/packages/affiliate-app/components/modules/ProductListing/ProductsView.js\";\nvar __jsx = React.createElement;\nimport React, { useState, useEffect } from 'react';\nimport ProductListingItem from '@units/ProductListingItem';\nimport Grid from '@material-ui/core/Grid';\nimport Typography from '@units/Typography';\nimport Flicker from '@units/Flicker';\nimport { NoMoreProductsFlicker, FlickerFilters } from './styles';\nimport { VIEW_MODE } from '@constants';\nimport FavoriteIcon from '@material-ui/icons/Favorite';\nimport ClearIcon from '@material-ui/icons/Clear';\nimport Image from '@units/Image';\nimport Modal from '@units/Modal';\nimport NoMoreProductsIndicator from './NoMoreProductsIndicator';\nimport Drawer from '@units/Drawer';\nimport { Filters } from '@modules/Filters';\nimport { Actionable } from '@styles/CommonStyledComponents';\nexport default function ProductFlickView(_ref) {\n  let {\n    isFlickView,\n    setViewMode,\n    flickViewTitleCopy,\n    flickViewTitleText,\n    wishListAction,\n    openCardAction,\n    allProducts,\n    showNoMoreProducts,\n    noMoreProductsCopyText,\n    openCardActionMemo,\n    loadMoreProducts,\n    filterProps\n  } = _ref,\n      listingItemProps = _objectWithoutProperties(_ref, [\"isFlickView\", \"setViewMode\", \"flickViewTitleCopy\", \"flickViewTitleText\", \"wishListAction\", \"openCardAction\", \"allProducts\", \"showNoMoreProducts\", \"noMoreProductsCopyText\", \"openCardActionMemo\", \"loadMoreProducts\", \"filterProps\"]);\n\n  const {\n    0: flickModalOpen,\n    1: setFlickModalOpen\n  } = useState(true);\n  const {\n    0: noMoreFlickerCards,\n    1: setNoMoreFlickerCards\n  } = useState(false);\n\n  const flickerEndCallback = () => {\n    if (showNoMoreProducts) {\n      setNoMoreFlickerCards(true);\n    } else {\n      loadMoreProducts();\n    }\n  };\n\n  useEffect(() => {\n    setNoMoreFlickerCards(false);\n  }, [allProducts.length]);\n  return __jsx(React.Fragment, null, __jsx(Drawer, {\n    anchor: 'bottom',\n    open: isFlickView,\n    fullHeight: true,\n    width: 100,\n    iconCloseClick: () => setViewMode(VIEW_MODE.GRID_MODE),\n    onClose: () => setViewMode(VIEW_MODE.GRID_MODE),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 7\n    }\n  }, __jsx(FlickerFilters, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 84,\n      columnNumber: 9\n    }\n  }, __jsx(Actionable, {\n    \"aria-label\": \"filters\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 85,\n      columnNumber: 11\n    }\n  }, __jsx(Filters, _extends({}, filterProps, filterProps.filterMethods, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 86,\n      columnNumber: 13\n    }\n  })))), __jsx(Grid, {\n    container: true,\n    justify: \"center\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 90,\n      columnNumber: 9\n    }\n  }, __jsx(Typography, {\n    tag: \"h3\",\n    typeStyles: flickViewTitleCopy,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 91,\n      columnNumber: 11\n    }\n  }, flickViewTitleText)), __jsx(Modal, {\n    showOnce: true,\n    open: flickModalOpen,\n    setOpen: setFlickModalOpen,\n    modalKey: \"flick-modal\",\n    modalTitle: \"Fliik view\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 96,\n      columnNumber: 9\n    }\n  }, __jsx(Image, {\n    src: \"flick-instructions.png\",\n    maxWidth: \"434px\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 102,\n      columnNumber: 11\n    }\n  })), !noMoreFlickerCards ? __jsx(Flicker, {\n    preventSwipe: ['down'],\n    SwipeIconRight: __jsx(FavoriteIcon, {\n      color: \"primary\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 107,\n        columnNumber: 29\n      }\n    }),\n    SwipeIconLeft: __jsx(ClearIcon, {\n      color: \"primary\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 108,\n        columnNumber: 28\n      }\n    }),\n    onSwipeCallback: (direction, product) => {\n      if (direction === 'right') wishListAction(product);\n      if (direction === 'up') openCardAction(product);\n    },\n    onEndCallback: () => flickerEndCallback(),\n    dataMap: allProducts,\n    isLastDataMap: showNoMoreProducts,\n    Component: __jsx(ProductListingItem, _extends({}, listingItemProps, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 116,\n        columnNumber: 24\n      }\n    })),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 105,\n      columnNumber: 11\n    }\n  }) : __jsx(NoMoreProductsFlicker, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 119,\n      columnNumber: 11\n    }\n  }, __jsx(NoMoreProductsIndicator, {\n    text: noMoreProductsCopyText,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 120,\n      columnNumber: 13\n    }\n  }))), __jsx(Grid, {\n    container: true,\n    justify: \"center\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 125,\n      columnNumber: 7\n    }\n  }, allProducts.map((product, index) => __jsx(ProductListingItem, _extends({\n    hasWishListAction: true,\n    onCardClick: openCardActionMemo(product)\n  }, product, listingItemProps, {\n    key: index,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 127,\n      columnNumber: 11\n    }\n  })))));\n}","map":{"version":3,"sources":["/Users/justincoulston/Desktop/affilaite-core-mono/packages/affiliate-app/components/modules/ProductListing/ProductsView.js"],"names":["React","useState","useEffect","ProductListingItem","Grid","Typography","Flicker","NoMoreProductsFlicker","FlickerFilters","VIEW_MODE","FavoriteIcon","ClearIcon","Image","Modal","NoMoreProductsIndicator","Drawer","Filters","Actionable","ProductFlickView","isFlickView","setViewMode","flickViewTitleCopy","flickViewTitleText","wishListAction","openCardAction","allProducts","showNoMoreProducts","noMoreProductsCopyText","openCardActionMemo","loadMoreProducts","filterProps","listingItemProps","flickModalOpen","setFlickModalOpen","noMoreFlickerCards","setNoMoreFlickerCards","flickerEndCallback","length","GRID_MODE","filterMethods","direction","product","map","index"],"mappings":"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","sourcesContent":["//@flow\nimport React, { useState, useEffect } from 'react';\nimport ProductListingItem from '@units/ProductListingItem';\nimport Grid from '@material-ui/core/Grid';\nimport Typography from '@units/Typography';\nimport { type ProductData } from '@types/product';\nimport { type CmsCopy } from '@types/cms';\nimport Flicker from '@units/Flicker';\nimport { NoMoreProductsFlicker, FlickerFilters } from './styles';\nimport { VIEW_MODE } from '@constants';\nimport FavoriteIcon from '@material-ui/icons/Favorite';\nimport ClearIcon from '@material-ui/icons/Clear';\nimport Image from '@units/Image';\nimport Modal from '@units/Modal';\nimport NoMoreProductsIndicator from './NoMoreProductsIndicator';\nimport Drawer from '@units/Drawer';\nimport { Filters } from '@modules/Filters';\nimport { Actionable } from '@styles/CommonStyledComponents';\nimport {\n  type FiltersData,\n  type FilterMethods,\n  type NormalizeFiltersOutput,\n} from '@modules/Filters';\n\ntype FilterProps = {\n  ...FiltersData,\n  FilterMethods: FilterMethods,\n  normalizedFilters: NormalizeFiltersOutput,\n};\n\ntype ProductFlickViewProps = {\n  isFlickView: boolean,\n  setViewMode: Function,\n  flickViewTitleCopy: CmsCopy,\n  flickViewTitleText: string,\n  wishListAction: Function,\n  openCardAction: Function,\n  allProducts: Array<ProductData>,\n  showNoMoreProducts: boolean,\n  noMoreProductsCopyText: string,\n  openCardActionMemo: Function,\n  loadMoreProducts: Function,\n  filterProps: FilterProps,\n};\n\nexport default function ProductFlickView({\n  isFlickView,\n  setViewMode,\n  flickViewTitleCopy,\n  flickViewTitleText,\n  wishListAction,\n  openCardAction,\n  allProducts,\n  showNoMoreProducts,\n  noMoreProductsCopyText,\n  openCardActionMemo,\n  loadMoreProducts,\n  filterProps,\n  ...listingItemProps\n}: ProductFlickViewProps) {\n  const [flickModalOpen, setFlickModalOpen] = useState(true);\n  const [noMoreFlickerCards, setNoMoreFlickerCards] = useState(false);\n  const flickerEndCallback = (): void => {\n    if (showNoMoreProducts) {\n      setNoMoreFlickerCards(true);\n    } else {\n      loadMoreProducts();\n    }\n  };\n\n  useEffect(() => {\n    setNoMoreFlickerCards(false);\n  }, [allProducts.length]);\n\n  return (\n    <>\n      <Drawer\n        anchor={'bottom'}\n        open={isFlickView}\n        fullHeight\n        width={100}\n        iconCloseClick={() => setViewMode(VIEW_MODE.GRID_MODE)}\n        onClose={() => setViewMode(VIEW_MODE.GRID_MODE)}>\n        <FlickerFilters>\n          <Actionable aria-label=\"filters\">\n            <Filters {...filterProps} {...filterProps.filterMethods} />\n          </Actionable>\n        </FlickerFilters>\n\n        <Grid container justify=\"center\">\n          <Typography tag=\"h3\" typeStyles={flickViewTitleCopy}>\n            {flickViewTitleText}\n          </Typography>\n        </Grid>\n\n        <Modal\n          showOnce\n          open={flickModalOpen}\n          setOpen={setFlickModalOpen}\n          modalKey=\"flick-modal\"\n          modalTitle=\"Fliik view\">\n          <Image src=\"flick-instructions.png\" maxWidth=\"434px\" />\n        </Modal>\n        {!noMoreFlickerCards ? (\n          <Flicker\n            preventSwipe={['down']}\n            SwipeIconRight={<FavoriteIcon color=\"primary\" />}\n            SwipeIconLeft={<ClearIcon color=\"primary\" />}\n            onSwipeCallback={(direction: string, product: ProductData) => {\n              if (direction === 'right') wishListAction(product);\n              if (direction === 'up') openCardAction(product);\n            }}\n            onEndCallback={() => flickerEndCallback()}\n            dataMap={allProducts}\n            isLastDataMap={showNoMoreProducts}\n            Component={<ProductListingItem {...listingItemProps} />}\n          />\n        ) : (\n          <NoMoreProductsFlicker>\n            <NoMoreProductsIndicator text={noMoreProductsCopyText} />\n          </NoMoreProductsFlicker>\n        )}\n      </Drawer>\n\n      <Grid container justify=\"center\">\n        {allProducts.map((product: ProductData, index: number) => (\n          <ProductListingItem\n            hasWishListAction\n            onCardClick={openCardActionMemo(product)}\n            {...product}\n            {...listingItemProps}\n            key={index}\n          />\n        ))}\n      </Grid>\n    </>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}