{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/extends\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nvar _jsxFileName = \"/Users/justincoulston/Desktop/affilaite-core-mono/packages/affiliate-app/components/units/Modal/Modal.js\";\nvar __jsx = React.createElement;\nimport React, { useState } from 'react';\nimport Dialog from '@material-ui/core/Dialog';\nimport { getLocalStorage, setLocalStorage } from '@helpers/common';\nimport { MODALS_PREVENTED } from '@constants';\nimport Button from '@units/Button';\nimport Grid from '@material-ui/core/Grid';\nimport styled from 'styled-components';\nimport ClearIcon from '@material-ui/icons/Clear';\nimport Typography from '@units/Typography';\nimport { useTheme } from '@hooks';\nimport { StyledCmsGrid } from '@styles/CommonStyledComponents';\nexport const ModalContainer = styled(Grid).withConfig({\n  displayName: \"Modal__ModalContainer\",\n  componentId: \"g3vbih-0\"\n})([\"padding:0px 10px;overflow-y:scroll;\"]);\nexport const Close = styled(Grid).withConfig({\n  displayName: \"Modal__Close\",\n  componentId: \"g3vbih-1\"\n})([\"&:hover{cursor:pointer;opacity:0.5;}\"]);\nexport const Title = styled.div.withConfig({\n  displayName: \"Modal__Title\",\n  componentId: \"g3vbih-2\"\n})([\"padding:20px;\"]);\nexport const DialogContainer = styled(Dialog).withConfig({\n  displayName: \"Modal__DialogContainer\",\n  componentId: \"g3vbih-3\"\n})([\".MuiPaper-root{padding:20px 10px;overflow:hidden;}*{::-webkit-scrollbar{-webkit-appearance:none;width:3px;}::-webkit-scrollbar-thumb{border-radius:4px;background-color:#dcdada;}}\"]);\nexport default function Modal(_ref) {\n  let {\n    children,\n    padding,\n    modalKey,\n    showOnce,\n    onSubmitModal,\n    modalTitle,\n    buttonText,\n    open,\n    setOpen\n  } = _ref,\n      rest = _objectWithoutProperties(_ref, [\"children\", \"padding\", \"modalKey\", \"showOnce\", \"onSubmitModal\", \"modalTitle\", \"buttonText\", \"open\", \"setOpen\"]);\n\n  const modalsPrevented = getLocalStorage(MODALS_PREVENTED) || [];\n  const isModalPrevented = showOnce && modalsPrevented.includes(modalKey);\n  const {\n    modalTheme\n  } = useTheme();\n\n  const handleModalOpenStatus = () => {\n    setOpen(false);\n    if (showOnce) setLocalStorage(MODALS_PREVENTED, [modalKey, ...modalsPrevented]);\n    if (onSubmitModal) onSubmitModal();\n  };\n\n  return !isModalPrevented ? __jsx(DialogContainer, _extends({}, rest, {\n    open: open,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 86,\n      columnNumber: 5\n    }\n  }), __jsx(ModalContainer, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 87,\n      columnNumber: 7\n    }\n  }, __jsx(Grid, {\n    item: true,\n    xs: 12,\n    container: true,\n    justify: \"flex-end\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 88,\n      columnNumber: 9\n    }\n  }, __jsx(Close, {\n    item: true,\n    onClick: () => setOpen(false),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 89,\n      columnNumber: 11\n    }\n  }, __jsx(ClearIcon, {\n    fontSize: \"large\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 90,\n      columnNumber: 13\n    }\n  }))), modalTitle && __jsx(Typography, {\n    typeStyles: modalTheme.modalHeading,\n    fullwidth: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 94,\n      columnNumber: 11\n    }\n  }, modalTitle), __jsx(StyledCmsGrid, {\n    padding: modalTheme.defaultPadding || padding,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 99,\n      columnNumber: 9\n    }\n  }, children), __jsx(Button, {\n    primary: true,\n    fullWidth: true,\n    onClick: handleModalOpenStatus,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 100,\n      columnNumber: 9\n    }\n  }, buttonText || 'Ok'))) : null;\n}","map":{"version":3,"sources":["/Users/justincoulston/Desktop/affilaite-core-mono/packages/affiliate-app/components/units/Modal/Modal.js"],"names":["React","useState","Dialog","getLocalStorage","setLocalStorage","MODALS_PREVENTED","Button","Grid","styled","ClearIcon","Typography","useTheme","StyledCmsGrid","ModalContainer","Close","Title","div","DialogContainer","Modal","children","padding","modalKey","showOnce","onSubmitModal","modalTitle","buttonText","open","setOpen","rest","modalsPrevented","isModalPrevented","includes","modalTheme","handleModalOpenStatus","modalHeading","defaultPadding"],"mappings":"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","sourcesContent":["//@flow\nimport React, { useState } from 'react';\nimport Dialog from '@material-ui/core/Dialog';\nimport { getLocalStorage, setLocalStorage } from '@helpers/common';\nimport { MODALS_PREVENTED } from '@constants';\nimport Button from '@units/Button';\nimport Grid from '@material-ui/core/Grid';\nimport styled from 'styled-components';\nimport ClearIcon from '@material-ui/icons/Clear';\nimport Typography from '@units/Typography';\nimport { useTheme } from '@hooks';\nimport { StyledCmsGrid } from '@styles/CommonStyledComponents';\nimport { type CmsResponsiveString } from '@types/cms';\n\ntype DialogProps = {\n  children: any,\n  showOnce: boolean,\n  modalKey: string,\n  buttonText: string,\n  onSubmitModal: Function,\n  modalTitle: string,\n  padding: CmsResponsiveString,\n  open: boolean,\n  setOpen: Function,\n  ...\n};\n\nexport const ModalContainer = styled(Grid)`\n  padding: 0px 10px;\n  overflow-y: scroll;\n`;\n\nexport const Close = styled(Grid)`\n  &:hover {\n    cursor: pointer;\n    opacity: 0.5;\n  }\n`;\n\nexport const Title = styled.div`\n  padding: 20px;\n`;\n\nexport const DialogContainer = styled(Dialog)`\n  .MuiPaper-root {\n    padding: 20px 10px;\n    overflow: hidden;\n  }\n\n  * {\n    ::-webkit-scrollbar {\n      -webkit-appearance: none;\n      width: 3px;\n    }\n\n    ::-webkit-scrollbar-thumb {\n      border-radius: 4px;\n      background-color: #dcdada;\n    }\n  }\n`;\n\nexport default function Modal({\n  children,\n  padding,\n  modalKey,\n  showOnce,\n  onSubmitModal,\n  modalTitle,\n  buttonText,\n  open,\n  setOpen,\n  ...rest\n}: DialogProps) {\n  const modalsPrevented = getLocalStorage(MODALS_PREVENTED) || [];\n  const isModalPrevented = showOnce && modalsPrevented.includes(modalKey);\n  const { modalTheme } = useTheme();\n\n  const handleModalOpenStatus = () => {\n    setOpen(false);\n    if (showOnce) setLocalStorage(MODALS_PREVENTED, [modalKey, ...modalsPrevented]);\n    if (onSubmitModal) onSubmitModal();\n  };\n\n  return !isModalPrevented ? (\n    <DialogContainer {...rest} open={open}>\n      <ModalContainer>\n        <Grid item xs={12} container justify=\"flex-end\">\n          <Close item onClick={() => setOpen(false)}>\n            <ClearIcon fontSize=\"large\" />\n          </Close>\n        </Grid>\n        {modalTitle && (\n          <Typography typeStyles={modalTheme.modalHeading} fullwidth>\n            {modalTitle}\n          </Typography>\n        )}\n\n        <StyledCmsGrid padding={modalTheme.defaultPadding || padding}>{children}</StyledCmsGrid>\n        <Button primary fullWidth onClick={handleModalOpenStatus}>\n          {buttonText || 'Ok'}\n        </Button>\n      </ModalContainer>\n    </DialogContainer>\n  ) : null;\n}\n"]},"metadata":{},"sourceType":"module"}