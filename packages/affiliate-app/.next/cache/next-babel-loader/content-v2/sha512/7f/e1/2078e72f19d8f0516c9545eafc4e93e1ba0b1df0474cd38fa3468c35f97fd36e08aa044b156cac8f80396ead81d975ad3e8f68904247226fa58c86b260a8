{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/extends\";\nimport _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nvar _jsxFileName = \"/Users/justincoulston/Desktop/affilaite-core-mono/packages/affiliate-app/components/modules/Search/Search.js\";\nvar __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\n/* eslint-disable no-use-before-define */\nimport React, { useState, useRef } from 'react';\nimport TextField from '@material-ui/core/TextField';\nimport SearchIcon from '@material-ui/icons/Search';\nimport Grid from '@material-ui/core/Grid';\nimport { Flex, Actionable } from '@styles/CommonStyledComponents';\nimport ClearIcon from '@material-ui/icons/Clear';\nimport clientRequests from '../../../apiUtil/requests/clientRequests';\nimport { getPredictiveTermsList, getTermString } from './helper';\nimport { SEARCH_PATH } from '@constants';\nimport kebabCase from 'lodash/kebabCase';\nimport debounce from 'lodash/debounce';\nimport Drawer from '@units/Drawer';\nimport { useRouter } from 'next/router';\nimport { urlCase, delayedCallback, betterThrottle, createEvent } from '@helpers/common';\nimport { useTheme, useCms } from '@hooks';\nimport Loader from '@units/Loader';\nimport SearchInputWrapper from './SearchInputWrapper';\nimport { ClearIconContainer, ToogledSearchContainer, SearchContainer, SearchInput, SearchAutoCompleteBoxStyle, SuggestedText, DekstopSearchAction, LoaderContainer } from './style';\nexport default function Search({\n  isToggleSearch,\n  onSubmitCallback\n}) {\n  const {\n    textTheme\n  } = useTheme();\n  const {\n    0: searchToggled,\n    1: setSearchToggled\n  } = useState(false);\n  const {\n    0: options,\n    1: setOptions\n  } = useState([]);\n  const {\n    0: inputValue,\n    1: setInputValue\n  } = useState([]);\n  const {\n    0: predictiveLoading,\n    1: setPredictiveLoading\n  } = useState(false);\n  const inputRef = React.useRef();\n  const router = useRouter();\n  const {\n    search: searchCms\n  } = useCms('header');\n  const {\n    searchIconColor,\n    searchBarColor\n  } = searchCms;\n  let apiThrottleTimeout;\n  let smoothLoaderControler;\n\n  const handleSetToggled = () => setSearchToggled(!searchToggled);\n\n  const setPredictiveSearch = async value => {\n    const result = await clientRequests.getPredictiveSearch(value);\n    setPredictiveLoading(false);\n    const predivtiveTerms = getPredictiveTermsList(result, value);\n    setOptions([{\n      keyTerm: `\"${value}\"`\n    }, ...predivtiveTerms]);\n  };\n\n  const handlePredictiveSearch = async ({\n    target: {\n      value\n    }\n  }) => {\n    const valueCase = value.toLowerCase();\n    setInputValue(valueCase);\n    if (apiThrottleTimeout) clearTimeout(apiThrottleTimeout);\n    apiThrottleTimeout = setTimeout(() => {\n      // throttle reduces 'glitchy' loader animations caused by quick typing\n      betterThrottle(() => setPredictiveLoading(!!value));\n\n      if (value.length > 2) {\n        setPredictiveSearch(valueCase);\n      }\n    }, 500);\n  };\n\n  const goToSearch = page => {\n    if (onSubmitCallback) onSubmitCallback();\n    setSearchToggled(false);\n    router.push(page);\n  };\n\n  const handleAutoCompleteClick = option => {\n    const searchParams = Object.keys(option).reduce((acc, cur) => {\n      var _option$cur;\n\n      return `${acc}${kebabCase(cur)}=${urlCase((_option$cur = option[cur]) === null || _option$cur === void 0 ? void 0 : _option$cur.replace(/\\\"/g, ''))}&`;\n    }, `/${SEARCH_PATH}?`).slice(0, -1);\n    handleSetToggled();\n    goToSearch(searchParams);\n  };\n\n  const initLooseSearch = () => {\n    if (inputValue && inputValue.length > 2) {\n      goToSearch(`/${SEARCH_PATH}?key-term=${urlCase(inputValue)}`);\n      handleSetToggled();\n    }\n  };\n\n  const handleKeyDownSearch = () => ({\n    keyCode\n  }) => {\n    if (keyCode === 13) initLooseSearch();\n  };\n\n  const renderNoToggleSearch = __jsx(SearchInputWrapper, _extends({\n    searchToggled,\n    initLooseSearch,\n    searchIconColor,\n    searchBarColor\n  }, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 103,\n      columnNumber: 5\n    }\n  }), __jsx(SearchInput, {\n    freeSolo: true,\n    ignoreCase: true,\n    disableClearable: true,\n    getOptionLabel: option => getTermString(option),\n    renderOption: option => __jsx(SuggestedText, {\n      onClick: () => handleAutoCompleteClick(option),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 116,\n        columnNumber: 11\n      }\n    }, getTermString(option)),\n    options: options,\n    renderInput: params => __jsx(TextField, _extends({}, params, {\n      onChange: handlePredictiveSearch,\n      label: \"\",\n      autoFocus: searchToggled,\n      variant: \"outlined\",\n      margin: \"normal\",\n      inputRef: inputRef,\n      InputProps: _objectSpread(_objectSpread({}, params.InputProps), {}, {\n        type: 'search'\n      }),\n      onBlur: () => createEvent(inputRef.current, 'mousedown', 50),\n      onKeyDown: handleKeyDownSearch(),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 122,\n        columnNumber: 11\n      }\n    })),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 110,\n      columnNumber: 7\n    }\n  }));\n\n  return __jsx(React.Fragment, null, __jsx(Drawer, {\n    open: searchToggled,\n    anchor: \"left\",\n    width: 70,\n    onClose: () => setPredictiveLoading(false),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 141,\n      columnNumber: 7\n    }\n  }, __jsx(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 146,\n      columnNumber: 9\n    }\n  }, __jsx(SearchAutoCompleteBoxStyle, {\n    theme: textTheme,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 147,\n      columnNumber: 11\n    }\n  }), __jsx(ToogledSearchContainer, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 148,\n      columnNumber: 11\n    }\n  }, __jsx(ClearIconContainer, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 149,\n      columnNumber: 13\n    }\n  }, __jsx(Actionable, {\n    \"aria-label\": \"search\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 150,\n      columnNumber: 15\n    }\n  }, __jsx(ClearIcon, {\n    fontSize: \"large\",\n    onClick: handleSetToggled,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 151,\n      columnNumber: 17\n    }\n  }))), renderNoToggleSearch, __jsx(LoaderContainer, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 155,\n      columnNumber: 13\n    }\n  }, __jsx(Loader, {\n    active: predictiveLoading,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 156,\n      columnNumber: 15\n    }\n  }))))), isToggleSearch ? __jsx(SearchIcon, {\n    color: searchIconColor,\n    fontSize: \"large\",\n    onClick: handleSetToggled,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 162,\n      columnNumber: 9\n    }\n  }) : __jsx(SearchInputWrapper, _extends({\n    searchToggled,\n    handleSetToggled,\n    initLooseSearch,\n    searchIconColor,\n    searchBarColor\n  }, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 164,\n      columnNumber: 9\n    }\n  }), __jsx(DekstopSearchAction, {\n    fullWidth: true,\n    variant: \"outlined\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 172,\n      columnNumber: 11\n    }\n  })));\n}","map":{"version":3,"sources":["/Users/justincoulston/Desktop/affilaite-core-mono/packages/affiliate-app/components/modules/Search/Search.js"],"names":["React","useState","useRef","TextField","SearchIcon","Grid","Flex","Actionable","ClearIcon","clientRequests","getPredictiveTermsList","getTermString","SEARCH_PATH","kebabCase","debounce","Drawer","useRouter","urlCase","delayedCallback","betterThrottle","createEvent","useTheme","useCms","Loader","SearchInputWrapper","ClearIconContainer","ToogledSearchContainer","SearchContainer","SearchInput","SearchAutoCompleteBoxStyle","SuggestedText","DekstopSearchAction","LoaderContainer","Search","isToggleSearch","onSubmitCallback","textTheme","searchToggled","setSearchToggled","options","setOptions","inputValue","setInputValue","predictiveLoading","setPredictiveLoading","inputRef","router","search","searchCms","searchIconColor","searchBarColor","apiThrottleTimeout","smoothLoaderControler","handleSetToggled","setPredictiveSearch","value","result","getPredictiveSearch","predivtiveTerms","keyTerm","handlePredictiveSearch","target","valueCase","toLowerCase","clearTimeout","setTimeout","length","goToSearch","page","push","handleAutoCompleteClick","option","searchParams","Object","keys","reduce","acc","cur","replace","slice","initLooseSearch","handleKeyDownSearch","keyCode","renderNoToggleSearch","params","InputProps","type","current"],"mappings":"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","sourcesContent":["/* eslint-disable no-use-before-define */\n//@flow\nimport React, { useState, useRef } from 'react';\nimport TextField from '@material-ui/core/TextField';\nimport SearchIcon from '@material-ui/icons/Search';\nimport Grid from '@material-ui/core/Grid';\nimport { Flex, Actionable } from '@styles/CommonStyledComponents';\nimport ClearIcon from '@material-ui/icons/Clear';\nimport clientRequests from '../../../apiUtil/requests/clientRequests';\nimport { getPredictiveTermsList, getTermString } from './helper';\nimport { SEARCH_PATH } from '@constants';\nimport kebabCase from 'lodash/kebabCase';\nimport debounce from 'lodash/debounce';\nimport Drawer from '@units/Drawer';\nimport { useRouter } from 'next/router';\nimport { urlCase, delayedCallback, betterThrottle, createEvent } from '@helpers/common';\nimport { useTheme, useCms } from '@hooks';\nimport { type PredictiveSearch } from '@types/search';\nimport Loader from '@units/Loader';\nimport SearchInputWrapper from './SearchInputWrapper';\nimport {\n  ClearIconContainer,\n  ToogledSearchContainer,\n  SearchContainer,\n  SearchInput,\n  SearchAutoCompleteBoxStyle,\n  SuggestedText,\n  DekstopSearchAction,\n  LoaderContainer,\n} from './style';\n\ntype SearchProps = {\n  isToggleSearch?: boolean,\n  onSubmitCallback?: Function,\n};\n\nexport default function Search({ isToggleSearch, onSubmitCallback }: SearchProps) {\n  const { textTheme } = useTheme();\n  const [searchToggled, setSearchToggled] = useState(false);\n  const [options, setOptions] = useState([]);\n  const [inputValue, setInputValue] = useState([]);\n  const [predictiveLoading, setPredictiveLoading] = useState(false);\n  const inputRef = React.useRef();\n  const router = useRouter();\n  const { search: searchCms } = useCms('header');\n  const { searchIconColor, searchBarColor } = searchCms;\n\n  let apiThrottleTimeout;\n  let smoothLoaderControler;\n\n  const handleSetToggled = (): void => setSearchToggled(!searchToggled);\n\n  const setPredictiveSearch = async (value: string): Promise<any> => {\n    const result = await clientRequests.getPredictiveSearch(value);\n    setPredictiveLoading(false);\n    const predivtiveTerms = getPredictiveTermsList(result, value);\n    setOptions([{ keyTerm: `\"${value}\"` }, ...predivtiveTerms]);\n  };\n\n  const handlePredictiveSearch = async ({ target: { value } }: Object): Promise<any> => {\n    const valueCase = value.toLowerCase();\n    setInputValue(valueCase);\n    if (apiThrottleTimeout) clearTimeout(apiThrottleTimeout);\n    apiThrottleTimeout = setTimeout(() => {\n      // throttle reduces 'glitchy' loader animations caused by quick typing\n      betterThrottle(() => setPredictiveLoading(!!value));\n      if (value.length > 2) {\n        setPredictiveSearch(valueCase);\n      }\n    }, 500);\n  };\n\n  const goToSearch = (page: string): void => {\n    if (onSubmitCallback) onSubmitCallback();\n    setSearchToggled(false);\n    router.push(page);\n  };\n\n  const handleAutoCompleteClick = (option: PredictiveSearch): void => {\n    const searchParams = Object.keys(option)\n      .reduce(\n        (acc, cur) => `${acc}${kebabCase(cur)}=${urlCase(option[cur]?.replace(/\\\"/g, ''))}&`,\n        `/${SEARCH_PATH}?`\n      )\n      .slice(0, -1);\n\n    handleSetToggled();\n    goToSearch(searchParams);\n  };\n\n  const initLooseSearch = (): void => {\n    if (inputValue && inputValue.length > 2) {\n      goToSearch(`/${SEARCH_PATH}?key-term=${urlCase(inputValue)}`);\n      handleSetToggled();\n    }\n  };\n\n  const handleKeyDownSearch = () => ({ keyCode }: Object): void => {\n    if (keyCode === 13) initLooseSearch();\n  };\n\n  const renderNoToggleSearch = (\n    <SearchInputWrapper\n      {...{\n        searchToggled,\n        initLooseSearch,\n        searchIconColor,\n        searchBarColor,\n      }}>\n      <SearchInput\n        freeSolo\n        ignoreCase\n        disableClearable\n        getOptionLabel={(option) => getTermString(option)}\n        renderOption={(option) => (\n          <SuggestedText onClick={() => handleAutoCompleteClick(option)}>\n            {getTermString(option)}\n          </SuggestedText>\n        )}\n        options={options}\n        renderInput={(params) => (\n          <TextField\n            {...params}\n            onChange={handlePredictiveSearch}\n            label=\"\"\n            autoFocus={searchToggled}\n            variant=\"outlined\"\n            margin=\"normal\"\n            inputRef={inputRef}\n            InputProps={{ ...params.InputProps, type: 'search' }}\n            onBlur={() => createEvent(inputRef.current, 'mousedown', 50)}\n            onKeyDown={handleKeyDownSearch()}\n          />\n        )}\n      />\n    </SearchInputWrapper>\n  );\n\n  return (\n    <>\n      <Drawer\n        open={searchToggled}\n        anchor=\"left\"\n        width={70}\n        onClose={() => setPredictiveLoading(false)}>\n        <div>\n          <SearchAutoCompleteBoxStyle theme={textTheme} />\n          <ToogledSearchContainer>\n            <ClearIconContainer>\n              <Actionable aria-label=\"search\">\n                <ClearIcon fontSize=\"large\" onClick={handleSetToggled} />\n              </Actionable>\n            </ClearIconContainer>\n            {renderNoToggleSearch}\n            <LoaderContainer>\n              <Loader active={predictiveLoading} />\n            </LoaderContainer>\n          </ToogledSearchContainer>\n        </div>\n      </Drawer>\n      {isToggleSearch ? (\n        <SearchIcon color={searchIconColor} fontSize=\"large\" onClick={handleSetToggled} />\n      ) : (\n        <SearchInputWrapper\n          {...{\n            searchToggled,\n            handleSetToggled,\n            initLooseSearch,\n            searchIconColor,\n            searchBarColor,\n          }}>\n          <DekstopSearchAction fullWidth variant=\"outlined\" />\n        </SearchInputWrapper>\n      )}\n    </>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}