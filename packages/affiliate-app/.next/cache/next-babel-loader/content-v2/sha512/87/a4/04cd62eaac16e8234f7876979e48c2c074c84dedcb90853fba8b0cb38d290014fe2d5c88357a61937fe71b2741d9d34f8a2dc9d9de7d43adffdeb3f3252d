{"ast":null,"code":"import { getCalculatedDiscount, getSingle, getCurrentPrice } from '@helpers/common';\nimport { urlCase } from '@helpers/common';\nexport function filterDataPipe(data, {\n  priceSort,\n  priceThresholdLow,\n  priceThresholdHigh,\n  keyWords,\n  saleThreshold,\n  brands\n}) {\n  let filteredData = data;\n\n  if (priceThresholdLow) {\n    filteredData = filteredData.filter(({\n      topLevelData\n    }) => getCurrentPrice(topLevelData) >= priceThresholdLow);\n  }\n\n  if (priceThresholdHigh) {\n    filteredData = filteredData.filter(({\n      topLevelData\n    }) => getCurrentPrice(topLevelData) <= priceThresholdHigh);\n  }\n\n  if (saleThreshold) {\n    filteredData = filteredData.filter(({\n      topLevelData\n    }) => {\n      const wasPrice = getSingle(topLevelData.wasPrice) || NaN;\n      const nowPrice = getSingle(topLevelData.nowPrice) || NaN;\n      return getCalculatedDiscount(wasPrice, nowPrice) >= saleThreshold;\n    });\n  }\n\n  if (keyWords && keyWords.length) {\n    filteredData = filteredData.filter(({\n      topLevelData\n    }) => {\n      var _topLevelData$tags;\n\n      return ((_topLevelData$tags = topLevelData.tags) === null || _topLevelData$tags === void 0 ? void 0 : _topLevelData$tags.filter(tag => {\n        return keyWords.includes(tag);\n      }).length) === keyWords.length;\n    });\n  }\n\n  if (brands && brands.length) {\n    filteredData = filteredData.filter(({\n      metaData\n    }) => {\n      return brands.includes(urlCase(metaData.brand));\n    });\n  }\n\n  if (priceSort === 'high') {\n    filteredData = filteredData.sort((a, b) => getCurrentPrice(b.topLevelData) - getCurrentPrice(a.topLevelData));\n  }\n\n  if (priceSort === 'low') {\n    filteredData = filteredData.sort((a, b) => getCurrentPrice(a.topLevelData) - getCurrentPrice(b.topLevelData));\n  }\n\n  return filteredData;\n}\nexport function filterPipe(productSectionData, filters) {\n  const filteredData = productSectionData.map(({\n    category,\n    label,\n    data,\n    categoryLastUpdated\n  }) => {\n    return {\n      category,\n      label,\n      data: filterDataPipe(data, filters),\n      categoryLastUpdated\n    };\n  });\n  return filteredData;\n}","map":{"version":3,"sources":["/Users/justincoulston/Desktop/affilaite-core-mono/packages/affiliate-app/graphQL/resolvers/resolverPipes/filterPipe.js"],"names":["getCalculatedDiscount","getSingle","getCurrentPrice","urlCase","filterDataPipe","data","priceSort","priceThresholdLow","priceThresholdHigh","keyWords","saleThreshold","brands","filteredData","filter","topLevelData","wasPrice","NaN","nowPrice","length","tags","tag","includes","metaData","brand","sort","a","b","filterPipe","productSectionData","filters","map","category","label","categoryLastUpdated"],"mappings":"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","sourcesContent":["//@flow\nimport { getCalculatedDiscount, getSingle, getCurrentPrice } from '@helpers/common';\nimport { type ProductCategory, type ProductData } from '@types/product';\nimport { type Filters } from '@types/product';\nimport { urlCase } from '@helpers/common';\n\nexport function filterDataPipe(\n  data: Array<ProductData>,\n  { priceSort, priceThresholdLow, priceThresholdHigh, keyWords, saleThreshold, brands }: Filters\n): Array<ProductData> {\n  let filteredData: Array<any> = data;\n\n  if (priceThresholdLow) {\n    filteredData = filteredData.filter(\n      ({ topLevelData }) => getCurrentPrice(topLevelData) >= priceThresholdLow\n    );\n  }\n\n  if (priceThresholdHigh) {\n    filteredData = filteredData.filter(\n      ({ topLevelData }) => getCurrentPrice(topLevelData) <= priceThresholdHigh\n    );\n  }\n\n  if (saleThreshold) {\n    filteredData = filteredData.filter(({ topLevelData }) => {\n      const wasPrice = getSingle(topLevelData.wasPrice) || NaN;\n      const nowPrice = getSingle(topLevelData.nowPrice) || NaN;\n      return getCalculatedDiscount(wasPrice, nowPrice) >= saleThreshold;\n    });\n  }\n\n  if (keyWords && keyWords.length) {\n    filteredData = filteredData.filter(({ topLevelData }) => {\n      return (\n        topLevelData.tags?.filter((tag) => {\n          return keyWords.includes(tag);\n        }).length === keyWords.length\n      );\n    });\n  }\n\n  if (brands && brands.length) {\n    filteredData = filteredData.filter(({ metaData }) => {\n      return brands.includes(urlCase(metaData.brand));\n    });\n  }\n\n  if (priceSort === 'high') {\n    filteredData = filteredData.sort(\n      (a, b) => getCurrentPrice(b.topLevelData) - getCurrentPrice(a.topLevelData)\n    );\n  }\n\n  if (priceSort === 'low') {\n    filteredData = filteredData.sort(\n      (a, b) => getCurrentPrice(a.topLevelData) - getCurrentPrice(b.topLevelData)\n    );\n  }\n\n  return filteredData;\n}\n\nexport function filterPipe(\n  productSectionData: Array<ProductCategory>,\n  filters: Filters\n): Array<ProductCategory> {\n  const filteredData: any = productSectionData.map(\n    ({ category, label, data, categoryLastUpdated }) => {\n      return {\n        category,\n        label,\n        data: filterDataPipe(data, filters),\n        categoryLastUpdated,\n      };\n    }\n  );\n\n  return filteredData;\n}\n"]},"metadata":{},"sourceType":"module"}