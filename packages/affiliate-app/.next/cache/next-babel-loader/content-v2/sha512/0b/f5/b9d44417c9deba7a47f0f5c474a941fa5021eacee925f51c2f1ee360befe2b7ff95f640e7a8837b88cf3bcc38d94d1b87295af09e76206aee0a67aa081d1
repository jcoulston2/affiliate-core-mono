{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport gql from 'graphql-tag';\nimport { PRODUCTS_API_END_POINT, PREDICTIVE_SEARCH_API_END_POINT } from '@constants';\nimport { productQuery, searchQuery } from '../../graphQL/graphqlQueries';\nimport proxy from '../proxy'; // NOTE: this utility is intended for pages making requests via any client side requests. We should never include the store\n// cache in this file as it will be included inside the JS bundle\n\nexport default {\n  getProductData: (section, productType, productCountStart, productCountEnd, filters) => {\n    const query = `${productQuery}`;\n    return proxy().graphQl(PRODUCTS_API_END_POINT, query, _objectSpread({\n      section,\n      productType,\n      productCountStart,\n      productCountEnd\n    }, filters));\n  },\n  getSearchData: (searchValues, productCountStart, productCountEnd, filters) => {\n    const query = `${searchQuery}`;\n    return proxy().graphQl(PRODUCTS_API_END_POINT, query, _objectSpread(_objectSpread(_objectSpread({}, searchValues), filters), {}, {\n      productCountStart,\n      productCountEnd\n    }));\n  },\n  getPredictiveSearch: async keyTerm => {\n    const result = await proxy().get(PREDICTIVE_SEARCH_API_END_POINT, `?terms=${keyTerm}`, {\n      'content-type': 'application/x-www-form-urlencoded;charset=utf-8'\n    });\n    return result.data;\n  }\n};","map":{"version":3,"sources":["/Users/justincoulston/Desktop/affilaite-core-mono/packages/affiliate-app/apiUtil/requests/clientRequests.js"],"names":["gql","PRODUCTS_API_END_POINT","PREDICTIVE_SEARCH_API_END_POINT","productQuery","searchQuery","proxy","getProductData","section","productType","productCountStart","productCountEnd","filters","query","graphQl","getSearchData","searchValues","getPredictiveSearch","keyTerm","result","get","data"],"mappings":";;;;;;AACA,OAAOA,GAAP,MAAgB,aAAhB;AACA,SAASC,sBAAT,EAAiCC,+BAAjC,QAAwE,YAAxE;AACA,SAASC,YAAT,EAAuBC,WAAvB,QAA0C,8BAA1C;AAIA,OAAOC,KAAP,MAAkB,UAAlB,C,CAEA;AACA;;AACA,eAAe;AACbC,EAAAA,cAAc,EAAE,CACdC,OADc,EAEdC,WAFc,EAGdC,iBAHc,EAIdC,eAJc,EAKdC,OALc,KAMe;AAC7B,UAAMC,KAAK,GAAI,GAAET,YAAa,EAA9B;AACA,WAAOE,KAAK,GAAGQ,OAAR,CAAgBZ,sBAAhB,EAAwCW,KAAxC;AACLL,MAAAA,OADK;AAELC,MAAAA,WAFK;AAGLC,MAAAA,iBAHK;AAILC,MAAAA;AAJK,OAKFC,OALE,EAAP;AAOD,GAhBY;AAkBbG,EAAAA,aAAa,EAAE,CACbC,YADa,EAEbN,iBAFa,EAGbC,eAHa,EAIbC,OAJa,KAKgB;AAC7B,UAAMC,KAAK,GAAI,GAAER,WAAY,EAA7B;AAEA,WAAOC,KAAK,GAAGQ,OAAR,CAAgBZ,sBAAhB,EAAwCW,KAAxC,gDACFG,YADE,GAEFJ,OAFE;AAGLF,MAAAA,iBAHK;AAILC,MAAAA;AAJK,OAAP;AAMD,GAhCY;AAkCbM,EAAAA,mBAAmB,EAAE,MAAOC,OAAP,IAA4C;AAC/D,UAAMC,MAAM,GAAG,MAAMb,KAAK,GAAGc,GAAR,CAAYjB,+BAAZ,EAA8C,UAASe,OAAQ,EAA/D,EAAkE;AACrF,sBAAgB;AADqE,KAAlE,CAArB;AAIA,WAAOC,MAAM,CAACE,IAAd;AACD;AAxCY,CAAf","sourcesContent":["//@flow\nimport gql from 'graphql-tag';\nimport { PRODUCTS_API_END_POINT, PREDICTIVE_SEARCH_API_END_POINT } from '@constants';\nimport { productQuery, searchQuery } from '../../graphQL/graphqlQueries';\nimport { type ProductApiQuery, type Search } from '@types/apiQueries';\nimport { type PredictiveSearch } from '@types/search';\nimport { type Filters } from '@types/product';\nimport proxy from '../proxy';\n\n// NOTE: this utility is intended for pages making requests via any client side requests. We should never include the store\n// cache in this file as it will be included inside the JS bundle\nexport default {\n  getProductData: (\n    section: string,\n    productType: string,\n    productCountStart: number,\n    productCountEnd: number,\n    filters?: Filters\n  ): Promise<ProductApiQuery> => {\n    const query = `${productQuery}`;\n    return proxy().graphQl(PRODUCTS_API_END_POINT, query, {\n      section,\n      productType,\n      productCountStart,\n      productCountEnd,\n      ...filters,\n    });\n  },\n\n  getSearchData: (\n    searchValues: $Exact<PredictiveSearch>,\n    productCountStart: number,\n    productCountEnd: number,\n    filters?: Filters\n  ): Promise<ProductApiQuery> => {\n    const query = `${searchQuery}`;\n\n    return proxy().graphQl(PRODUCTS_API_END_POINT, query, {\n      ...searchValues,\n      ...filters,\n      productCountStart,\n      productCountEnd,\n    });\n  },\n\n  getPredictiveSearch: async (keyTerm: string): Promise<Search> => {\n    const result = await proxy().get(PREDICTIVE_SEARCH_API_END_POINT, `?terms=${keyTerm}`, {\n      'content-type': 'application/x-www-form-urlencoded;charset=utf-8',\n    });\n\n    return result.data;\n  },\n};\n"]},"metadata":{},"sourceType":"module"}