{"ast":null,"code":"var _jsxFileName = \"/Users/justincoulston/Desktop/affilaite-core-mono/packages/affiliate-app/components/modules/UserSettings/UserSettingsConfig.js\",\n    _s = $RefreshSig$();\n\nvar __jsx = React.createElement;\nimport React, { useState, Fragment } from 'react';\nimport PersonIcon from '@material-ui/icons/Person';\nimport Divider from '@material-ui/core/Divider';\nimport Typography from '@units/Typography';\nimport ListItemText from '@material-ui/core/ListItemText';\nimport upperFirst from 'lodash/upperFirst';\nimport UserEditSetting from './UserEditSetting';\nimport WcIcon from '@material-ui/icons/Wc';\nimport LabelIcon from '@material-ui/icons/Label';\nimport DataUsageIcon from '@material-ui/icons/DataUsage';\nimport NotificationsIcon from '@material-ui/icons/Notifications';\nimport ChevronRightIcon from '@material-ui/icons/ChevronRight';\nimport Drawer from '@units/Drawer';\nimport { StyledList, StyledListItem, StyledListIcon, CleasrSettings } from './styles';\nimport { Actionable } from '@styles/CommonStyledComponents';\nimport { useCms } from '@hooks';\nexport default function UserSettingsConfig(_ref) {\n  _s();\n\n  var _this = this;\n\n  var user = _ref.user,\n      setUserSettings = _ref.setUserSettings,\n      avatarIconColor = _ref.avatarIconColor;\n\n  var _useState = useState(false),\n      settingsOpen = _useState[0],\n      setSettingsOpen = _useState[1];\n\n  var _useState2 = useState(null),\n      currentEditSetting = _useState2[0],\n      setCurrentEditSetting = _useState2[1];\n\n  var _useCms = useCms('other'),\n      persuasiveCookieText = _useCms.persuasiveCookieText;\n\n  var closeSettings = function closeSettings() {\n    return setSettingsOpen(false);\n  };\n\n  var settingsList = [{\n    icon: __jsx(LabelIcon, {\n      color: \"primary\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 38,\n        columnNumber: 13\n      }\n    }),\n    property: 'name',\n    title: 'name',\n    value: user.name,\n    description: ''\n  }, {\n    icon: __jsx(WcIcon, {\n      color: \"primary\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 46,\n        columnNumber: 13\n      }\n    }),\n    property: 'gender',\n    title: 'gender',\n    value: user.gender,\n    description: ''\n  }, {\n    icon: __jsx(NotificationsIcon, {\n      color: \"primary\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 53,\n        columnNumber: 13\n      }\n    }),\n    property: 'notifications',\n    title: 'notifications',\n    value: user.notifications ? 'on' : 'off',\n    description: ''\n  }, {\n    icon: __jsx(DataUsageIcon, {\n      color: \"primary\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 60,\n        columnNumber: 13\n      }\n    }),\n    property: 'allowCookies',\n    title: 'cookies',\n    value: user.allowCookies ? 'on' : 'off',\n    description: persuasiveCookieText\n  }];\n  return __jsx(React.Fragment, null, __jsx(Actionable, {\n    \"aria-label\": \"user settings\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 7\n    }\n  }, __jsx(PersonIcon, {\n    fontSize: \"large\",\n    color: avatarIconColor,\n    onClick: function onClick() {\n      return setSettingsOpen(true);\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 9\n    }\n  })), __jsx(Drawer, {\n    open: settingsOpen,\n    anchor: 'right',\n    iconCloseClick: closeSettings,\n    onClose: closeSettings,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 7\n    }\n  }, !currentEditSetting ? __jsx(React.Fragment, null, __jsx(StyledList, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 85,\n      columnNumber: 13\n    }\n  }, __jsx(Divider, {\n    light: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 86,\n      columnNumber: 15\n    }\n  }), settingsList.map(function (_ref2, index) {\n    var icon = _ref2.icon,\n        property = _ref2.property,\n        value = _ref2.value,\n        title = _ref2.title,\n        description = _ref2.description;\n    return __jsx(Fragment, {\n      key: index,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 88,\n        columnNumber: 17\n      }\n    }, __jsx(StyledListItem, {\n      onClick: function onClick() {\n        return setCurrentEditSetting({\n          property: property,\n          title: title,\n          description: description\n        });\n      },\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 89,\n        columnNumber: 19\n      }\n    }, __jsx(StyledListIcon, {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 91,\n        columnNumber: 21\n      }\n    }, icon), __jsx(ListItemText, {\n      primary: upperFirst(title),\n      secondary: value,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 92,\n        columnNumber: 21\n      }\n    }), __jsx(ChevronRightIcon, {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 93,\n        columnNumber: 21\n      }\n    })), __jsx(Divider, {\n      light: true,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 95,\n        columnNumber: 19\n      }\n    }));\n  })), __jsx(CleasrSettings, {\n    onClick: function onClick() {\n      return setUserSettings({});\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 99,\n      columnNumber: 13\n    }\n  }, __jsx(Typography, {\n    tag: \"p\",\n    decoration: 'underline',\n    padding: '30px',\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 100,\n      columnNumber: 15\n    }\n  }, \"Clear all settings\"))) : __jsx(UserEditSetting, {\n    setting: currentEditSetting,\n    user: user,\n    setUserSettings: setUserSettings,\n    setCurrentEditSetting: setCurrentEditSetting,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 106,\n      columnNumber: 11\n    }\n  })));\n}\n\n_s(UserSettingsConfig, \"QRhWMoAztXK2a2bz/RsjA+aOBdM=\", false, function () {\n  return [useCms];\n});\n\n_c = UserSettingsConfig;\n\nvar _c;\n\n$RefreshReg$(_c, \"UserSettingsConfig\");","map":{"version":3,"sources":["/Users/justincoulston/Desktop/affilaite-core-mono/packages/affiliate-app/components/modules/UserSettings/UserSettingsConfig.js"],"names":["React","useState","Fragment","PersonIcon","Divider","Typography","ListItemText","upperFirst","UserEditSetting","WcIcon","LabelIcon","DataUsageIcon","NotificationsIcon","ChevronRightIcon","Drawer","StyledList","StyledListItem","StyledListIcon","CleasrSettings","Actionable","useCms","UserSettingsConfig","user","setUserSettings","avatarIconColor","settingsOpen","setSettingsOpen","currentEditSetting","setCurrentEditSetting","persuasiveCookieText","closeSettings","settingsList","icon","property","title","value","name","description","gender","notifications","allowCookies","map","index"],"mappings":"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","sourcesContent":["//@flow\nimport React, { useState, Fragment } from 'react';\nimport { type User } from '@types/user';\nimport PersonIcon from '@material-ui/icons/Person';\nimport Divider from '@material-ui/core/Divider';\nimport Typography from '@units/Typography';\nimport ListItemText from '@material-ui/core/ListItemText';\nimport upperFirst from 'lodash/upperFirst';\nimport UserEditSetting from './UserEditSetting';\nimport WcIcon from '@material-ui/icons/Wc';\nimport LabelIcon from '@material-ui/icons/Label';\nimport DataUsageIcon from '@material-ui/icons/DataUsage';\nimport NotificationsIcon from '@material-ui/icons/Notifications';\nimport ChevronRightIcon from '@material-ui/icons/ChevronRight';\nimport Drawer from '@units/Drawer';\nimport { StyledList, StyledListItem, StyledListIcon, CleasrSettings } from './styles';\nimport { Actionable } from '@styles/CommonStyledComponents';\nimport { useCms } from '@hooks';\n\ntype UserSettingsConfigProps = {\n  user: User,\n  setUserSettings: Function,\n  avatarIconColor: string,\n};\n\nexport default function UserSettingsConfig({\n  user,\n  setUserSettings,\n  avatarIconColor,\n}: UserSettingsConfigProps) {\n  const [settingsOpen, setSettingsOpen] = useState(false);\n  const [currentEditSetting, setCurrentEditSetting] = useState(null);\n  const { persuasiveCookieText } = useCms('other');\n\n  const closeSettings = () => setSettingsOpen(false);\n  const settingsList = [\n    {\n      icon: <LabelIcon color=\"primary\" />,\n      property: 'name',\n      title: 'name',\n      value: user.name,\n      description: '',\n    },\n\n    {\n      icon: <WcIcon color=\"primary\" />,\n      property: 'gender',\n      title: 'gender',\n      value: user.gender,\n      description: '',\n    },\n    {\n      icon: <NotificationsIcon color=\"primary\" />,\n      property: 'notifications',\n      title: 'notifications',\n      value: user.notifications ? 'on' : 'off',\n      description: '',\n    },\n    {\n      icon: <DataUsageIcon color=\"primary\" />,\n      property: 'allowCookies',\n      title: 'cookies',\n      value: user.allowCookies ? 'on' : 'off',\n      description: persuasiveCookieText,\n    },\n  ];\n\n  return (\n    <>\n      <Actionable aria-label=\"user settings\">\n        <PersonIcon\n          fontSize=\"large\"\n          color={avatarIconColor}\n          onClick={() => setSettingsOpen(true)}\n        />\n      </Actionable>\n\n      <Drawer\n        open={settingsOpen}\n        anchor={'right'}\n        iconCloseClick={closeSettings}\n        onClose={closeSettings}>\n        {!currentEditSetting ? (\n          <>\n            <StyledList>\n              <Divider light />\n              {settingsList.map(({ icon, property, value, title, description }, index) => (\n                <Fragment key={index}>\n                  <StyledListItem\n                    onClick={() => setCurrentEditSetting({ property, title, description })}>\n                    <StyledListIcon>{icon}</StyledListIcon>\n                    <ListItemText primary={upperFirst(title)} secondary={value} />\n                    <ChevronRightIcon />\n                  </StyledListItem>\n                  <Divider light />\n                </Fragment>\n              ))}\n            </StyledList>\n            <CleasrSettings onClick={() => setUserSettings({})}>\n              <Typography tag=\"p\" decoration={'underline'} padding={'30px'}>\n                Clear all settings\n              </Typography>\n            </CleasrSettings>\n          </>\n        ) : (\n          <UserEditSetting\n            setting={currentEditSetting}\n            user={user}\n            setUserSettings={setUserSettings}\n            setCurrentEditSetting={setCurrentEditSetting}\n          />\n        )}\n      </Drawer>\n    </>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}