{"ast":null,"code":"function _createForOfIteratorHelper(o, allowArrayLike) { var it; if (typeof Symbol === \"undefined\" || o[Symbol.iterator] == null) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = o[Symbol.iterator](); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it[\"return\"] != null) it[\"return\"](); } finally { if (didErr) throw err; } } }; }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\nimport { crossIncludes } from '@helpers/common';\nexport function getTermString(predictiveTerms, useSplitter) {\n  if (typeof predictiveTerms === 'string') {\n    return predictiveTerms;\n  } else {\n    var values = Object.values(predictiveTerms).filter(function (notNull) {\n      return !!notNull;\n    });\n    return values.join(useSplitter ? ' | ' : ' ');\n  }\n}\nexport function getPredictiveTermsList(predictiveTermsResponse, value) {\n  var suggestions = [];\n  var pushedTerms = [];\n\n  var valueMatch = function valueMatch(p1, p2) {\n    return p1 && p2 ? (p1 === null || p1 === void 0 ? void 0 : p1.includes(p2)) || (p2 === null || p2 === void 0 ? void 0 : p2.includes(p1)) : false;\n  };\n\n  var pushSuggestion = function pushSuggestion(term) {\n    var termStr = JSON.stringify(term);\n\n    if (!pushedTerms.includes(termStr)) {\n      pushedTerms.push(termStr);\n      suggestions.push(term);\n    }\n  };\n\n  var _iterator = _createForOfIteratorHelper(predictiveTermsResponse),\n      _step;\n\n  try {\n    for (_iterator.s(); !(_step = _iterator.n()).done;) {\n      var term = _step.value;\n      var brand = term.brand,\n          section = term.section,\n          productColor = term.productColor,\n          keyTerm = term.keyTerm,\n          category = term.category;\n\n      if (valueMatch(section, value) && category) {\n        pushSuggestion({\n          section: section\n        });\n        pushSuggestion({\n          section: section,\n          category: category\n        });\n      }\n\n      if (valueMatch(brand, value)) {\n        pushSuggestion({\n          brand: brand\n        });\n        if (section) pushSuggestion({\n          section: section,\n          brand: brand\n        });\n        if (category) pushSuggestion({\n          section: section,\n          brand: brand,\n          category: category\n        });\n      }\n\n      if (valueMatch(productColor, value)) {\n        if (category) pushSuggestion({\n          section: section,\n          productColor: productColor,\n          category: category\n        });\n\n        if (category && keyTerm && !crossIncludes(category, keyTerm)) {\n          pushSuggestion({\n            section: section,\n            productColor: productColor,\n            keyTerm: keyTerm,\n            category: category\n          });\n        }\n      }\n\n      if (valueMatch(keyTerm, value) && category && !crossIncludes(category, keyTerm)) {\n        pushSuggestion({\n          section: section,\n          keyTerm: keyTerm,\n          category: category\n        });\n      }\n\n      if (valueMatch(category, value)) {\n        if (section) pushSuggestion({\n          section: section,\n          category: category\n        });\n      }\n    }\n  } catch (err) {\n    _iterator.e(err);\n  } finally {\n    _iterator.f();\n  }\n\n  return suggestions;\n}","map":{"version":3,"sources":["/Users/justincoulston/Desktop/affilaite-core-mono/packages/affiliate-app/components/modules/Search/helper.js"],"names":["crossIncludes","getTermString","predictiveTerms","useSplitter","values","Object","filter","notNull","join","getPredictiveTermsList","predictiveTermsResponse","value","suggestions","pushedTerms","valueMatch","p1","p2","includes","pushSuggestion","term","termStr","JSON","stringify","push","brand","section","productColor","keyTerm","category"],"mappings":"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","sourcesContent":["//@flow\nimport { type PredictiveSearch } from '@types/search';\nimport { crossIncludes } from '@helpers/common';\n\nexport function getTermString(predictiveTerms: PredictiveSearch, useSplitter?: boolean): string {\n  if (typeof predictiveTerms === 'string') {\n    return predictiveTerms;\n  } else {\n    const values = Object.values(predictiveTerms).filter((notNull) => !!notNull);\n    return values.join(useSplitter ? ' | ' : ' ');\n  }\n}\n\nexport function getPredictiveTermsList(\n  predictiveTermsResponse: Array<PredictiveSearch>,\n  value: string\n): Array<PredictiveSearch> {\n  const suggestions = [];\n  const pushedTerms = [];\n\n  const valueMatch = (p1, p2): boolean => (p1 && p2 ? p1?.includes(p2) || p2?.includes(p1) : false);\n  const pushSuggestion = (term) => {\n    const termStr = JSON.stringify(term);\n    if (!pushedTerms.includes(termStr)) {\n      pushedTerms.push(termStr);\n      suggestions.push(term);\n    }\n  };\n\n  for (const term of predictiveTermsResponse) {\n    const { brand, section, productColor, keyTerm, category } = term;\n\n    if (valueMatch(section, value) && category) {\n      pushSuggestion({ section });\n      pushSuggestion({ section, category });\n    }\n\n    if (valueMatch(brand, value)) {\n      pushSuggestion({ brand });\n      if (section) pushSuggestion({ section, brand });\n      if (category) pushSuggestion({ section, brand, category });\n    }\n\n    if (valueMatch(productColor, value)) {\n      if (category) pushSuggestion({ section, productColor, category });\n      if (category && keyTerm && !crossIncludes(category, keyTerm)) {\n        pushSuggestion({ section, productColor, keyTerm, category });\n      }\n    }\n\n    if (valueMatch(keyTerm, value) && category && !crossIncludes(category, keyTerm)) {\n      pushSuggestion({ section, keyTerm, category });\n    }\n\n    if (valueMatch(category, value)) {\n      if (section) pushSuggestion({ section, category });\n    }\n  }\n\n  return suggestions;\n}\n"]},"metadata":{},"sourceType":"module"}