{"ast":null,"code":"var _jsxFileName = \"/Users/justincoulston/Desktop/affilaite-core-mono/packages/affiliate-app/containers/Pwa/hook.js\";\nvar __jsx = React.createElement;\nimport React, { useEffect } from 'react';\nimport { isServer, isIos, isInPwa, isChrome } from '@helpers/common';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { actions } from './actions';\nimport appAlert from '@sweetalert/with-react';\nimport { PwaInstructions } from '@modules/Pwa';\nexport default function usePwa(onPromptSuccess) {\n  if (isInPwa() || isServer()) return {};\n  const dispatch = useDispatch();\n  const isPwaInitiated = useSelector(appState => {\n    const {\n      pwaState\n    } = appState;\n    return pwaState.isPwaInitiated;\n  });\n\n  const setIsPwaInitiated = flag => {\n    dispatch(actions.setPwaInitialised(flag));\n  };\n\n  const initPwaPrompt = () => {\n    // iOS does not yet support a native PWA prompt\n    if (isIos()) {\n      return appAlert(__jsx(PwaInstructions, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 32,\n          columnNumber: 23\n        }\n      }));\n    } else if (!window.pwaPrompt) {\n      return null;\n    }\n\n    window.pwaPrompt.prompt();\n    window.pwaPrompt.userChoice.then(pwaUserSelection => {\n      if (pwaUserSelection.outcome === 'accepted' && onPromptSuccess) {\n        onPromptSuccess();\n      }\n\n      window.pwaPrompt = null;\n      setIsPwaInitiated(false);\n    });\n  };\n\n  useEffect(() => {\n    if (isIos() && !isChrome()) {\n      setIsPwaInitiated(true);\n    }\n\n    window.addEventListener('beforeinstallprompt', event => {\n      event.preventDefault();\n\n      if (!window.pwaPrompt) {\n        window.pwaPrompt = event;\n        if (event) setIsPwaInitiated(true);\n      }\n    });\n  }, []);\n  return {\n    initPwaPrompt,\n    isPwaInitiated,\n    setIsPwaInitiated\n  };\n}","map":{"version":3,"sources":["/Users/justincoulston/Desktop/affilaite-core-mono/packages/affiliate-app/containers/Pwa/hook.js"],"names":["React","useEffect","isServer","isIos","isInPwa","isChrome","useSelector","useDispatch","actions","appAlert","PwaInstructions","usePwa","onPromptSuccess","dispatch","isPwaInitiated","appState","pwaState","setIsPwaInitiated","flag","setPwaInitialised","initPwaPrompt","window","pwaPrompt","prompt","userChoice","then","pwaUserSelection","outcome","addEventListener","event","preventDefault"],"mappings":";;AACA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,SAASC,QAAT,EAAmBC,KAAnB,EAA0BC,OAA1B,EAAmCC,QAAnC,QAAmD,iBAAnD;AACA,SAASC,WAAT,EAAsBC,WAAtB,QAAyC,aAAzC;AAEA,SAASC,OAAT,QAAwB,WAAxB;AACA,OAAOC,QAAP,MAAqB,wBAArB;AACA,SAASC,eAAT,QAAgC,cAAhC;AAQA,eAAe,SAASC,MAAT,CAAgBC,eAAhB,EAAyD;AACtE,MAAIR,OAAO,MAAMF,QAAQ,EAAzB,EAA6B,OAAO,EAAP;AAE7B,QAAMW,QAAQ,GAAGN,WAAW,EAA5B;AACA,QAAMO,cAAc,GAAGR,WAAW,CAAES,QAAD,IAAoC;AACrE,UAAM;AAAEC,MAAAA;AAAF,QAAeD,QAArB;AACA,WAAOC,QAAQ,CAACF,cAAhB;AACD,GAHiC,CAAlC;;AAKA,QAAMG,iBAAiB,GAAIC,IAAD,IAAyB;AACjDL,IAAAA,QAAQ,CAACL,OAAO,CAACW,iBAAR,CAA0BD,IAA1B,CAAD,CAAR;AACD,GAFD;;AAIA,QAAME,aAAa,GAAG,MAAa;AACjC;AACA,QAAIjB,KAAK,EAAT,EAAa;AACX,aAAOM,QAAQ,CAAC,MAAC,eAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAAD,CAAf;AACD,KAFD,MAEO,IAAI,CAACY,MAAM,CAACC,SAAZ,EAAuB;AAC5B,aAAO,IAAP;AACD;;AAEDD,IAAAA,MAAM,CAACC,SAAP,CAAiBC,MAAjB;AACAF,IAAAA,MAAM,CAACC,SAAP,CAAiBE,UAAjB,CAA4BC,IAA5B,CAAkCC,gBAAD,IAAsB;AACrD,UAAIA,gBAAgB,CAACC,OAAjB,KAA6B,UAA7B,IAA2Cf,eAA/C,EAAgE;AAC9DA,QAAAA,eAAe;AAChB;;AAEDS,MAAAA,MAAM,CAACC,SAAP,GAAmB,IAAnB;AACAL,MAAAA,iBAAiB,CAAC,KAAD,CAAjB;AACD,KAPD;AAQD,GAjBD;;AAmBAhB,EAAAA,SAAS,CAAC,MAAM;AACd,QAAIE,KAAK,MAAM,CAACE,QAAQ,EAAxB,EAA4B;AAC1BY,MAAAA,iBAAiB,CAAC,IAAD,CAAjB;AACD;;AAEDI,IAAAA,MAAM,CAACO,gBAAP,CAAwB,qBAAxB,EAAgDC,KAAD,IAAW;AACxDA,MAAAA,KAAK,CAACC,cAAN;;AACA,UAAI,CAACT,MAAM,CAACC,SAAZ,EAAuB;AACrBD,QAAAA,MAAM,CAACC,SAAP,GAAmBO,KAAnB;AACA,YAAIA,KAAJ,EAAWZ,iBAAiB,CAAC,IAAD,CAAjB;AACZ;AACF,KAND;AAOD,GAZQ,EAYN,EAZM,CAAT;AAcA,SAAO;AACLG,IAAAA,aADK;AAELN,IAAAA,cAFK;AAGLG,IAAAA;AAHK,GAAP;AAKD","sourcesContent":["//@flow\nimport React, { useEffect } from 'react';\nimport { isServer, isIos, isInPwa, isChrome } from '@helpers/common';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { type GlobalState } from '@types/appState';\nimport { actions } from './actions';\nimport appAlert from '@sweetalert/with-react';\nimport { PwaInstructions } from '@modules/Pwa';\n\ntype UsePwaOutput = {\n  initPwaPrompt: Function,\n  setIsPwaInitiated: Function,\n  isPwaInitiated: boolean,\n};\n\nexport default function usePwa(onPromptSuccess: Function): UsePwaOutput {\n  if (isInPwa() || isServer()) return {};\n\n  const dispatch = useDispatch();\n  const isPwaInitiated = useSelector((appState: GlobalState): boolean => {\n    const { pwaState } = appState;\n    return pwaState.isPwaInitiated;\n  });\n\n  const setIsPwaInitiated = (flag: boolean): void => {\n    dispatch(actions.setPwaInitialised(flag));\n  };\n\n  const initPwaPrompt = (): ?void => {\n    // iOS does not yet support a native PWA prompt\n    if (isIos()) {\n      return appAlert(<PwaInstructions />);\n    } else if (!window.pwaPrompt) {\n      return null;\n    }\n\n    window.pwaPrompt.prompt();\n    window.pwaPrompt.userChoice.then((pwaUserSelection) => {\n      if (pwaUserSelection.outcome === 'accepted' && onPromptSuccess) {\n        onPromptSuccess();\n      }\n\n      window.pwaPrompt = null;\n      setIsPwaInitiated(false);\n    });\n  };\n\n  useEffect(() => {\n    if (isIos() && !isChrome()) {\n      setIsPwaInitiated(true);\n    }\n\n    window.addEventListener('beforeinstallprompt', (event) => {\n      event.preventDefault();\n      if (!window.pwaPrompt) {\n        window.pwaPrompt = event;\n        if (event) setIsPwaInitiated(true);\n      }\n    });\n  }, []);\n\n  return {\n    initPwaPrompt,\n    isPwaInitiated,\n    setIsPwaInitiated,\n  };\n}\n"]},"metadata":{},"sourceType":"module"}