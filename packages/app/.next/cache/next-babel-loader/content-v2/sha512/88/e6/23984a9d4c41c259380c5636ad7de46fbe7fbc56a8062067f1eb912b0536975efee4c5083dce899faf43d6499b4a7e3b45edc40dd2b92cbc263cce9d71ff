{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport gql from 'graphql-tag';\nimport { navigationDataQuery, cmsQuery, productQuery, brandListQuery } from '../../graphQL/graphqlQueries';\nimport { productSchema, cmsSchema } from '../../graphQL/schemas';\nimport { storeController, cmsController } from '../controller';\n// NOTE: this utility is intended for pages making requests via any \"getStaticProps\" / build time requests\nexport default {\n  getProductData: (section, productType, productCountStart, productCountEnd, filters) => {\n    const query = gql`\n      ${productQuery}\n    `;\n    return storeController(query, productSchema, true, _objectSpread({\n      section,\n      productType,\n      productCountStart,\n      productCountEnd\n    }, filters));\n  },\n  getNavigationData: () => {\n    const query = gql`\n      ${navigationDataQuery}\n    `;\n    return storeController(query, productSchema, false);\n  },\n  getCmsContent: bespokeSections => {\n    const query = gql`\n      ${cmsQuery(bespokeSections)}\n    `;\n    return cmsController(query, cmsSchema);\n  },\n  getBrandList: () => {\n    const query = gql`\n      ${brandListQuery}\n    `;\n    return storeController(query, productSchema, false);\n  }\n};","map":{"version":3,"sources":["/Users/justincoulston/Desktop/affilaite-core-mono/packages/affiliate-app/apiUtil/requests/buildRequests.js"],"names":["gql","navigationDataQuery","cmsQuery","productQuery","brandListQuery","productSchema","cmsSchema","storeController","cmsController","getProductData","section","productType","productCountStart","productCountEnd","filters","query","getNavigationData","getCmsContent","bespokeSections","getBrandList"],"mappings":";;;;;;AACA,OAAOA,GAAP,MAAgB,aAAhB;AACA,SACEC,mBADF,EAEEC,QAFF,EAGEC,YAHF,EAIEC,cAJF,QAKO,8BALP;AAMA,SAASC,aAAT,EAAwBC,SAAxB,QAAyC,uBAAzC;AACA,SAASC,eAAT,EAA0BC,aAA1B,QAA+C,eAA/C;AASA;AACA,eAAe;AACbC,EAAAA,cAAc,EAAE,CACdC,OADc,EAEdC,WAFc,EAGdC,iBAHc,EAIdC,eAJc,EAKdC,OALc,KAMe;AAC7B,UAAMC,KAAK,GAAGf,GAAI;AACtB,QAAQG,YAAa;AACrB,KAFI;AAIA,WAAOI,eAAe,CAACQ,KAAD,EAAQV,aAAR,EAAuB,IAAvB;AACpBK,MAAAA,OADoB;AAEpBC,MAAAA,WAFoB;AAGpBC,MAAAA,iBAHoB;AAIpBC,MAAAA;AAJoB,OAKjBC,OALiB,EAAtB;AAOD,GAnBY;AAqBbE,EAAAA,iBAAiB,EAAE,MAAmC;AACpD,UAAMD,KAAK,GAAGf,GAAI;AACtB,QAAQC,mBAAoB;AAC5B,KAFI;AAGA,WAAOM,eAAe,CAACQ,KAAD,EAAQV,aAAR,EAAuB,KAAvB,CAAtB;AACD,GA1BY;AA4BbY,EAAAA,aAAa,EAAGC,eAAD,IAAmD;AAChE,UAAMH,KAAK,GAAGf,GAAI;AACtB,QAAQE,QAAQ,CAACgB,eAAD,CAAkB;AAClC,KAFI;AAGA,WAAOV,aAAa,CAACO,KAAD,EAAQT,SAAR,CAApB;AACD,GAjCY;AAmCba,EAAAA,YAAY,EAAE,MAAkC;AAC9C,UAAMJ,KAAK,GAAGf,GAAI;AACtB,QAAQI,cAAe;AACvB,KAFI;AAGA,WAAOG,eAAe,CAACQ,KAAD,EAAQV,aAAR,EAAuB,KAAvB,CAAtB;AACD;AAxCY,CAAf","sourcesContent":["//@flow\nimport gql from 'graphql-tag';\nimport {\n  navigationDataQuery,\n  cmsQuery,\n  productQuery,\n  brandListQuery,\n} from '../../graphQL/graphqlQueries';\nimport { productSchema, cmsSchema } from '../../graphQL/schemas';\nimport { storeController, cmsController } from '../controller';\nimport {\n  type ProductApiQuery,\n  type NavigationApiQuery,\n  type CmsApiQuery,\n  type BrandListApiQuery,\n} from '@types/apiQueries';\nimport { type Filters } from '@types/product';\n\n// NOTE: this utility is intended for pages making requests via any \"getStaticProps\" / build time requests\nexport default {\n  getProductData: (\n    section: string,\n    productType: string,\n    productCountStart: number,\n    productCountEnd: number,\n    filters?: Filters\n  ): Promise<ProductApiQuery> => {\n    const query = gql`\n      ${productQuery}\n    `;\n\n    return storeController(query, productSchema, true, {\n      section,\n      productType,\n      productCountStart,\n      productCountEnd,\n      ...filters,\n    });\n  },\n\n  getNavigationData: (): Promise<NavigationApiQuery> => {\n    const query = gql`\n      ${navigationDataQuery}\n    `;\n    return storeController(query, productSchema, false);\n  },\n\n  getCmsContent: (bespokeSections: string): Promise<CmsApiQuery> => {\n    const query = gql`\n      ${cmsQuery(bespokeSections)}\n    `;\n    return cmsController(query, cmsSchema);\n  },\n\n  getBrandList: (): Promise<BrandListApiQuery> => {\n    const query = gql`\n      ${brandListQuery}\n    `;\n    return storeController(query, productSchema, false);\n  },\n};\n"]},"metadata":{},"sourceType":"module"}