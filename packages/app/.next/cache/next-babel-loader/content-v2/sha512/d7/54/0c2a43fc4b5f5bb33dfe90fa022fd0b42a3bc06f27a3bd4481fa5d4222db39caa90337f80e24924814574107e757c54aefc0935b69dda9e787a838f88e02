{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport { SEARCH_PATH, PLP_PATH, INVALID_FILTER_PATH } from '@constants';\nimport { isStringInt, navigateToPageRefresh } from '@helpers/common';\nimport { getSearchQueryFromUrl } from '@helpers/page';\nimport camelCase from 'lodash/camelCase';\nconst validFilters = ['price-sort', 'price-threshold-low', 'price-threshold-high', 'key-words', 'sale-threshold', 'brands', 'section', 'category'];\nexport function toFilterArray(str) {\n  return str.replace(/\\s/g, '').split('&');\n}\nexport function normalizeFilterValue(value) {\n  if (value.includes(',')) {\n    return value.split(',');\n  } else if (isStringInt(value)) {\n    return parseInt(value);\n  } else {\n    return value;\n  }\n}\nexport function getFilterValues(filterkey, filterValues) {\n  if (filterkey === 'filter' && filterValues) {\n    return toFilterArray(filterValues).reduce((acc, cur) => {\n      let [key, value] = cur.split('=');\n      return validFilters.includes(key) ? _objectSpread(_objectSpread({}, acc), {}, {\n        [camelCase(key)]: normalizeFilterValue(value)\n      }) : acc;\n    }, {});\n  } else if (!filterkey) {\n    return {};\n  } else {\n    throw INVALID_FILTER_PATH;\n  }\n}\nexport function getFilterValuesFromSearchUrl(searchTerms) {\n  return Object.keys(searchTerms).reduce((acc, cur) => {\n    const value = normalizeFilterValue(searchTerms[cur]);\n    return validFilters.includes(cur) ? _objectSpread(_objectSpread({}, acc), {}, {\n      [camelCase(cur)]: value\n    }) : acc;\n  }, {});\n}\nexport function getFiltersFromUrl() {\n  if (true) return null;\n  const [filterMatch] = window.location.href.match(/\\/filter\\/(.*)|\\/params?(.*)/g) || [];\n  const urlFilterValues = filterMatch && filterMatch.replace(/\\/filter\\/|\\/params\\?/, '');\n  return urlFilterValues ? getFilterValues('filter', urlFilterValues) : null;\n}\nexport function getFilterPlpBasePath(router) {\n  const isSearchPage = router.pathname.includes(SEARCH_PATH);\n\n  if (isSearchPage) {\n    return `/${SEARCH_PATH}${getSearchQueryFromUrl(router)}`;\n  } else {\n    const [section, productType] = router.query.slug;\n    return `/${PLP_PATH}/${section}/${productType}/filter/`;\n  }\n}\nexport function pushFilterPlpBasePath(router) {\n  const basePath = getFilterPlpBasePath(router);\n  navigateToPageRefresh(basePath);\n}","map":null,"metadata":{},"sourceType":"module"}