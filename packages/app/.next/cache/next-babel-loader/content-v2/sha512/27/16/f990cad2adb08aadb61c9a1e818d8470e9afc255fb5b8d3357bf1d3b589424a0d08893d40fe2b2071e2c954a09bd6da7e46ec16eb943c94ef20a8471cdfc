{"ast":null,"code":"import _extends from \"/Users/justincoulston/Desktop/affilaite-core-mono/node_modules/next/node_modules/@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutProperties from \"/Users/justincoulston/Desktop/affilaite-core-mono/node_modules/next/node_modules/@babel/runtime/helpers/esm/objectWithoutProperties\";\nvar _jsxFileName = \"/Users/justincoulston/Desktop/affilaite-core-mono/packages/app/components/units/CustomLink/CustomLink.js\";\nvar __jsx = React.createElement;\nimport React from 'react';\nimport Link from 'next/link';\n// Sometimes there are some issues using next/link when liking to static dynamic pages\n// if we do encounter such issues, we can use this component, and pass in the prop\n// \"useNativeLink\", along with a href. This will just switch to a standard native link.\n// It's good to define it in a single component when linking to the CMS especially when\n// using with Typography\nexport default function CustomLink(_ref) {\n  var useNativeLink = _ref.useNativeLink,\n      children = _ref.children,\n      href = _ref.href,\n      nextLinkProps = _objectWithoutProperties(_ref, [\"useNativeLink\", \"children\", \"href\"]);\n\n  return useNativeLink ? __jsx(\"a\", {\n    href: href,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 24,\n      columnNumber: 5\n    }\n  }, children) : __jsx(Link, _extends({\n    href: href\n  }, nextLinkProps, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 26,\n      columnNumber: 5\n    }\n  }), __jsx(\"a\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 27,\n      columnNumber: 7\n    }\n  }, children));\n}\n_c = CustomLink;\n\nvar _c;\n\n$RefreshReg$(_c, \"CustomLink\");","map":{"version":3,"sources":["/Users/justincoulston/Desktop/affilaite-core-mono/packages/app/components/units/CustomLink/CustomLink.js"],"names":["React","Link","CustomLink","useNativeLink","children","href","nextLinkProps"],"mappings":";;;;AACA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,IAAP,MAAiB,WAAjB;AASA;AACA;AACA;AACA;AACA;AACA,eAAe,SAASC,UAAT,OAKK;AAAA,MAJlBC,aAIkB,QAJlBA,aAIkB;AAAA,MAHlBC,QAGkB,QAHlBA,QAGkB;AAAA,MAFlBC,IAEkB,QAFlBA,IAEkB;AAAA,MADfC,aACe;;AAClB,SAAOH,aAAa,GAClB;AAAG,IAAA,IAAI,EAAEE,IAAT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAgBD,QAAhB,CADkB,GAGlB,MAAC,IAAD;AAAM,IAAA,IAAI,EAAEC;AAAZ,KAAsBC,aAAtB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAIF,QAAJ,CADF,CAHF;AAOD;KAbuBF,U","sourcesContent":["//@flow\nimport React from 'react';\nimport Link from 'next/link';\n\ntype CustomLinkProps = $Exact<{\n  useNativeLink?: boolean,\n  href?: string,\n  children: any,\n  ...\n}>;\n\n// Sometimes there are some issues using next/link when liking to static dynamic pages\n// if we do encounter such issues, we can use this component, and pass in the prop\n// \"useNativeLink\", along with a href. This will just switch to a standard native link.\n// It's good to define it in a single component when linking to the CMS especially when\n// using with Typography\nexport default function CustomLink({\n  useNativeLink,\n  children,\n  href,\n  ...nextLinkProps\n}: CustomLinkProps) {\n  return useNativeLink ? (\n    <a href={href}>{children}</a>\n  ) : (\n    <Link href={href} {...nextLinkProps}>\n      <a>{children}</a>\n    </Link>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}