{"ast":null,"code":"import _extends from \"/Users/justincoulston/Desktop/affilaite-core-mono/node_modules/next/node_modules/@babel/runtime/helpers/esm/extends\";\nvar __jsx = React.createElement;\nimport React from 'react';\nimport { connect } from 'react-redux';\nimport ProductListing from '@modules/ProductListing';\nimport ProductDetailView from '@modules/ProductDetailView';\nimport ListingHero from '@modules/ListingHero';\nimport { useCms } from '@hooks';\nimport { actions } from './actions';\nimport { Spacer } from '@styles/CommonStyledComponents';\nimport { getProductLink } from '@helpers/page';\n\nvar ListingContent = function ListingContent(_ref) {\n  var initialProductData = _ref.initialProductData,\n      fetchedProducts = _ref.fetchedProducts,\n      fetchProductsInSearch = _ref.fetchProductsInSearch,\n      totalProductsInCategory = _ref.totalProductsInCategory,\n      productViewOpen = _ref.productViewOpen,\n      productViewData = _ref.productViewData,\n      populateProductView = _ref.populateProductView,\n      openProductDetailView = _ref.openProductDetailView,\n      fetchProducts = _ref.fetchProducts,\n      productFilters = _ref.productFilters,\n      productSearchValues = _ref.productSearchValues,\n      hasFiltersSetFromClient = _ref.hasFiltersSetFromClient,\n      setClientFilterStatus = _ref.setClientFilterStatus,\n      loading = _ref.loading,\n      setLoading = _ref.setLoading;\n  var section = initialProductData.section,\n      sectionData = initialProductData.data;\n\n  var _useCms = useCms('listingContent'),\n      productListingContent = _useCms.productListingContent,\n      productViewContent = _useCms.productViewContent,\n      productListingHeroContent = _useCms.productListingHeroContent;\n\n  var _ref2 = sectionData[0] || {},\n      category = _ref2.category,\n      initialProducts = _ref2.data,\n      totalFromBuild = _ref2.totalProductsInCategory,\n      categoryLastUpdated = _ref2.categoryLastUpdated;\n\n  var productLink = getProductLink(productViewData); // We need to check the totalProductsInCategory property from both the static prop fetching and the client fetching\n  // for the filter update/fetch functionality. This is used for the 'load more' button on the listing page.\n\n  var totalCategoryProducts = totalProductsInCategory || totalFromBuild; // When we have filters selected, the product fetching will be handled via the client for SPA functionality\n  // this means that we can omit the inital products given via 'getStaticProps' which was executed server-side.\n  // When we clear the filters, we just do a simple page refresh and getStaticProps executes again.\n\n  var initialProductsProps = hasFiltersSetFromClient ? [] : initialProducts || [];\n  return __jsx(\"section\", null, __jsx(ListingHero, productListingHeroContent), __jsx(ProductListing, _extends({}, productListingContent, {\n    section: section,\n    category: category,\n    totalCategoryProducts: totalCategoryProducts,\n    fetchedProducts: fetchedProducts,\n    productSearchValues: productSearchValues,\n    fetchProductsInSearch: fetchProductsInSearch,\n    populateProductView: populateProductView,\n    openProductDetailView: openProductDetailView,\n    fetchProducts: fetchProducts,\n    setLoading: setLoading,\n    loading: loading,\n    productFilters: productFilters,\n    setClientFilterStatus: setClientFilterStatus,\n    initialProducts: initialProductsProps\n  })), __jsx(ProductDetailView, _extends({}, productViewContent, {\n    productViewOpen: productViewOpen,\n    productViewData: productViewData,\n    openProductDetailView: openProductDetailView,\n    productLink: productLink,\n    categoryLastUpdated: categoryLastUpdated\n  })), __jsx(Spacer, {\n    h: 20\n  }));\n};\n\nfunction mapDispatchToProps(dispatch) {\n  return {\n    populateProductView: function populateProductView(productViewData) {\n      return dispatch(actions.populateProductView(productViewData));\n    },\n    openProductDetailView: function openProductDetailView() {\n      return dispatch(actions.openProductDetailView());\n    },\n    fetchProducts: function fetchProducts() {\n      return dispatch(actions.fetchProducts.apply(actions, arguments));\n    },\n    fetchProductsInSearch: function fetchProductsInSearch() {\n      return dispatch(actions.fetchProductsInSearch.apply(actions, arguments));\n    },\n    setClientFilterStatus: function setClientFilterStatus(status) {\n      return dispatch(actions.setClientFilterStatus(status));\n    },\n    setLoading: function setLoading(status) {\n      return dispatch(actions.setLoading(status));\n    }\n  };\n}\n\nfunction mapStateToProps(_ref3) {\n  var buildTimeState = _ref3.buildTimeState,\n      listingContentState = _ref3.listingContentState;\n  var initialProductData = buildTimeState.productData,\n      productFilters = buildTimeState.productFilters,\n      productSearchValues = buildTimeState.productSearchValues;\n  var productViewData = listingContentState.productViewData,\n      productViewOpen = listingContentState.productViewOpen,\n      fetchedProducts = listingContentState.fetchedProducts,\n      totalProductsInCategory = listingContentState.totalProductsInCategory,\n      hasFiltersSetFromClient = listingContentState.hasFiltersSetFromClient,\n      loading = listingContentState.loading;\n  return {\n    initialProductData: initialProductData,\n    productFilters: productFilters,\n    productSearchValues: productSearchValues,\n    fetchedProducts: fetchedProducts,\n    totalProductsInCategory: totalProductsInCategory,\n    productViewOpen: productViewOpen,\n    productViewData: productViewData,\n    hasFiltersSetFromClient: hasFiltersSetFromClient,\n    loading: loading\n  };\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(ListingContent);","map":null,"metadata":{},"sourceType":"module"}