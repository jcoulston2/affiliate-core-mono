{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport { INVALID_SEARCH_PATH } from '@constants/errors';\nimport camelCase from 'lodash/camelCase';\nimport isEmpty from 'lodash/isEmpty';\nconst validSearchParams = ['category', 'key-term', 'product-color', 'section', 'brand'];\nexport function getSearchValues(searchTerms) {\n  if (isEmpty(searchTerms)) throw INVALID_SEARCH_PATH;\n  return Object.keys(searchTerms).reduce((acc, cur) => validSearchParams.includes(cur) ? _objectSpread(_objectSpread({}, acc), {}, {\n    [camelCase(cur)]: searchTerms[cur]\n  }) : acc, {});\n}\nexport function getSearchQueryFromUrl(router) {\n  const {\n    query\n  } = router;\n  const valuesFromSearch = Object.keys(query).reduce((acc, cur) => {\n    return validSearchParams.includes(cur) ? `${acc}${cur}=${query[cur]}&` : acc;\n  }, '?');\n  return valuesFromSearch.length > 1 ? valuesFromSearch : '';\n}","map":{"version":3,"sources":["/Users/justincoulston/Desktop/affilaite-core-mono/packages/affiliate-app/helpers/page/search.js"],"names":["INVALID_SEARCH_PATH","camelCase","isEmpty","validSearchParams","getSearchValues","searchTerms","Object","keys","reduce","acc","cur","includes","getSearchQueryFromUrl","router","query","valuesFromSearch","length"],"mappings":";;;;;;AACA,SAASA,mBAAT,QAAoC,mBAApC;AACA,OAAOC,SAAP,MAAsB,kBAAtB;AACA,OAAOC,OAAP,MAAoB,gBAApB;AAIA,MAAMC,iBAAiB,GAAG,CAAC,UAAD,EAAa,UAAb,EAAyB,eAAzB,EAA0C,SAA1C,EAAqD,OAArD,CAA1B;AAEA,OAAO,SAASC,eAAT,CAAyBC,WAAzB,EAAwE;AAC7E,MAAIH,OAAO,CAACG,WAAD,CAAX,EAA0B,MAAML,mBAAN;AAC1B,SAAOM,MAAM,CAACC,IAAP,CAAYF,WAAZ,EAAyBG,MAAzB,CACL,CAACC,GAAD,EAAMC,GAAN,KACEP,iBAAiB,CAACQ,QAAlB,CAA2BD,GAA3B,oCAAuCD,GAAvC;AAA4C,KAACR,SAAS,CAACS,GAAD,CAAV,GAAkBL,WAAW,CAACK,GAAD;AAAzE,OAAmFD,GAFhF,EAGL,EAHK,CAAP;AAKD;AAED,OAAO,SAASG,qBAAT,CAA+BC,MAA/B,EAAuD;AAC5D,QAAM;AAAEC,IAAAA;AAAF,MAAYD,MAAlB;AACA,QAAME,gBAAgB,GAAGT,MAAM,CAACC,IAAP,CAAYO,KAAZ,EAAmBN,MAAnB,CAAkC,CAACC,GAAD,EAAMC,GAAN,KAAc;AACvE,WAAOP,iBAAiB,CAACQ,QAAlB,CAA2BD,GAA3B,IAAmC,GAAED,GAAI,GAAEC,GAAI,IAAGI,KAAK,CAACJ,GAAD,CAAM,GAA7D,GAAkED,GAAzE;AACD,GAFwB,EAEtB,GAFsB,CAAzB;AAIA,SAAOM,gBAAgB,CAACC,MAAjB,GAA0B,CAA1B,GAA8BD,gBAA9B,GAAiD,EAAxD;AACD","sourcesContent":["//@flow\nimport { INVALID_SEARCH_PATH } from '@constants/errors';\nimport camelCase from 'lodash/camelCase';\nimport isEmpty from 'lodash/isEmpty';\nimport { type PredictiveSearch, type SearchUrlCase } from '@types/search';\nimport { type Router } from '@types/next';\n\nconst validSearchParams = ['category', 'key-term', 'product-color', 'section', 'brand'];\n\nexport function getSearchValues(searchTerms: SearchUrlCase): ?PredictiveSearch {\n  if (isEmpty(searchTerms)) throw INVALID_SEARCH_PATH;\n  return Object.keys(searchTerms).reduce<Object>(\n    (acc, cur) =>\n      validSearchParams.includes(cur) ? { ...acc, [camelCase(cur)]: searchTerms[cur] } : acc,\n    {}\n  );\n}\n\nexport function getSearchQueryFromUrl(router: Router): string {\n  const { query } = router;\n  const valuesFromSearch = Object.keys(query).reduce<Object>((acc, cur) => {\n    return validSearchParams.includes(cur) ? `${acc}${cur}=${query[cur]}&` : acc;\n  }, '?');\n\n  return valuesFromSearch.length > 1 ? valuesFromSearch : '';\n}\n"]},"metadata":{},"sourceType":"module"}