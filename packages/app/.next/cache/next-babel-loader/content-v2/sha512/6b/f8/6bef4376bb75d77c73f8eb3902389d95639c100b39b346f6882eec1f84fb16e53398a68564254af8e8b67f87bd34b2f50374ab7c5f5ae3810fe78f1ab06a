{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nvar _jsxFileName = \"/Users/justincoulston/Desktop/affilaite-core-mono/packages/app/components/modules/Navigation/MobileSubNavContainers/MobileSubNavContainers.js\";\nvar __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport React from 'react';\nimport Grid from '@material-ui/core/Grid';\nimport Divider from '@material-ui/core/Divider';\nimport Link from 'next/link';\nimport Typography from '@units/Typography';\nimport Card from '@units/Card';\nimport { SubNavTitle, MobileMenuItem, MobileLink } from './styles';\nimport { NavCard } from '../MobileNavigation/styles';\nimport ChevronRightIcon from '@material-ui/icons/ChevronRight';\nimport { PLP_PATH } from '@constants';\nexport default function SubNavContainers({\n  title,\n  titleIndex,\n  subNav,\n  setNavigationExpandedLevel,\n  setMobileNavigationActiveTitleIndex,\n  mobileNavigationActiveTitleIndex,\n  navigationExpandedLevel,\n  setNavigationBreadCrumb,\n  mobileFirstLevelNavLink,\n  mobileSecondLevelNavLink,\n  mobileNavHorizontalLayers,\n  mobileNavCardPadding,\n  togglMobileNav,\n  resetProductFeeds\n}) {\n  const handleNavExpanded = (activeIndex, level, title) => {\n    setNavigationBreadCrumb(state => _objectSpread(_objectSpread({}, state), {}, {\n      [level]: title\n    }));\n    setNavigationExpandedLevel(level);\n    setMobileNavigationActiveTitleIndex(activeIndex);\n  };\n\n  const isThirdLevel = navigationExpandedLevel === 2;\n  const isSecondLevel = navigationExpandedLevel === 1;\n  const isActive = mobileNavigationActiveTitleIndex === titleIndex;\n  const isThreeLayeredMobileNav = mobileNavHorizontalLayers === 3;\n  const isLastLayerActive = isThreeLayeredMobileNav ? isThirdLevel : isSecondLevel;\n\n  const handleNavItemClick = () => {\n    togglMobileNav(false);\n    resetProductFeeds();\n  }; // First / top level\n\n\n  const renderFirstLevelNav = () => __jsx(NavCard, {\n    item: true,\n    xs: 4,\n    onClick: () => handleNavExpanded(titleIndex, 1, title),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 5\n    }\n  }, __jsx(Card, {\n    padding: mobileNavCardPadding,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 7\n    }\n  }, __jsx(Grid, {\n    container: true,\n    alignItems: \"center\",\n    justify: \"space-between\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 9\n    }\n  }, __jsx(Typography, {\n    tag: \"h3\",\n    typeStyles: mobileFirstLevelNavLink,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 11\n    }\n  }, title), __jsx(ChevronRightIcon, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 11\n    }\n  })))); // Labels\n\n\n  const renderLabels = title => __jsx(Grid, {\n    item: true,\n    xs: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 83,\n      columnNumber: 5\n    }\n  }, __jsx(NavCard, {\n    onClick: () => handleNavExpanded(titleIndex, 2, title),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 84,\n      columnNumber: 7\n    }\n  }, isSecondLevel && __jsx(Card, {\n    padding: mobileNavCardPadding,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 86,\n      columnNumber: 11\n    }\n  }, __jsx(Grid, {\n    container: true,\n    alignItems: \"center\",\n    justify: \"space-between\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 87,\n      columnNumber: 13\n    }\n  }, __jsx(Typography, {\n    tag: \"h3\",\n    typeStyles: mobileSecondLevelNavLink,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 88,\n      columnNumber: 15\n    }\n  }, title), __jsx(ChevronRightIcon, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 91,\n      columnNumber: 15\n    }\n  }))))); // Nav links\n\n\n  const renderNavLinks = (subNavItems, title) => __jsx(Grid, {\n    item: true,\n    xs: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 101,\n      columnNumber: 5\n    }\n  }, !isThreeLayeredMobileNav && __jsx(MobileMenuItem, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 103,\n      columnNumber: 9\n    }\n  }, __jsx(Typography, {\n    tag: \"h3\",\n    typeStyles: mobileSecondLevelNavLink,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 104,\n      columnNumber: 11\n    }\n  }, title)), isLastLayerActive && subNavItems.map(({\n    title,\n    link\n  }, index) => __jsx(React.Fragment, null, __jsx(MobileMenuItem, {\n    key: `StyledMenuItem${index}`,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 112,\n      columnNumber: 13\n    }\n  }, __jsx(MobileLink, {\n    onClick: handleNavItemClick,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 113,\n      columnNumber: 15\n    }\n  }, __jsx(Link, {\n    href: `/${PLP_PATH}/[...slug]`,\n    as: `/${PLP_PATH}${link}`,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 114,\n      columnNumber: 17\n    }\n  }, title))), __jsx(Divider, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 119,\n      columnNumber: 13\n    }\n  }))));\n\n  return __jsx(React.Fragment, null, (!navigationExpandedLevel || isActive) && __jsx(SubNavTitle, {\n    container: true,\n    item: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 128,\n      columnNumber: 9\n    }\n  }, renderFirstLevelNav(), __jsx(Grid, {\n    container: true,\n    item: true,\n    xs: 8,\n    direction: \"column\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 130,\n      columnNumber: 11\n    }\n  }, subNav.map(({\n    title,\n    subNavItems\n  }, index) => __jsx(Grid, {\n    item: true,\n    xs: true,\n    container: true,\n    key: index,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 132,\n      columnNumber: 15\n    }\n  }, isThreeLayeredMobileNav && renderLabels(title), renderNavLinks(subNavItems, title))))));\n}\nSubNavContainers.propTypes = {};","map":{"version":3,"sources":["/Users/justincoulston/Desktop/affilaite-core-mono/packages/app/components/modules/Navigation/MobileSubNavContainers/MobileSubNavContainers.js"],"names":["React","Grid","Divider","Link","Typography","Card","SubNavTitle","MobileMenuItem","MobileLink","NavCard","ChevronRightIcon","PLP_PATH","SubNavContainers","title","titleIndex","subNav","setNavigationExpandedLevel","setMobileNavigationActiveTitleIndex","mobileNavigationActiveTitleIndex","navigationExpandedLevel","setNavigationBreadCrumb","mobileFirstLevelNavLink","mobileSecondLevelNavLink","mobileNavHorizontalLayers","mobileNavCardPadding","togglMobileNav","resetProductFeeds","handleNavExpanded","activeIndex","level","state","isThirdLevel","isSecondLevel","isActive","isThreeLayeredMobileNav","isLastLayerActive","handleNavItemClick","renderFirstLevelNav","renderLabels","renderNavLinks","subNavItems","map","link","index","propTypes"],"mappings":"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","sourcesContent":["//@flow\nimport React from 'react';\nimport Grid from '@material-ui/core/Grid';\nimport Divider from '@material-ui/core/Divider';\nimport Link from 'next/link';\nimport Typography from '@units/Typography';\nimport { type CmsCopy } from '@types/cms';\nimport Card from '@units/Card';\nimport { SubNavTitle, MobileMenuItem, MobileLink } from './styles';\nimport { NavCard } from '../MobileNavigation/styles';\nimport ChevronRightIcon from '@material-ui/icons/ChevronRight';\nimport { type NormalizedSubNavDataItem } from '@types/navigationData';\nimport { type CmsResponsiveString } from '@types/cms';\nimport { PLP_PATH } from '@constants';\n\ntype SubNavContainersProps = {\n  title: string,\n  titleIndex: number,\n  subNav: Array<NormalizedSubNavDataItem>,\n  navigationExpandedLevel: number,\n  setMobileNavigationActiveTitleIndex: Function,\n  mobileNavigationActiveTitleIndex: Function,\n  setNavigationExpandedLevel: Function,\n  navigationExpandedLevel: number,\n  setNavigationBreadCrumb: Function,\n  mobileFirstLevelNavLink: CmsCopy,\n  mobileSecondLevelNavLink: CmsCopy,\n  mobileNavCardPadding: CmsResponsiveString,\n  mobileNavHorizontalLayers: 2 | 3,\n  togglMobileNav: Function,\n  resetProductFeeds: Function,\n};\n\nexport default function SubNavContainers({\n  title,\n  titleIndex,\n  subNav,\n  setNavigationExpandedLevel,\n  setMobileNavigationActiveTitleIndex,\n  mobileNavigationActiveTitleIndex,\n  navigationExpandedLevel,\n  setNavigationBreadCrumb,\n  mobileFirstLevelNavLink,\n  mobileSecondLevelNavLink,\n  mobileNavHorizontalLayers,\n  mobileNavCardPadding,\n  togglMobileNav,\n  resetProductFeeds,\n}: SubNavContainersProps) {\n  const handleNavExpanded = (activeIndex, level, title) => {\n    setNavigationBreadCrumb((state) => ({ ...state, [level]: title }));\n    setNavigationExpandedLevel(level);\n    setMobileNavigationActiveTitleIndex(activeIndex);\n  };\n\n  const isThirdLevel = navigationExpandedLevel === 2;\n  const isSecondLevel = navigationExpandedLevel === 1;\n  const isActive = mobileNavigationActiveTitleIndex === titleIndex;\n  const isThreeLayeredMobileNav = mobileNavHorizontalLayers === 3;\n  const isLastLayerActive = isThreeLayeredMobileNav ? isThirdLevel : isSecondLevel;\n\n  const handleNavItemClick = (): void => {\n    togglMobileNav(false);\n    resetProductFeeds();\n  };\n\n  // First / top level\n  const renderFirstLevelNav = () => (\n    <NavCard item xs={4} onClick={() => handleNavExpanded(titleIndex, 1, title)}>\n      <Card padding={mobileNavCardPadding}>\n        <Grid container alignItems=\"center\" justify=\"space-between\">\n          <Typography tag=\"h3\" typeStyles={mobileFirstLevelNavLink}>\n            {title}\n          </Typography>\n          <ChevronRightIcon />\n        </Grid>\n      </Card>\n    </NavCard>\n  );\n\n  // Labels\n  const renderLabels = (title) => (\n    <Grid item xs>\n      <NavCard onClick={() => handleNavExpanded(titleIndex, 2, title)}>\n        {isSecondLevel && (\n          <Card padding={mobileNavCardPadding}>\n            <Grid container alignItems=\"center\" justify=\"space-between\">\n              <Typography tag=\"h3\" typeStyles={mobileSecondLevelNavLink}>\n                {title}\n              </Typography>\n              <ChevronRightIcon />\n            </Grid>\n          </Card>\n        )}\n      </NavCard>\n    </Grid>\n  );\n\n  // Nav links\n  const renderNavLinks = (subNavItems, title) => (\n    <Grid item xs>\n      {!isThreeLayeredMobileNav && (\n        <MobileMenuItem>\n          <Typography tag=\"h3\" typeStyles={mobileSecondLevelNavLink}>\n            {title}\n          </Typography>\n        </MobileMenuItem>\n      )}\n      {isLastLayerActive &&\n        subNavItems.map(({ title, link }, index) => (\n          <>\n            <MobileMenuItem key={`StyledMenuItem${index}`}>\n              <MobileLink onClick={handleNavItemClick}>\n                <Link href={`/${PLP_PATH}/[...slug]`} as={`/${PLP_PATH}${link}`}>\n                  {title}\n                </Link>\n              </MobileLink>\n            </MobileMenuItem>\n            <Divider />\n          </>\n        ))}\n    </Grid>\n  );\n\n  return (\n    <>\n      {(!navigationExpandedLevel || isActive) && (\n        <SubNavTitle container item>\n          {renderFirstLevelNav()}\n          <Grid container item xs={8} direction=\"column\">\n            {subNav.map(({ title, subNavItems }, index) => (\n              <Grid item xs container key={index}>\n                {isThreeLayeredMobileNav && renderLabels(title)}\n                {renderNavLinks(subNavItems, title)}\n              </Grid>\n            ))}\n          </Grid>\n        </SubNavTitle>\n      )}\n    </>\n  );\n}\n\nSubNavContainers.propTypes = {};\n"]},"metadata":{},"sourceType":"module"}