{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/extends\";\nvar __jsx = React.createElement;\nimport React from 'react';\nimport { connect } from 'react-redux';\nimport ProductListing from '@modules/ProductListing';\nimport ProductDetailView from '@modules/ProductDetailView';\nimport ListingHero from '@modules/ListingHero';\nimport { useCms } from '@hooks';\nimport { actions } from './actions';\nimport { Spacer } from '@styles/CommonStyledComponents';\nimport { getProductLink } from '@helpers/page';\n\nconst ListingContent = ({\n  initialProductData,\n  fetchedProducts,\n  fetchProductsInSearch,\n  totalProductsInCategory,\n  productViewOpen,\n  productViewData,\n  populateProductView,\n  openProductDetailView,\n  fetchProducts,\n  productFilters,\n  productSearchValues,\n  hasFiltersSetFromClient,\n  setClientFilterStatus,\n  loading,\n  setLoading\n}) => {\n  const {\n    section,\n    data: sectionData\n  } = initialProductData;\n  const {\n    productListingContent,\n    productViewContent,\n    productListingHeroContent\n  } = useCms('listingContent');\n  const {\n    category,\n    data: initialProducts,\n    totalProductsInCategory: totalFromBuild,\n    categoryLastUpdated\n  } = sectionData[0] || {};\n  const productLink = getProductLink(productViewData); // We need to check the totalProductsInCategory property from both the static prop fetching and the client fetching\n  // for the filter update/fetch functionality. This is used for the 'load more' button on the listing page.\n\n  const totalCategoryProducts = totalProductsInCategory || totalFromBuild; // When we have filters selected, the product fetching will be handled via the client for SPA functionality\n  // this means that we can omit the inital products given via 'getStaticProps' which was executed server-side.\n  // When we clear the filters, we just do a simple page refresh and getStaticProps executes again.\n\n  const initialProductsProps = hasFiltersSetFromClient ? [] : initialProducts || [];\n  return __jsx(\"section\", null, __jsx(ListingHero, productListingHeroContent), __jsx(ProductListing, _extends({}, productListingContent, {\n    section,\n    category,\n    totalCategoryProducts,\n    fetchedProducts,\n    productSearchValues,\n    fetchProductsInSearch,\n    populateProductView,\n    openProductDetailView,\n    fetchProducts,\n    setLoading,\n    loading,\n    productFilters,\n    setClientFilterStatus,\n    initialProducts: initialProductsProps\n  })), __jsx(ProductDetailView, _extends({}, productViewContent, {\n    productViewOpen,\n    productViewData,\n    openProductDetailView,\n    productLink,\n    categoryLastUpdated\n  })), __jsx(Spacer, {\n    h: 20\n  }));\n};\n\nfunction mapDispatchToProps(dispatch) {\n  return {\n    populateProductView: productViewData => dispatch(actions.populateProductView(productViewData)),\n    openProductDetailView: () => dispatch(actions.openProductDetailView()),\n    fetchProducts: (...args) => dispatch(actions.fetchProducts(...args)),\n    fetchProductsInSearch: (...args) => dispatch(actions.fetchProductsInSearch(...args)),\n    setClientFilterStatus: status => dispatch(actions.setClientFilterStatus(status)),\n    setLoading: status => dispatch(actions.setLoading(status))\n  };\n}\n\nfunction mapStateToProps({\n  buildTimeState,\n  listingContentState\n}) {\n  const {\n    productData: initialProductData,\n    productFilters,\n    productSearchValues\n  } = buildTimeState;\n  const {\n    productViewData,\n    productViewOpen,\n    fetchedProducts,\n    totalProductsInCategory,\n    hasFiltersSetFromClient,\n    loading\n  } = listingContentState;\n  return {\n    initialProductData,\n    productFilters,\n    productSearchValues,\n    fetchedProducts,\n    totalProductsInCategory,\n    productViewOpen,\n    productViewData,\n    hasFiltersSetFromClient,\n    loading\n  };\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(ListingContent);","map":null,"metadata":{},"sourceType":"module"}