{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/extends\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nvar __jsx = React.createElement;\nimport React, { useState } from 'react';\nimport Dialog from '@material-ui/core/Dialog';\nimport { getLocalStorage, setLocalStorage } from '@helpers/common';\nimport { MODALS_PREVENTED } from '@constants';\nimport Button from '@units/Button';\nimport Grid from '@material-ui/core/Grid';\nimport styled from 'styled-components';\nimport ClearIcon from '@material-ui/icons/Clear';\nimport Typography from '@units/Typography';\nimport { useTheme } from '@hooks';\nimport { StyledCmsGrid } from '@styles/CommonStyledComponents';\nexport const ModalContainer = styled(Grid).withConfig({\n  displayName: \"Modal__ModalContainer\",\n  componentId: \"sc-1gq3sie-0\"\n})([\"padding:0px 10px;overflow-y:scroll;\"]);\nexport const Close = styled(Grid).withConfig({\n  displayName: \"Modal__Close\",\n  componentId: \"sc-1gq3sie-1\"\n})([\"&:hover{cursor:pointer;opacity:0.5;}\"]);\nexport const Title = styled.div.withConfig({\n  displayName: \"Modal__Title\",\n  componentId: \"sc-1gq3sie-2\"\n})([\"padding:20px;\"]);\nexport const DialogContainer = styled(Dialog).withConfig({\n  displayName: \"Modal__DialogContainer\",\n  componentId: \"sc-1gq3sie-3\"\n})([\".MuiPaper-root{padding:20px 10px;overflow:hidden;}*{::-webkit-scrollbar{-webkit-appearance:none;width:3px;}::-webkit-scrollbar-thumb{border-radius:4px;background-color:#dcdada;}}\"]);\nexport default function Modal(_ref) {\n  let {\n    children,\n    padding,\n    modalKey,\n    showOnce,\n    onSubmitModal,\n    modalTitle,\n    buttonText,\n    open,\n    setOpen\n  } = _ref,\n      rest = _objectWithoutProperties(_ref, [\"children\", \"padding\", \"modalKey\", \"showOnce\", \"onSubmitModal\", \"modalTitle\", \"buttonText\", \"open\", \"setOpen\"]);\n\n  const modalsPrevented = getLocalStorage(MODALS_PREVENTED) || [];\n  const isModalPrevented = showOnce && modalsPrevented.includes(modalKey);\n  const {\n    modalTheme\n  } = useTheme();\n\n  const handleModalOpenStatus = () => {\n    setOpen(false);\n    if (showOnce) setLocalStorage(MODALS_PREVENTED, [modalKey, ...modalsPrevented]);\n    if (onSubmitModal) onSubmitModal();\n  };\n\n  return !isModalPrevented ? __jsx(DialogContainer, _extends({}, rest, {\n    open: open\n  }), __jsx(ModalContainer, null, __jsx(Grid, {\n    item: true,\n    xs: 12,\n    container: true,\n    justify: \"flex-end\"\n  }, __jsx(Close, {\n    item: true,\n    onClick: () => setOpen(false)\n  }, __jsx(ClearIcon, {\n    fontSize: \"large\"\n  }))), modalTitle && __jsx(Typography, {\n    typeStyles: modalTheme.modalHeading,\n    fullwidth: true\n  }, modalTitle), __jsx(StyledCmsGrid, {\n    padding: modalTheme.defaultPadding || padding\n  }, children), __jsx(Button, {\n    primary: true,\n    fullWidth: true,\n    onClick: handleModalOpenStatus\n  }, buttonText || 'Ok'))) : null;\n}","map":null,"metadata":{},"sourceType":"module"}