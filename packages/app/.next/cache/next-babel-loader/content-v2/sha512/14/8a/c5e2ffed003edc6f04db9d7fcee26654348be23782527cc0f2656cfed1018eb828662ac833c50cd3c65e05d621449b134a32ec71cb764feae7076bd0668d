{"ast":null,"code":"import { actions, actionTypes } from './actions';\nimport { take, put, all, fork, call } from 'redux-saga/effects';\nimport clientRequests from '../../apiUtil/requests/clientRequests';\nimport { getFetchedProductsData } from './helper';\nexport function* watchPopulateProductView() {\n  while (true) {\n    const {\n      productViewData\n    } = yield take(actionTypes.POPULATE_PRODUCT_VIEW);\n    yield put(actions.populateProductViewSuccess(productViewData));\n  }\n}\nexport function* watchOpenProductView() {\n  while (true) {\n    yield take(actionTypes.OPEN_PRODUCT_DETAIL_VIEW);\n    yield put(actions.openProductDetailViewSuccess());\n  }\n}\nexport function* watcherClientFilterStatus() {\n  while (true) {\n    const {\n      status\n    } = yield take(actionTypes.HAS_FILTERS_SET_FROM_CLIENT);\n    yield put(actions.setClientFilterStatusSuccess(status));\n  }\n}\nexport function* watcherSetLoading() {\n  while (true) {\n    const {\n      status\n    } = yield take(actionTypes.SET_LOADING);\n    yield put(actions.setLoadingSuccess(status));\n  }\n}\nexport function* watchFetchProducts() {\n  while (true) {\n    const {\n      section,\n      productType,\n      productCountStart,\n      productCountEnd,\n      filters,\n      incrementExistingProducts\n    } = yield take(actionTypes.FETCH_PRODUCTS_LISTING);\n    const {\n      categoryData\n    } = yield call(clientRequests.getProductData, section, productType, productCountStart, productCountEnd, filters);\n    const {\n      data: fetchedProducts,\n      totalProductsInCategory\n    } = getFetchedProductsData(categoryData);\n    if (!fetchedProducts) return null;\n    yield put(actions.setLoadingSuccess(false));\n    yield put(actions.fetchProductsSuccess(fetchedProducts, productCountStart, productCountEnd, incrementExistingProducts, totalProductsInCategory));\n  }\n}\nexport function* watchFetchProductsInSearch() {\n  while (true) {\n    const {\n      searchValues,\n      productCountStart,\n      productCountEnd,\n      searchFilters,\n      incrementExistingProducts\n    } = yield take(actionTypes.FETCH_PRODUCTS_IN_SEARCH);\n    const {\n      searchData\n    } = yield call(clientRequests.getSearchData, searchValues, productCountStart, productCountEnd, searchFilters);\n    const {\n      data: fetchedProducts,\n      totalProductsInCategory\n    } = getFetchedProductsData(searchData);\n\n    if (!fetchedProducts) {\n      return null;\n    }\n\n    yield put(actions.setLoadingSuccess(false));\n    yield put(actions.fetchProductsSuccess(fetchedProducts, productCountStart, productCountEnd, incrementExistingProducts, totalProductsInCategory));\n  }\n}\nexport function* watcherClearFetchedProducts() {\n  while (true) {\n    yield take(actionTypes.CLEAR_FETCHED_PRODUCTS);\n    yield put(actions.clearClientFetchedProductsSuccess());\n  }\n}\nexport default function* rootSaga() {\n  yield all([fork(watchPopulateProductView), fork(watchOpenProductView), fork(watchFetchProducts), fork(watcherClientFilterStatus), fork(watcherSetLoading), fork(watchFetchProductsInSearch), fork(watcherClearFetchedProducts)]);\n}","map":null,"metadata":{},"sourceType":"module"}