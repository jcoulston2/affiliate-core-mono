{"ast":null,"code":"import _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nvar __jsx = React.createElement;\nimport React, { useState } from 'react';\nimport Grid from '@material-ui/core/Grid';\nimport Copy from '@units/Copy';\nimport styled from 'styled-components';\nimport Typography from '@units/Typography';\nimport { Spacer } from '@styles/CommonStyledComponents';\nimport { hasValidTabbedData, mapCustomDataToTabs } from './helper';\nimport { toArray } from '@helpers/common';\nimport upperFirst from 'lodash/upperFirst';\nimport { useTheme } from '@hooks';\nimport startCase from 'lodash/startCase';\nconst DetailTab = styled((_ref) => {\n  let {\n    isActive,\n    textAlign,\n    markerColor,\n    children\n  } = _ref,\n      rest = _objectWithoutProperties(_ref, [\"isActive\", \"textAlign\", \"markerColor\", \"children\"]);\n\n  return __jsx(Grid, rest, children);\n}).withConfig({\n  displayName: \"ProductDescription__DetailTab\",\n  componentId: \"od93dl-0\"\n})([\"&&{cursor:pointer;opacity:0.5;margin-bottom:0.5em;text-align:\", \";&:hover{opacity:0.7;}\", \"}\"], props => props.textAlign, ({\n  isActive,\n  markerColor\n}) => isActive && `\n      opacity: 1;\n      h4 {\n        &::after {\n          content: ' ';\n          width: 38px;\n          height: 2px;\n          background: ${markerColor};\n          display: block;\n          position: relative;\n          top: 9px;\n        }        \n      }\n\n    `);\nconst CardList = styled.ul.withConfig({\n  displayName: \"ProductDescription__CardList\",\n  componentId: \"od93dl-1\"\n})([\"padding-left:0px;display:inline-block;ist-style-type:none;margin-top:5px;width:100%;li{display:flex;align-items:center;padding:2px 0px;justify-content:flex-start;}\"]);\n\nfunction ProductDescription({\n  productDescriptionTitleCopy,\n  productDeliveryTitleCopy,\n  commonLabel,\n  description,\n  delivery,\n  moreInfoCopy,\n  moreInfoText,\n  productLink,\n  genericProductDescriptionText,\n  genericProductDescriptionCopy,\n  customDescriptiveData,\n  brand\n}) {\n  const {\n    0: activeDescriptionTab,\n    1: setActiveDescriptionTab\n  } = useState(0);\n  const {\n    brandThemeColors\n  } = useTheme(); // We have two primary variants (delivery and description), there should always be a description\n  // tab but it is not always encouraged for the extractor to pull in bespoke description & delivery\n  // for a given product due to the different formating and cases of different brands but we include\n  // it anyway. There should always be some generic description shown from the CMS which encourages\n  // the user to navigate to the official store.\n\n  const tabsInfomration = [{\n    title: productDescriptionTitleCopy,\n    data: toArray(description),\n    isDefault: true\n  }, {\n    title: productDeliveryTitleCopy,\n    data: toArray(delivery)\n  }, // Custom non primary data will get rendered as a tab\n  ...mapCustomDataToTabs(customDescriptiveData) // we run a quick filter on valid variants to prevent rendering empty data\n  ].filter(({\n    data,\n    isDefault\n  }) => hasValidTabbedData(data, isDefault));\n  const hasMultipleTabs = tabsInfomration.length > 1; // Tab clickable headings\n\n  const getTabs = tabsInfomration.map(({\n    title\n  }, index) => __jsx(DetailTab, {\n    markerColor: brandThemeColors.primaryColor,\n    textAlign: hasMultipleTabs ? 'center' : 'left',\n    key: index,\n    item: true,\n    xs: true,\n    isActive: index === activeDescriptionTab,\n    onClick: () => setActiveDescriptionTab(index)\n  }, __jsx(Typography, {\n    tag: \"h4\",\n    typeStyles: commonLabel\n  }, __jsx(Copy, {\n    text: title\n  })))); // Tab inner content\n\n  const getTabsContent = tabsInfomration.map(({\n    data: descriptiveValues\n  }, index) => index === activeDescriptionTab && __jsx(CardList, {\n    key: index\n  }, descriptiveValues.map((descriptiveValue, index) => descriptiveValue && __jsx(\"li\", {\n    key: index\n  }, __jsx(Typography, {\n    tag: \"p\",\n    typeStyles: genericProductDescriptionCopy\n  }, __jsx(Copy, {\n    text: upperFirst(descriptiveValue)\n  })))))); // Cms copy\n\n  const getCmsContent = genericProductDescriptionText.map((cmsDescriptiveText, index) => __jsx(Grid, {\n    container: true,\n    xs: 12,\n    key: index\n  }, __jsx(Typography, {\n    tag: \"p\"\n  }, __jsx(Copy, {\n    text: cmsDescriptiveText,\n    replaceText: startCase(brand)\n  })), __jsx(Spacer, {\n    h: 5\n  })));\n  return __jsx(Grid, {\n    item: true,\n    container: true\n  }, getTabs, getTabsContent, getCmsContent, __jsx(Spacer, {\n    h: 5\n  }), __jsx(Typography, {\n    tag: \"p\",\n    typeStyles: moreInfoCopy\n  }, __jsx(\"a\", {\n    href: productLink,\n    title: moreInfoText,\n    target: \"_blank\",\n    rel: \"nofollow\"\n  }, __jsx(Copy, {\n    text: moreInfoText\n  }))));\n}\n\nexport default ProductDescription;","map":null,"metadata":{},"sourceType":"module"}