{"ast":null,"code":"import _asyncToGenerator from \"/Users/justincoulston/Desktop/affilaite-core-mono/node_modules/next/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _defineProperty from \"/Users/justincoulston/Desktop/affilaite-core-mono/node_modules/next/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport gql from 'graphql-tag';\nimport { PRODUCTS_API_END_POINT, PREDICTIVE_SEARCH_API_END_POINT } from '@constants';\nimport { productQuery, searchQuery } from '../../graphQL/graphqlQueries';\nimport proxy from '../proxy'; // NOTE: this utility is intended for pages making requests via any client side requests. We should never include the store\n// cache in this file as it will be included inside the JS bundle\n\nexport default {\n  getProductData: function getProductData(section, productType, productCountStart, productCountEnd, filters) {\n    var query = \"\".concat(productQuery);\n    return proxy().graphQl(PRODUCTS_API_END_POINT, query, _objectSpread({\n      section: section,\n      productType: productType,\n      productCountStart: productCountStart,\n      productCountEnd: productCountEnd\n    }, filters));\n  },\n  getSearchData: function getSearchData(searchValues, productCountStart, productCountEnd, filters) {\n    var query = \"\".concat(searchQuery);\n    return proxy().graphQl(PRODUCTS_API_END_POINT, query, _objectSpread(_objectSpread(_objectSpread({}, searchValues), filters), {}, {\n      productCountStart: productCountStart,\n      productCountEnd: productCountEnd\n    }));\n  },\n  getPredictiveSearch: function () {\n    var _getPredictiveSearch = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(keyTerm) {\n      var result;\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _context.next = 2;\n              return proxy().get(PREDICTIVE_SEARCH_API_END_POINT, \"?terms=\".concat(keyTerm), {\n                'content-type': 'application/x-www-form-urlencoded;charset=utf-8'\n              });\n\n            case 2:\n              result = _context.sent;\n              return _context.abrupt(\"return\", result.data);\n\n            case 4:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee);\n    }));\n\n    function getPredictiveSearch(_x) {\n      return _getPredictiveSearch.apply(this, arguments);\n    }\n\n    return getPredictiveSearch;\n  }()\n};","map":{"version":3,"sources":["/Users/justincoulston/Desktop/affilaite-core-mono/packages/app/apiUtil/requests/clientRequests.js"],"names":["gql","PRODUCTS_API_END_POINT","PREDICTIVE_SEARCH_API_END_POINT","productQuery","searchQuery","proxy","getProductData","section","productType","productCountStart","productCountEnd","filters","query","graphQl","getSearchData","searchValues","getPredictiveSearch","keyTerm","get","result","data"],"mappings":";;;;;;;;AACA,OAAOA,GAAP,MAAgB,aAAhB;AACA,SAASC,sBAAT,EAAiCC,+BAAjC,QAAwE,YAAxE;AACA,SAASC,YAAT,EAAuBC,WAAvB,QAA0C,8BAA1C;AAIA,OAAOC,KAAP,MAAkB,UAAlB,C,CAEA;AACA;;AACA,eAAe;AACbC,EAAAA,cAAc,EAAE,wBACdC,OADc,EAEdC,WAFc,EAGdC,iBAHc,EAIdC,eAJc,EAKdC,OALc,EAMe;AAC7B,QAAMC,KAAK,aAAMT,YAAN,CAAX;AACA,WAAOE,KAAK,GAAGQ,OAAR,CAAgBZ,sBAAhB,EAAwCW,KAAxC;AACLL,MAAAA,OAAO,EAAPA,OADK;AAELC,MAAAA,WAAW,EAAXA,WAFK;AAGLC,MAAAA,iBAAiB,EAAjBA,iBAHK;AAILC,MAAAA,eAAe,EAAfA;AAJK,OAKFC,OALE,EAAP;AAOD,GAhBY;AAkBbG,EAAAA,aAAa,EAAE,uBACbC,YADa,EAEbN,iBAFa,EAGbC,eAHa,EAIbC,OAJa,EAKgB;AAC7B,QAAMC,KAAK,aAAMR,WAAN,CAAX;AAEA,WAAOC,KAAK,GAAGQ,OAAR,CAAgBZ,sBAAhB,EAAwCW,KAAxC,gDACFG,YADE,GAEFJ,OAFE;AAGLF,MAAAA,iBAAiB,EAAjBA,iBAHK;AAILC,MAAAA,eAAe,EAAfA;AAJK,OAAP;AAMD,GAhCY;AAkCbM,EAAAA,mBAAmB;AAAA,wFAAE,iBAAOC,OAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qBACEZ,KAAK,GAAGa,GAAR,CAAYhB,+BAAZ,mBAAuDe,OAAvD,GAAkE;AACrF,gCAAgB;AADqE,eAAlE,CADF;;AAAA;AACbE,cAAAA,MADa;AAAA,+CAKZA,MAAM,CAACC,IALK;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAF;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAlCN,CAAf","sourcesContent":["//@flow\nimport gql from 'graphql-tag';\nimport { PRODUCTS_API_END_POINT, PREDICTIVE_SEARCH_API_END_POINT } from '@constants';\nimport { productQuery, searchQuery } from '../../graphQL/graphqlQueries';\nimport { type ProductApiQuery, type Search } from '@types/apiQueries';\nimport { type PredictiveSearch } from '@types/search';\nimport { type Filters } from '@types/product';\nimport proxy from '../proxy';\n\n// NOTE: this utility is intended for pages making requests via any client side requests. We should never include the store\n// cache in this file as it will be included inside the JS bundle\nexport default {\n  getProductData: (\n    section: string,\n    productType: string,\n    productCountStart: number,\n    productCountEnd: number,\n    filters?: Filters\n  ): Promise<ProductApiQuery> => {\n    const query = `${productQuery}`;\n    return proxy().graphQl(PRODUCTS_API_END_POINT, query, {\n      section,\n      productType,\n      productCountStart,\n      productCountEnd,\n      ...filters,\n    });\n  },\n\n  getSearchData: (\n    searchValues: $Exact<PredictiveSearch>,\n    productCountStart: number,\n    productCountEnd: number,\n    filters?: Filters\n  ): Promise<ProductApiQuery> => {\n    const query = `${searchQuery}`;\n\n    return proxy().graphQl(PRODUCTS_API_END_POINT, query, {\n      ...searchValues,\n      ...filters,\n      productCountStart,\n      productCountEnd,\n    });\n  },\n\n  getPredictiveSearch: async (keyTerm: string): Promise<Search> => {\n    const result = await proxy().get(PREDICTIVE_SEARCH_API_END_POINT, `?terms=${keyTerm}`, {\n      'content-type': 'application/x-www-form-urlencoded;charset=utf-8',\n    });\n\n    return result.data;\n  },\n};\n"]},"metadata":{},"sourceType":"module"}