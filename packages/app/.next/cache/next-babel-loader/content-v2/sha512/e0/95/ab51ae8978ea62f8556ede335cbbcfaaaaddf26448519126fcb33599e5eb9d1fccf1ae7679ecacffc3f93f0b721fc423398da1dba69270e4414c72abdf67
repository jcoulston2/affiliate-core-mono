{"ast":null,"code":"import _extends from \"/Users/justincoulston/Desktop/affilaite-core-mono/node_modules/next/node_modules/@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutProperties from \"/Users/justincoulston/Desktop/affilaite-core-mono/node_modules/next/node_modules/@babel/runtime/helpers/esm/objectWithoutProperties\";\nvar __jsx = React.createElement;\nimport React from 'react';\nimport Button from '@material-ui/core/Button';\nimport styled from 'styled-components';\nimport { useTheme } from '@hooks';\nimport Typography from '@units/Typography';\nimport Copy from '@units/Copy';\nvar StyledButton = styled(function (_ref) {\n  var color = _ref.color,\n      maxWidth = _ref.maxWidth,\n      bgColor = _ref.bgColor,\n      padding = _ref.padding,\n      borderRadius = _ref.borderRadius,\n      textTransform = _ref.textTransform,\n      disableHover = _ref.disableHover,\n      style = _ref.style,\n      children = _ref.children,\n      rest = _objectWithoutProperties(_ref, [\"color\", \"maxWidth\", \"bgColor\", \"padding\", \"borderRadius\", \"textTransform\", \"disableHover\", \"style\", \"children\"]);\n\n  return __jsx(Button, rest, children);\n}).withConfig({\n  displayName: \"Button__StyledButton\",\n  componentId: \"sc-1kxdv2n-0\"\n})([\"&&{max-width:\", \";background-color:\", \";padding:\", \";border-radius:\", \";text-transform:\", \";color:\", \";font-weight:\", \";&:hover{background-color:\", \";}p > span{white-space:nowrap;}}\"], function (_ref2) {\n  var maxWidth = _ref2.maxWidth;\n  return maxWidth ? \"\".concat(maxWidth) : 'auto';\n}, function (props) {\n  return props.bgColor;\n}, function (_ref3) {\n  var padding = _ref3.padding;\n  return Number.isInteger(padding) ? \"\".concat(padding, \"px\") : padding;\n}, function (props) {\n  return props.square ? '0px' : \"\".concat(props.borderRadius || 20, \"px\");\n}, function (props) {\n  return props.textTransform;\n}, function (props) {\n  return props.color;\n}, function (props) {\n  return props.defaultFontWeight;\n}, function (props) {\n  return !props.disableHover ? '#cecece' : 'initial';\n});\nexport default function BrandButton(_ref4) {\n  var propColor = _ref4.color,\n      propBgColor = _ref4.bgColor,\n      primary = _ref4.primary,\n      secondary = _ref4.secondary,\n      padding = _ref4.padding,\n      maxWidth = _ref4.maxWidth,\n      textTransform = _ref4.textTransform,\n      copy = _ref4.copy,\n      text = _ref4.text,\n      noPad = _ref4.noPad,\n      children = _ref4.children,\n      cmsEventMappings = _ref4.cmsEventMappings,\n      reference = _ref4.reference,\n      disableHover = _ref4.disableHover,\n      square = _ref4.square,\n      rest = _objectWithoutProperties(_ref4, [\"color\", \"bgColor\", \"primary\", \"secondary\", \"padding\", \"maxWidth\", \"textTransform\", \"copy\", \"text\", \"noPad\", \"children\", \"cmsEventMappings\", \"reference\", \"disableHover\", \"square\"]);\n\n  var _useTheme = useTheme(),\n      buttonTheme = _useTheme.buttonTheme;\n\n  var calculatedPadding = noPad ? 0 : padding || buttonTheme.defaultPadding;\n  var eventMap = reference && cmsEventMappings && cmsEventMappings[reference] || {};\n  var color, bgColor;\n\n  if (primary) {\n    bgColor = buttonTheme.primaryColor;\n    color = buttonTheme.primaryTextColor;\n  } else if (secondary) {\n    bgColor = buttonTheme.secondaryColor;\n    color = buttonTheme.secondaryTextColor;\n  } else {\n    color = propColor;\n    bgColor = propBgColor;\n  }\n\n  return __jsx(StyledButton, _extends({\n    color: color,\n    bgColor: bgColor,\n    maxWidth: maxWidth,\n    borderRadius: buttonTheme.borderRadius,\n    padding: calculatedPadding,\n    textTransform: textTransform,\n    defaultFontWeight: buttonTheme.defaultFontWeight,\n    disableHover: disableHover,\n    square: square\n  }, rest, eventMap), copy && __jsx(Typography, {\n    tag: \"p\",\n    typeStyles: copy\n  }, text && __jsx(Copy, {\n    text: text\n  })) || children);\n}","map":null,"metadata":{},"sourceType":"module"}