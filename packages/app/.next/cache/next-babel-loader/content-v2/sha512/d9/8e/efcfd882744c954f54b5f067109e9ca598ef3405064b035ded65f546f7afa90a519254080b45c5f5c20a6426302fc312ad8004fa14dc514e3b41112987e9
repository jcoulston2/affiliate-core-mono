{"ast":null,"code":"var __jsx = React.createElement;\nimport React, { useState, useEffect } from 'react';\nimport Grid from '@material-ui/core/Grid';\nimport Collapse from '@material-ui/core/Collapse';\nimport Link from 'next/link';\nimport { DESKTOP_NAV_BAR_REF } from '@constants';\nimport chunk from 'lodash/chunk';\nimport Typography from '@units/Typography';\nimport Button from '@units/Button';\nimport Card from '@units/Card';\nimport usePwa from '@containers/Pwa/hook';\nimport ChevronRightIcon from '@material-ui/icons/ChevronRight';\nimport { useThemeColor, useCms } from '@hooks';\nimport { LabelContent, StyledMenu, NavLinksContainer, CollapseContainer, MenuItemTitle, NavLink, NavLinkChunk, FirstLevelNavTitle, NavButtons, ThirdLevelNavContainer } from './styles';\nimport { PLP_PATH } from '@constants';\nimport { isServer, getNode } from '@helpers/common';\nexport default function SubNavContainers({\n  title,\n  subNav,\n  desktopLinksPerColumn,\n  desktopNavLink,\n  desktopNavLabel,\n  quickFinderCopy,\n  setQuickFinderOpen,\n  resetProductFeeds\n}) {\n  const {\n    0: subLevelNavItemExpanded,\n    1: setSubLevelNavItemExpanded\n  } = useState([]);\n  const {\n    0: navBarHeight,\n    1: setNavBarHeight\n  } = useState(100);\n  const primaryColor = useThemeColor('primary');\n  const {\n    isPwaInitiated,\n    initPwaPrompt\n  } = usePwa();\n  const {\n    pwa: pwaCms\n  } = useCms('other');\n  useEffect(() => {\n    if (!isServer()) {\n      var _getNode;\n\n      setNavBarHeight(((_getNode = getNode(DESKTOP_NAV_BAR_REF)) === null || _getNode === void 0 ? void 0 : _getNode.clientHeight) || 0);\n    }\n  });\n\n  const handleSubLevelnavItemClick = index => () => {\n    if (!subLevelNavItemExpanded.length) {\n      return setSubLevelNavItemExpanded([index]);\n    } // If a subnav is already expanded, remove it's index i.e. collapse it\n\n\n    if (subLevelNavItemExpanded.includes(index)) {\n      setSubLevelNavItemExpanded(subLevelNavItemExpanded.filter(expandedSubnavIndex => index !== expandedSubnavIndex));\n    } else {\n      setSubLevelNavItemExpanded([...subLevelNavItemExpanded, index]);\n    }\n  };\n\n  const handleLinkItemClick = () => {\n    resetProductFeeds();\n  }; // Third level - Navigation links (split into columns)\n\n\n  const renderThirdLevelNav = subNavItems => {\n    const split = subNavItems.length / desktopLinksPerColumn;\n    const chunks = subNavItems.length / split;\n    const subNavItemsChunks = chunk(subNavItems, chunks);\n    return subNavItemsChunks.map((NavChunk, index) => {\n      const fullCol = NavChunk.length > 4;\n      return __jsx(NavLinkChunk, {\n        item: true,\n        xs: true,\n        container: fullCol,\n        key: `NavLinkChunk-${index}`\n      }, NavChunk.map(({\n        title,\n        link\n      }, index) => __jsx(NavLink, {\n        item: true,\n        xs: 12,\n        key: `NavLink-${index}`,\n        onClick: handleLinkItemClick\n      }, __jsx(Link, {\n        href: `/${PLP_PATH}/[...slug]`,\n        as: `/${PLP_PATH}${link}`\n      }, __jsx(\"a\", null, __jsx(Typography, {\n        tag: \"p\",\n        typeStyles: desktopNavLink,\n        fullwidth: true\n      }, title))))));\n    });\n  }; // Second level - Wrapper around label and nav links\n\n\n  const renderSecondLevelNav = subNav => subNav.map(({\n    title,\n    subNavItems\n  }, index) => __jsx(Grid, {\n    container: true,\n    item: true,\n    xs: true,\n    key: `grid${index}`\n  }, __jsx(LabelContent, {\n    item: true,\n    xs: true,\n    id: \"menu-list-Collapse\",\n    seperator: true\n  }, __jsx(MenuItemTitle, {\n    onClick: handleSubLevelnavItemClick(index)\n  }, __jsx(Typography, {\n    tag: \"h4\",\n    typeStyles: desktopNavLabel\n  }, title)), __jsx(Collapse, {\n    in: true\n  }, __jsx(ThirdLevelNavContainer, {\n    container: true,\n    borderColor: primaryColor\n  }, renderThirdLevelNav(subNavItems)))))); // First level (e.g. top level: Mens, Womens)\n\n\n  const renderFirstLevelNav = () => __jsx(StyledMenu, {\n    \"aria-controls\": \"menu-list-Collapse\",\n    \"aria-haspopup\": \"true\"\n  }, __jsx(FirstLevelNavTitle, null, title));\n\n  return __jsx(NavLinksContainer, {\n    container: true,\n    item: true,\n    xs: 12,\n    sm: true,\n    hoverEffectColor: primaryColor\n  }, renderFirstLevelNav(), __jsx(Collapse, {\n    in: true\n  }, __jsx(CollapseContainer, {\n    height: navBarHeight,\n    container: true\n  }, renderSecondLevelNav(subNav), __jsx(Grid, {\n    container: true,\n    item: true,\n    xs: 3,\n    lg: 4\n  }, __jsx(LabelContent, {\n    item: true,\n    xs: true,\n    id: \"menu-list-Collapse\",\n    container: true,\n    alignItems: \"center\"\n  }, __jsx(NavButtons, {\n    container: true,\n    alignItems: \"center\"\n  }, __jsx(Button, {\n    fullWidth: true,\n    padding: \"0px\",\n    disableHover: true,\n    textTransform: \"initial\",\n    onClick: () => setQuickFinderOpen(true)\n  }, __jsx(Card, {\n    fullWidth: true\n  }, __jsx(Grid, {\n    container: true,\n    alignItems: \"center\",\n    justify: \"space-between\"\n  }, __jsx(Typography, {\n    tag: \"h4\",\n    weight: 300\n  }, quickFinderCopy), __jsx(ChevronRightIcon, null)))), isPwaInitiated && __jsx(Button, {\n    primary: true,\n    textTransform: \"initial\",\n    onClick: () => initPwaPrompt()\n  }, __jsx(Grid, {\n    container: true,\n    alignItems: \"center\",\n    justify: \"space-between\"\n  }, pwaCms.pwaDownloadableBannerText))))))));\n}","map":null,"metadata":{},"sourceType":"module"}