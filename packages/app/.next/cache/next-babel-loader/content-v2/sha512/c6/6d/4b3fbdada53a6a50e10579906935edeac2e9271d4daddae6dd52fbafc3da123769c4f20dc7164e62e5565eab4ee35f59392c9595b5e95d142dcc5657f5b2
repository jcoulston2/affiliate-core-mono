{"ast":null,"code":"import { urlCaseMatches } from '@helpers/common';\nimport { getSingle } from '@helpers/common';\nexport function getSection(affiliateData, section) {\n  var _affiliateData$find;\n\n  return (affiliateData === null || affiliateData === void 0 ? void 0 : (_affiliateData$find = affiliateData.find(category => urlCaseMatches(category.section, section))) === null || _affiliateData$find === void 0 ? void 0 : _affiliateData$find.data) || [];\n}\nexport function getCategory(affiliateData, section, category) {\n  const sec = getSection(affiliateData, section);\n\n  if (Array.isArray(category)) {\n    let catDataArray = [];\n\n    for (const categoryFilter of category) {\n      var _sec$find;\n\n      const categoryFilterData = (sec === null || sec === void 0 ? void 0 : (_sec$find = sec.find(item => urlCaseMatches(item.category, categoryFilter))) === null || _sec$find === void 0 ? void 0 : _sec$find.data) || [];\n      catDataArray = [...catDataArray, ...categoryFilterData];\n    }\n\n    return catDataArray;\n  } else {\n    var _sec$find2;\n\n    return (sec === null || sec === void 0 ? void 0 : (_sec$find2 = sec.find(item => urlCaseMatches(item.category, category))) === null || _sec$find2 === void 0 ? void 0 : _sec$find2.data) || [];\n  }\n}\nexport function getCategoryLastUpdated(affiliateData, section, category) {\n  const sec = getSection(affiliateData, section);\n  const data = sec === null || sec === void 0 ? void 0 : sec.find(item => urlCaseMatches(item.category, getSingle(category)));\n  return data === null || data === void 0 ? void 0 : data.categoryLastUpdated;\n}\nexport function eachCategoryCb(affiliateData, section, cb) {\n  const sec = getSection(affiliateData, section);\n\n  for (const cat of sec) {\n    cb(cat);\n  }\n}\nexport function traverseProductsByCategory(affiliateData, section, category, callback) {\n  const cat = getCategory(affiliateData, section, category);\n\n  for (const product of cat) {\n    callback(product);\n  }\n}\nexport function traverseProductsBySection(affiliateData, section, callback) {\n  const sec = getSection(affiliateData, section);\n  const {\n    level,\n    cb\n  } = callback;\n\n  for (const cat of sec) {\n    if (level === 'category') cb(cat);\n\n    for (const product of cat.data) {\n      if (level === 'product') cb(product);\n    }\n  }\n}\nexport function traverseAllProducts(affiliateData, callback) {\n  const {\n    level,\n    cb\n  } = callback;\n\n  for (const sec of affiliateData) {\n    if (level === 'section') cb(sec);\n\n    for (const cat of sec.data) {\n      if (level === 'category') cb(cat);\n\n      for (const product of cat.data) {\n        if (level === 'product') cb(product);\n      }\n    }\n  }\n}\nexport function simpleSearchMatcher(tags, keyTerm) {\n  if (!(tags !== null && tags !== void 0 && tags.length)) return false;\n  const tagsRx = new RegExp(`\\\\b(${tags.join('|')})\\\\b`, 'gi');\n  const keyTermMatch = keyTerm.match(tagsRx);\n  const leastMatchesToQualifySearch = 2;\n  return !!(keyTermMatch && (keyTermMatch === null || keyTermMatch === void 0 ? void 0 : keyTermMatch.length) >= leastMatchesToQualifySearch);\n}","map":null,"metadata":{},"sourceType":"module"}