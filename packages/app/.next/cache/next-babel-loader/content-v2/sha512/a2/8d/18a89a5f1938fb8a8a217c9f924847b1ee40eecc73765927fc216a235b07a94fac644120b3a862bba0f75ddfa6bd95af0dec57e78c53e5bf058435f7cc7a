{"ast":null,"code":"import axios from 'axios';\nexport default function proxy() {\n  const get = (endPoint, query, headers = {}) => {\n    return axios.get(`${endPoint}${query}`, headers);\n  };\n\n  const post = (endPoint, body, headers = {}) => {\n    return axios.post(endPoint, body, headers);\n  };\n\n  const graphQl = async (endPoint, queryString, variables) => {\n    const {\n      data: responseQuery\n    } = await axios.post(endPoint, {\n      query: queryString,\n      variables\n    });\n    return responseQuery.data;\n  };\n\n  return {\n    get,\n    post,\n    graphQl\n  };\n}","map":{"version":3,"sources":["/Users/justincoulston/Desktop/affilaite-core-mono/packages/affiliate-app/apiUtil/proxy.js"],"names":["axios","proxy","get","endPoint","query","headers","post","body","graphQl","queryString","variables","data","responseQuery"],"mappings":"AACA,OAAOA,KAAP,MAAkB,OAAlB;AAQA,eAAe,SAASC,KAAT,GAA+B;AAC5C,QAAMC,GAAG,GAAG,CAACC,QAAD,EAAmBC,KAAnB,EAAkCC,OAAgB,GAAG,EAArD,KAA0E;AACpF,WAAOL,KAAK,CAACE,GAAN,CAAW,GAAEC,QAAS,GAAEC,KAAM,EAA9B,EAAiCC,OAAjC,CAAP;AACD,GAFD;;AAIA,QAAMC,IAAI,GAAG,CAACH,QAAD,EAAmBI,IAAnB,EAAiCF,OAAgB,GAAG,EAApD,KAAyE;AACpF,WAAOL,KAAK,CAACM,IAAN,CAAWH,QAAX,EAAqBI,IAArB,EAA2BF,OAA3B,CAAP;AACD,GAFD;;AAIA,QAAMG,OAAO,GAAG,OACdL,QADc,EAEdM,WAFc,EAGdC,SAHc,KAIG;AACjB,UAAM;AAAEC,MAAAA,IAAI,EAAEC;AAAR,QAA0B,MAAMZ,KAAK,CAACM,IAAN,CAAWH,QAAX,EAAqB;AAAEC,MAAAA,KAAK,EAAEK,WAAT;AAAsBC,MAAAA;AAAtB,KAArB,CAAtC;AACA,WAAOE,aAAa,CAACD,IAArB;AACD,GAPD;;AASA,SAAO;AACLT,IAAAA,GADK;AAELI,IAAAA,IAFK;AAGLE,IAAAA;AAHK,GAAP;AAKD","sourcesContent":["//@flow\nimport axios from 'axios';\n\ntype ProxyMethods = {\n  get: Function,\n  post: Function,\n  graphQl: Function,\n};\n\nexport default function proxy(): ProxyMethods {\n  const get = (endPoint: string, query: string, headers?: Object = {}): Promise<any> => {\n    return axios.get(`${endPoint}${query}`, headers);\n  };\n\n  const post = (endPoint: string, body: Object, headers?: Object = {}): Promise<any> => {\n    return axios.post(endPoint, body, headers);\n  };\n\n  const graphQl = async (\n    endPoint: string,\n    queryString: Object,\n    variables?: Object\n  ): Promise<any> => {\n    const { data: responseQuery } = await axios.post(endPoint, { query: queryString, variables });\n    return responseQuery.data;\n  };\n\n  return {\n    get,\n    post,\n    graphQl,\n  };\n}\n"]},"metadata":{},"sourceType":"module"}