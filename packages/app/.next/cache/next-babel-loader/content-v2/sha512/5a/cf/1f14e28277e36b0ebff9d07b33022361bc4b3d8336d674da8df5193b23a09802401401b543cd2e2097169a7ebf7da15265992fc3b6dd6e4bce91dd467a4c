{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/extends\";\nimport _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nvar __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\n/* eslint-disable no-use-before-define */\nimport React, { useState, useRef } from 'react';\nimport TextField from '@material-ui/core/TextField';\nimport SearchIcon from '@material-ui/icons/Search';\nimport Grid from '@material-ui/core/Grid';\nimport { Flex, Actionable } from '@styles/CommonStyledComponents';\nimport ClearIcon from '@material-ui/icons/Clear';\nimport clientRequests from '../../../apiUtil/requests/clientRequests';\nimport { getPredictiveTermsList, getTermString } from './helper';\nimport { SEARCH_PATH } from '@constants';\nimport kebabCase from 'lodash/kebabCase';\nimport debounce from 'lodash/debounce';\nimport Drawer from '@units/Drawer';\nimport { useRouter } from 'next/router';\nimport { urlCase, delayedCallback, betterThrottle, createEvent } from '@helpers/common';\nimport { useTheme, useCms } from '@hooks';\nimport Loader from '@units/Loader';\nimport SearchInputWrapper from './SearchInputWrapper';\nimport { ClearIconContainer, ToogledSearchContainer, SearchContainer, SearchInput, SearchAutoCompleteBoxStyle, SuggestedText, DekstopSearchAction, LoaderContainer } from './style';\nexport default function Search({\n  isToggleSearch,\n  onSubmitCallback\n}) {\n  const {\n    textTheme\n  } = useTheme();\n  const {\n    0: searchToggled,\n    1: setSearchToggled\n  } = useState(false);\n  const {\n    0: options,\n    1: setOptions\n  } = useState([]);\n  const {\n    0: inputValue,\n    1: setInputValue\n  } = useState([]);\n  const {\n    0: predictiveLoading,\n    1: setPredictiveLoading\n  } = useState(false);\n  const inputRef = React.useRef();\n  const router = useRouter();\n  const {\n    search: searchCms\n  } = useCms('header');\n  const {\n    searchIconColor,\n    searchBarColor\n  } = searchCms;\n  let apiThrottleTimeout;\n  let smoothLoaderControler;\n\n  const handleSetToggled = () => setSearchToggled(!searchToggled);\n\n  const setPredictiveSearch = async value => {\n    const result = await clientRequests.getPredictiveSearch(value);\n    setPredictiveLoading(false);\n    const predivtiveTerms = getPredictiveTermsList(result, value);\n    setOptions([{\n      keyTerm: `\"${value}\"`\n    }, ...predivtiveTerms]);\n  };\n\n  const handlePredictiveSearch = async ({\n    target: {\n      value\n    }\n  }) => {\n    const valueCase = value.toLowerCase();\n    setInputValue(valueCase);\n    if (apiThrottleTimeout) clearTimeout(apiThrottleTimeout);\n    apiThrottleTimeout = setTimeout(() => {\n      // throttle reduces 'glitchy' loader animations caused by quick typing\n      betterThrottle(() => setPredictiveLoading(!!value));\n\n      if (value.length > 2) {\n        setPredictiveSearch(valueCase);\n      }\n    }, 500);\n  };\n\n  const goToSearch = page => {\n    if (onSubmitCallback) onSubmitCallback();\n    setSearchToggled(false);\n    router.push(page);\n  };\n\n  const handleAutoCompleteClick = option => {\n    const searchParams = Object.keys(option).reduce((acc, cur) => {\n      var _option$cur;\n\n      return `${acc}${kebabCase(cur)}=${urlCase((_option$cur = option[cur]) === null || _option$cur === void 0 ? void 0 : _option$cur.replace(/\\\"/g, ''))}&`;\n    }, `/${SEARCH_PATH}?`).slice(0, -1);\n    handleSetToggled();\n    goToSearch(searchParams);\n  };\n\n  const initLooseSearch = () => {\n    if (inputValue && inputValue.length > 2) {\n      goToSearch(`/${SEARCH_PATH}?key-term=${urlCase(inputValue)}`);\n      handleSetToggled();\n    }\n  };\n\n  const handleKeyDownSearch = () => ({\n    keyCode\n  }) => {\n    if (keyCode === 13) initLooseSearch();\n  };\n\n  const renderNoToggleSearch = __jsx(SearchInputWrapper, {\n    searchToggled,\n    initLooseSearch,\n    searchIconColor,\n    searchBarColor\n  }, __jsx(SearchInput, {\n    freeSolo: true,\n    ignoreCase: true,\n    disableClearable: true,\n    getOptionLabel: option => getTermString(option),\n    renderOption: option => __jsx(SuggestedText, {\n      onClick: () => handleAutoCompleteClick(option)\n    }, getTermString(option)),\n    options: options,\n    renderInput: params => __jsx(TextField, _extends({}, params, {\n      onChange: handlePredictiveSearch,\n      label: \"\",\n      autoFocus: searchToggled,\n      variant: \"outlined\",\n      margin: \"normal\",\n      inputRef: inputRef,\n      InputProps: _objectSpread(_objectSpread({}, params.InputProps), {}, {\n        type: 'search'\n      }),\n      onBlur: () => createEvent(inputRef.current, 'mousedown', 50),\n      onKeyDown: handleKeyDownSearch()\n    }))\n  }));\n\n  return __jsx(React.Fragment, null, __jsx(Drawer, {\n    open: searchToggled,\n    anchor: \"left\",\n    width: 70,\n    onClose: () => setPredictiveLoading(false)\n  }, __jsx(\"div\", null, __jsx(SearchAutoCompleteBoxStyle, {\n    theme: textTheme\n  }), __jsx(ToogledSearchContainer, null, __jsx(ClearIconContainer, null, __jsx(Actionable, {\n    \"aria-label\": \"search\"\n  }, __jsx(ClearIcon, {\n    fontSize: \"large\",\n    onClick: handleSetToggled\n  }))), renderNoToggleSearch, __jsx(LoaderContainer, null, __jsx(Loader, {\n    active: predictiveLoading\n  }))))), isToggleSearch ? __jsx(SearchIcon, {\n    color: searchIconColor,\n    fontSize: \"large\",\n    onClick: handleSetToggled\n  }) : __jsx(SearchInputWrapper, {\n    searchToggled,\n    handleSetToggled,\n    initLooseSearch,\n    searchIconColor,\n    searchBarColor\n  }, __jsx(DekstopSearchAction, {\n    fullWidth: true,\n    variant: \"outlined\"\n  })));\n}","map":null,"metadata":{},"sourceType":"module"}