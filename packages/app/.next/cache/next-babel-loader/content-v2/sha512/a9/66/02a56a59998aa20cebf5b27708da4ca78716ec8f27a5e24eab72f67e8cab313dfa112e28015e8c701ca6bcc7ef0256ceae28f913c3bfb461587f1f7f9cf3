{"ast":null,"code":"import _toConsumableArray from \"/Users/justincoulston/Desktop/affilaite-core-mono/node_modules/next/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\nvar __jsx = React.createElement;\nimport * as React from 'react';\nimport Chip from '@units/Chip';\nimport Grid from '@material-ui/core/Grid';\nimport { useTheme } from '@hooks';\nimport { Highlight } from '@styles/CommonStyledComponents';\nimport { FilterChipWrapper } from './styles';\nimport { urlReverseCase } from '@helpers/common';\nexport default function FilterChips(_ref) {\n  var priceSort = _ref.priceSort,\n      priceThresholdLow = _ref.priceThresholdLow,\n      priceThresholdHigh = _ref.priceThresholdHigh,\n      saleThreshold = _ref.saleThreshold,\n      setPriceSort = _ref.setPriceSort,\n      setPriceThreshold = _ref.setPriceThreshold,\n      setKeyWords = _ref.setKeyWords,\n      setSection = _ref.setSection,\n      setBrands = _ref.setBrands,\n      setSaleThreshold = _ref.setSaleThreshold,\n      setCategory = _ref.setCategory,\n      triggerFilterRefresh = _ref.triggerFilterRefresh,\n      scaler = _ref.scaler,\n      keyWords = _ref.keyWords,\n      brands = _ref.brands,\n      category = _ref.category,\n      section = _ref.section;\n\n  var _useTheme = useTheme(),\n      brandThemeColors = _useTheme.brandThemeColors;\n\n  var renderCommonChip = function renderCommonChip(label, _onDelete, index) {\n    return __jsx(Chip, {\n      label: label,\n      size: 'small',\n      bgColor: brandThemeColors.commonWhite,\n      key: index,\n      color: \"primary\",\n      useShadow: true,\n      spacing: 20,\n      onDelete: function onDelete() {\n        _onDelete();\n\n        triggerFilterRefresh(true);\n      }\n    });\n  };\n\n  var getChipTitle = function getChipTitle(title, value) {\n    return __jsx(React.Fragment, null, __jsx(Highlight, {\n      weight: 500\n    }, title, \": \"), urlReverseCase(value));\n  };\n\n  var createChipArrayValues = function createChipArrayValues(arrayValues, label, setter) {\n    return (arrayValues === null || arrayValues === void 0 ? void 0 : arrayValues.map(function (arrayValue) {\n      return {\n        name: arrayValue,\n        label: arrayValue && getChipTitle(label, arrayValue),\n        onDelete: function onDelete() {\n          return setter(function () {\n            return arrayValues.filter(function (k) {\n              return k !== arrayValue;\n            });\n          });\n        },\n        defaultVisibility: true\n      };\n    })) || [];\n  };\n\n  var chipValues = [{\n    name: 'priceSort',\n    label: priceSort && getChipTitle('Price Sort', priceSort),\n    onDelete: function onDelete() {\n      return setPriceSort(null);\n    },\n    defaultVisibility: true\n  }, {\n    name: priceThresholdLow,\n    label: priceThresholdLow && getChipTitle('Price threshold low', priceThresholdLow),\n    onDelete: function onDelete() {\n      return setPriceThreshold([0, parseInt(priceThresholdHigh) / scaler || 100]);\n    },\n    defaultVisibility: true\n  }, {\n    name: priceThresholdHigh,\n    label: priceThresholdHigh && getChipTitle('Price threshold High', priceThresholdHigh),\n    onDelete: function onDelete() {\n      return setPriceThreshold([parseInt(priceThresholdLow) / scaler || 0, 100]);\n    },\n    defaultVisibility: parseInt(priceThresholdHigh) / scaler !== 100\n  }, {\n    name: saleThreshold,\n    label: saleThreshold && getChipTitle('Sale', saleThreshold > 1 ? \"\".concat(saleThreshold, \"% and more\") : 'All sale'),\n    onDelete: function onDelete() {\n      return setSaleThreshold(null);\n    },\n    defaultVisibility: true\n  }, {\n    name: section,\n    label: section && getChipTitle('Section', section || 'all'),\n    onDelete: function onDelete() {\n      return setSection(null);\n    },\n    defaultVisibility: true\n  }].concat(_toConsumableArray(createChipArrayValues(keyWords, 'KeyWord', setKeyWords)), _toConsumableArray(createChipArrayValues(brands, 'Brand', setBrands)), _toConsumableArray(createChipArrayValues(category, 'Category', setCategory)));\n  return __jsx(FilterChipWrapper, {\n    container: true\n  }, chipValues.map(function (_ref2, index) {\n    var name = _ref2.name,\n        label = _ref2.label,\n        onDelete = _ref2.onDelete,\n        defaultVisibility = _ref2.defaultVisibility;\n    return !!(defaultVisibility && label) && renderCommonChip(label, onDelete, index);\n  }));\n}","map":null,"metadata":{},"sourceType":"module"}