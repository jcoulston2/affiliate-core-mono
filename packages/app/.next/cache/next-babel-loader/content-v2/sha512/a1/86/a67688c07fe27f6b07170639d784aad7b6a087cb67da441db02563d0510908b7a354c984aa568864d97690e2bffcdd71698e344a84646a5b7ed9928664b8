{"ast":null,"code":"var __jsx = React.createElement;\nimport React, { useEffect, useState } from 'react';\nimport { actions } from './root-actions';\nimport { wrapper } from './store';\nimport { useDispatch } from 'react-redux';\nimport SiteThemeProvider from '@styles/SiteThemeProvider';\nimport { CmsProvider } from '../app/CmsContext';\nimport { IS_DEV } from '@constants';\nimport { injectLocalCms } from '@helpers/cms';\nimport { useSelector } from 'react-redux';\n\nfunction Root({\n  Component,\n  pageProps\n}) {\n  const dispatch = useDispatch();\n  const {\n    cms\n  } = useSelector(store => {\n    var _store$buildTimeState;\n\n    return ((_store$buildTimeState = store.buildTimeState) === null || _store$buildTimeState === void 0 ? void 0 : _store$buildTimeState.cmsData) || {\n      cms: {}\n    };\n  });\n  const {\n    0: appCms,\n    1: setAppCms\n  } = useState(cms);\n\n  const setLocalCms = async () => {\n    const localCms = await injectLocalCms();\n    setAppCms(localCms);\n  };\n\n  const handleClientWidthOnResize = () => {\n    let timedFn;\n\n    const initResize = () => {\n      timedFn = setTimeout(() => {\n        var _document, _document$body;\n\n        const clientWidth = (_document = document) === null || _document === void 0 ? void 0 : (_document$body = _document.body) === null || _document$body === void 0 ? void 0 : _document$body.clientWidth;\n\n        if (clientWidth) {\n          dispatch(actions.setClientWidth(clientWidth));\n        }\n      }, 200);\n    };\n\n    window.addEventListener('resize', () => {\n      clearTimeout(timedFn);\n      initResize();\n    });\n    initResize();\n  };\n\n  useEffect(() => {\n    handleClientWidthOnResize();\n\n    if (IS_DEV) {\n      setLocalCms();\n    }\n  }, []);\n  return __jsx(CmsProvider, {\n    cms: appCms\n  }, __jsx(SiteThemeProvider, null, __jsx(Component, pageProps)));\n}\n\nexport default wrapper.withRedux(Root);","map":null,"metadata":{},"sourceType":"module"}