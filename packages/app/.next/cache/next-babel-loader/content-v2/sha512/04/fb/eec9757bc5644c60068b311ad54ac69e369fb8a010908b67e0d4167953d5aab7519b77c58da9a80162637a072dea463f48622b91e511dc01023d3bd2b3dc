{"ast":null,"code":"import _extends from \"/Users/justincoulston/Desktop/affilaite-core-mono/node_modules/next/node_modules/@babel/runtime/helpers/esm/extends\";\nimport _defineProperty from \"/Users/justincoulston/Desktop/affilaite-core-mono/node_modules/next/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nimport _toConsumableArray from \"/Users/justincoulston/Desktop/affilaite-core-mono/node_modules/next/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\nimport _asyncToGenerator from \"/Users/justincoulston/Desktop/affilaite-core-mono/node_modules/next/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\n\nvar _jsxFileName = \"/Users/justincoulston/Desktop/affilaite-core-mono/packages/app/components/modules/Search/Search.js\",\n    _s = $RefreshSig$();\n\nvar __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\n\n/* eslint-disable no-use-before-define */\nimport React, { useState, useRef } from 'react';\nimport TextField from '@material-ui/core/TextField';\nimport SearchIcon from '@material-ui/icons/Search';\nimport Grid from '@material-ui/core/Grid';\nimport { Flex, Actionable } from '@styles/CommonStyledComponents';\nimport ClearIcon from '@material-ui/icons/Clear';\nimport clientRequests from '../../../apiUtil/requests/clientRequests';\nimport { getPredictiveTermsList, getTermString } from './helper';\nimport { SEARCH_PATH } from '@constants';\nimport kebabCase from 'lodash/kebabCase';\nimport debounce from 'lodash/debounce';\nimport Drawer from '@units/Drawer';\nimport { useRouter } from 'next/router';\nimport { urlCase, delayedCallback, betterThrottle, createEvent } from '@helpers/common';\nimport { useTheme, useCms } from '@hooks';\nimport Loader from '@units/Loader';\nimport SearchInputWrapper from './SearchInputWrapper';\nimport { ClearIconContainer, ToogledSearchContainer, SearchContainer, SearchInput, SearchAutoCompleteBoxStyle, SuggestedText, DekstopSearchAction, LoaderContainer } from './style';\nexport default function Search(_ref) {\n  _s();\n\n  var _this = this;\n\n  var isToggleSearch = _ref.isToggleSearch,\n      onSubmitCallback = _ref.onSubmitCallback;\n\n  var _useTheme = useTheme(),\n      textTheme = _useTheme.textTheme;\n\n  var _useState = useState(false),\n      searchToggled = _useState[0],\n      setSearchToggled = _useState[1];\n\n  var _useState2 = useState([]),\n      options = _useState2[0],\n      setOptions = _useState2[1];\n\n  var _useState3 = useState([]),\n      inputValue = _useState3[0],\n      setInputValue = _useState3[1];\n\n  var _useState4 = useState(false),\n      predictiveLoading = _useState4[0],\n      setPredictiveLoading = _useState4[1];\n\n  var inputRef = React.useRef();\n  var router = useRouter();\n\n  var _useCms = useCms('header'),\n      searchCms = _useCms.search;\n\n  var searchIconColor = searchCms.searchIconColor,\n      searchBarColor = searchCms.searchBarColor;\n  var apiThrottleTimeout;\n  var smoothLoaderControler;\n\n  var handleSetToggled = function handleSetToggled() {\n    return setSearchToggled(!searchToggled);\n  };\n\n  var setPredictiveSearch = /*#__PURE__*/function () {\n    var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(value) {\n      var result, predivtiveTerms;\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _context.next = 2;\n              return clientRequests.getPredictiveSearch(value);\n\n            case 2:\n              result = _context.sent;\n              setPredictiveLoading(false);\n              predivtiveTerms = getPredictiveTermsList(result, value);\n              setOptions([{\n                keyTerm: \"\\\"\".concat(value, \"\\\"\")\n              }].concat(_toConsumableArray(predivtiveTerms)));\n\n            case 6:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee);\n    }));\n\n    return function setPredictiveSearch(_x) {\n      return _ref2.apply(this, arguments);\n    };\n  }();\n\n  var handlePredictiveSearch = /*#__PURE__*/function () {\n    var _ref4 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(_ref3) {\n      var value, valueCase;\n      return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              value = _ref3.target.value;\n              valueCase = value.toLowerCase();\n              setInputValue(valueCase);\n              if (apiThrottleTimeout) clearTimeout(apiThrottleTimeout);\n              apiThrottleTimeout = setTimeout(function () {\n                // throttle reduces 'glitchy' loader animations caused by quick typing\n                betterThrottle(function () {\n                  return setPredictiveLoading(!!value);\n                });\n\n                if (value.length > 2) {\n                  setPredictiveSearch(valueCase);\n                }\n              }, 500);\n\n            case 5:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      }, _callee2);\n    }));\n\n    return function handlePredictiveSearch(_x2) {\n      return _ref4.apply(this, arguments);\n    };\n  }();\n\n  var goToSearch = function goToSearch(page) {\n    if (onSubmitCallback) onSubmitCallback();\n    setSearchToggled(false);\n    router.push(page);\n  };\n\n  var handleAutoCompleteClick = function handleAutoCompleteClick(option) {\n    var searchParams = Object.keys(option).reduce(function (acc, cur) {\n      var _option$cur;\n\n      return \"\".concat(acc).concat(kebabCase(cur), \"=\").concat(urlCase((_option$cur = option[cur]) === null || _option$cur === void 0 ? void 0 : _option$cur.replace(/\\\"/g, '')), \"&\");\n    }, \"/\".concat(SEARCH_PATH, \"?\")).slice(0, -1);\n    handleSetToggled();\n    goToSearch(searchParams);\n  };\n\n  var initLooseSearch = function initLooseSearch() {\n    if (inputValue && inputValue.length > 2) {\n      goToSearch(\"/\".concat(SEARCH_PATH, \"?key-term=\").concat(urlCase(inputValue)));\n      handleSetToggled();\n    }\n  };\n\n  var handleKeyDownSearch = function handleKeyDownSearch() {\n    return function (_ref5) {\n      var keyCode = _ref5.keyCode;\n      if (keyCode === 13) initLooseSearch();\n    };\n  };\n\n  var renderNoToggleSearch = __jsx(SearchInputWrapper, _extends({\n    searchToggled: searchToggled,\n    initLooseSearch: initLooseSearch,\n    searchIconColor: searchIconColor,\n    searchBarColor: searchBarColor\n  }, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 103,\n      columnNumber: 5\n    }\n  }), __jsx(SearchInput, {\n    freeSolo: true,\n    ignoreCase: true,\n    disableClearable: true,\n    getOptionLabel: function getOptionLabel(option) {\n      return getTermString(option);\n    },\n    renderOption: function renderOption(option) {\n      return __jsx(SuggestedText, {\n        onClick: function onClick() {\n          return handleAutoCompleteClick(option);\n        },\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 116,\n          columnNumber: 11\n        }\n      }, getTermString(option));\n    },\n    options: options,\n    renderInput: function renderInput(params) {\n      return __jsx(TextField, _extends({}, params, {\n        onChange: handlePredictiveSearch,\n        label: \"\",\n        autoFocus: searchToggled,\n        variant: \"outlined\",\n        margin: \"normal\",\n        inputRef: inputRef,\n        InputProps: _objectSpread(_objectSpread({}, params.InputProps), {}, {\n          type: 'search'\n        }),\n        onBlur: function onBlur() {\n          return createEvent(inputRef.current, 'mousedown', 50);\n        },\n        onKeyDown: handleKeyDownSearch(),\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 122,\n          columnNumber: 11\n        }\n      }));\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 110,\n      columnNumber: 7\n    }\n  }));\n\n  return __jsx(React.Fragment, null, __jsx(Drawer, {\n    open: searchToggled,\n    anchor: \"left\",\n    width: 70,\n    onClose: function onClose() {\n      return setPredictiveLoading(false);\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 141,\n      columnNumber: 7\n    }\n  }, __jsx(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 146,\n      columnNumber: 9\n    }\n  }, __jsx(SearchAutoCompleteBoxStyle, {\n    theme: textTheme,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 147,\n      columnNumber: 11\n    }\n  }), __jsx(ToogledSearchContainer, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 148,\n      columnNumber: 11\n    }\n  }, __jsx(ClearIconContainer, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 149,\n      columnNumber: 13\n    }\n  }, __jsx(Actionable, {\n    \"aria-label\": \"search\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 150,\n      columnNumber: 15\n    }\n  }, __jsx(ClearIcon, {\n    fontSize: \"large\",\n    onClick: handleSetToggled,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 151,\n      columnNumber: 17\n    }\n  }))), renderNoToggleSearch, __jsx(LoaderContainer, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 155,\n      columnNumber: 13\n    }\n  }, __jsx(Loader, {\n    active: predictiveLoading,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 156,\n      columnNumber: 15\n    }\n  }))))), isToggleSearch ? __jsx(SearchIcon, {\n    color: searchIconColor,\n    fontSize: \"large\",\n    onClick: handleSetToggled,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 162,\n      columnNumber: 9\n    }\n  }) : __jsx(SearchInputWrapper, _extends({\n    searchToggled: searchToggled,\n    handleSetToggled: handleSetToggled,\n    initLooseSearch: initLooseSearch,\n    searchIconColor: searchIconColor,\n    searchBarColor: searchBarColor\n  }, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 164,\n      columnNumber: 9\n    }\n  }), __jsx(DekstopSearchAction, {\n    fullWidth: true,\n    variant: \"outlined\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 172,\n      columnNumber: 11\n    }\n  })));\n}\n\n_s(Search, \"MTL564yRU3QiMfcQ/Wxei/s4byA=\", false, function () {\n  return [useTheme, useRouter, useCms];\n});\n\n_c = Search;\n\nvar _c;\n\n$RefreshReg$(_c, \"Search\");","map":{"version":3,"sources":["/Users/justincoulston/Desktop/affilaite-core-mono/packages/app/components/modules/Search/Search.js"],"names":["React","useState","useRef","TextField","SearchIcon","Grid","Flex","Actionable","ClearIcon","clientRequests","getPredictiveTermsList","getTermString","SEARCH_PATH","kebabCase","debounce","Drawer","useRouter","urlCase","delayedCallback","betterThrottle","createEvent","useTheme","useCms","Loader","SearchInputWrapper","ClearIconContainer","ToogledSearchContainer","SearchContainer","SearchInput","SearchAutoCompleteBoxStyle","SuggestedText","DekstopSearchAction","LoaderContainer","Search","isToggleSearch","onSubmitCallback","textTheme","searchToggled","setSearchToggled","options","setOptions","inputValue","setInputValue","predictiveLoading","setPredictiveLoading","inputRef","router","searchCms","search","searchIconColor","searchBarColor","apiThrottleTimeout","smoothLoaderControler","handleSetToggled","setPredictiveSearch","value","getPredictiveSearch","result","predivtiveTerms","keyTerm","handlePredictiveSearch","target","valueCase","toLowerCase","clearTimeout","setTimeout","length","goToSearch","page","push","handleAutoCompleteClick","option","searchParams","Object","keys","reduce","acc","cur","replace","slice","initLooseSearch","handleKeyDownSearch","keyCode","renderNoToggleSearch","params","InputProps","type","current"],"mappings":";;;;;;;;;;;;;;;;AAAA;AAEA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,MAA1B,QAAwC,OAAxC;AACA,OAAOC,SAAP,MAAsB,6BAAtB;AACA,OAAOC,UAAP,MAAuB,2BAAvB;AACA,OAAOC,IAAP,MAAiB,wBAAjB;AACA,SAASC,IAAT,EAAeC,UAAf,QAAiC,gCAAjC;AACA,OAAOC,SAAP,MAAsB,0BAAtB;AACA,OAAOC,cAAP,MAA2B,0CAA3B;AACA,SAASC,sBAAT,EAAiCC,aAAjC,QAAsD,UAAtD;AACA,SAASC,WAAT,QAA4B,YAA5B;AACA,OAAOC,SAAP,MAAsB,kBAAtB;AACA,OAAOC,QAAP,MAAqB,iBAArB;AACA,OAAOC,MAAP,MAAmB,eAAnB;AACA,SAASC,SAAT,QAA0B,aAA1B;AACA,SAASC,OAAT,EAAkBC,eAAlB,EAAmCC,cAAnC,EAAmDC,WAAnD,QAAsE,iBAAtE;AACA,SAASC,QAAT,EAAmBC,MAAnB,QAAiC,QAAjC;AAEA,OAAOC,MAAP,MAAmB,eAAnB;AACA,OAAOC,kBAAP,MAA+B,sBAA/B;AACA,SACEC,kBADF,EAEEC,sBAFF,EAGEC,eAHF,EAIEC,WAJF,EAKEC,0BALF,EAMEC,aANF,EAOEC,mBAPF,EAQEC,eARF,QASO,SATP;AAgBA,eAAe,SAASC,MAAT,OAAmE;AAAA;;AAAA;;AAAA,MAAjDC,cAAiD,QAAjDA,cAAiD;AAAA,MAAjCC,gBAAiC,QAAjCA,gBAAiC;;AAAA,kBAC1Dd,QAAQ,EADkD;AAAA,MACxEe,SADwE,aACxEA,SADwE;;AAAA,kBAEtCnC,QAAQ,CAAC,KAAD,CAF8B;AAAA,MAEzEoC,aAFyE;AAAA,MAE1DC,gBAF0D;;AAAA,mBAGlDrC,QAAQ,CAAC,EAAD,CAH0C;AAAA,MAGzEsC,OAHyE;AAAA,MAGhEC,UAHgE;;AAAA,mBAI5CvC,QAAQ,CAAC,EAAD,CAJoC;AAAA,MAIzEwC,UAJyE;AAAA,MAI7DC,aAJ6D;;AAAA,mBAK9BzC,QAAQ,CAAC,KAAD,CALsB;AAAA,MAKzE0C,iBALyE;AAAA,MAKtDC,oBALsD;;AAMhF,MAAMC,QAAQ,GAAG7C,KAAK,CAACE,MAAN,EAAjB;AACA,MAAM4C,MAAM,GAAG9B,SAAS,EAAxB;;AAPgF,gBAQlDM,MAAM,CAAC,QAAD,CAR4C;AAAA,MAQhEyB,SARgE,WAQxEC,MARwE;;AAAA,MASxEC,eATwE,GASpCF,SAToC,CASxEE,eATwE;AAAA,MASvDC,cATuD,GASpCH,SAToC,CASvDG,cATuD;AAWhF,MAAIC,kBAAJ;AACA,MAAIC,qBAAJ;;AAEA,MAAMC,gBAAgB,GAAG,SAAnBA,gBAAmB;AAAA,WAAYf,gBAAgB,CAAC,CAACD,aAAF,CAA5B;AAAA,GAAzB;;AAEA,MAAMiB,mBAAmB;AAAA,yEAAG,iBAAOC,KAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qBACL9C,cAAc,CAAC+C,mBAAf,CAAmCD,KAAnC,CADK;;AAAA;AACpBE,cAAAA,MADoB;AAE1Bb,cAAAA,oBAAoB,CAAC,KAAD,CAApB;AACMc,cAAAA,eAHoB,GAGFhD,sBAAsB,CAAC+C,MAAD,EAASF,KAAT,CAHpB;AAI1Bf,cAAAA,UAAU,EAAE;AAAEmB,gBAAAA,OAAO,cAAMJ,KAAN;AAAT,eAAF,4BAAgCG,eAAhC,GAAV;;AAJ0B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAH;;AAAA,oBAAnBJ,mBAAmB;AAAA;AAAA;AAAA,KAAzB;;AAOA,MAAMM,sBAAsB;AAAA,yEAAG;AAAA;AAAA;AAAA;AAAA;AAAA;AAAmBL,cAAAA,KAAnB,SAASM,MAAT,CAAmBN,KAAnB;AACvBO,cAAAA,SADuB,GACXP,KAAK,CAACQ,WAAN,EADW;AAE7BrB,cAAAA,aAAa,CAACoB,SAAD,CAAb;AACA,kBAAIX,kBAAJ,EAAwBa,YAAY,CAACb,kBAAD,CAAZ;AACxBA,cAAAA,kBAAkB,GAAGc,UAAU,CAAC,YAAM;AACpC;AACA9C,gBAAAA,cAAc,CAAC;AAAA,yBAAMyB,oBAAoB,CAAC,CAAC,CAACW,KAAH,CAA1B;AAAA,iBAAD,CAAd;;AACA,oBAAIA,KAAK,CAACW,MAAN,GAAe,CAAnB,EAAsB;AACpBZ,kBAAAA,mBAAmB,CAACQ,SAAD,CAAnB;AACD;AACF,eAN8B,EAM5B,GAN4B,CAA/B;;AAJ6B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAH;;AAAA,oBAAtBF,sBAAsB;AAAA;AAAA;AAAA,KAA5B;;AAaA,MAAMO,UAAU,GAAG,SAAbA,UAAa,CAACC,IAAD,EAAwB;AACzC,QAAIjC,gBAAJ,EAAsBA,gBAAgB;AACtCG,IAAAA,gBAAgB,CAAC,KAAD,CAAhB;AACAQ,IAAAA,MAAM,CAACuB,IAAP,CAAYD,IAAZ;AACD,GAJD;;AAMA,MAAME,uBAAuB,GAAG,SAA1BA,uBAA0B,CAACC,MAAD,EAAoC;AAClE,QAAMC,YAAY,GAAGC,MAAM,CAACC,IAAP,CAAYH,MAAZ,EAClBI,MADkB,CAEjB,UAACC,GAAD,EAAMC,GAAN;AAAA;;AAAA,uBAAiBD,GAAjB,SAAuB/D,SAAS,CAACgE,GAAD,CAAhC,cAAyC5D,OAAO,gBAACsD,MAAM,CAACM,GAAD,CAAP,gDAAC,YAAaC,OAAb,CAAqB,KAArB,EAA4B,EAA5B,CAAD,CAAhD;AAAA,KAFiB,aAGblE,WAHa,QAKlBmE,KALkB,CAKZ,CALY,EAKT,CAAC,CALQ,CAArB;AAOA1B,IAAAA,gBAAgB;AAChBc,IAAAA,UAAU,CAACK,YAAD,CAAV;AACD,GAVD;;AAYA,MAAMQ,eAAe,GAAG,SAAlBA,eAAkB,GAAY;AAClC,QAAIvC,UAAU,IAAIA,UAAU,CAACyB,MAAX,GAAoB,CAAtC,EAAyC;AACvCC,MAAAA,UAAU,YAAKvD,WAAL,uBAA6BK,OAAO,CAACwB,UAAD,CAApC,EAAV;AACAY,MAAAA,gBAAgB;AACjB;AACF,GALD;;AAOA,MAAM4B,mBAAmB,GAAG,SAAtBA,mBAAsB;AAAA,WAAM,iBAA+B;AAAA,UAA5BC,OAA4B,SAA5BA,OAA4B;AAC/D,UAAIA,OAAO,KAAK,EAAhB,EAAoBF,eAAe;AACpC,KAF2B;AAAA,GAA5B;;AAIA,MAAMG,oBAAoB,GACxB,MAAC,kBAAD,WACM;AACF9C,IAAAA,aAAa,EAAbA,aADE;AAEF2C,IAAAA,eAAe,EAAfA,eAFE;AAGF/B,IAAAA,eAAe,EAAfA,eAHE;AAIFC,IAAAA,cAAc,EAAdA;AAJE,GADN;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAOE,MAAC,WAAD;AACE,IAAA,QAAQ,MADV;AAEE,IAAA,UAAU,MAFZ;AAGE,IAAA,gBAAgB,MAHlB;AAIE,IAAA,cAAc,EAAE,wBAACqB,MAAD;AAAA,aAAY5D,aAAa,CAAC4D,MAAD,CAAzB;AAAA,KAJlB;AAKE,IAAA,YAAY,EAAE,sBAACA,MAAD;AAAA,aACZ,MAAC,aAAD;AAAe,QAAA,OAAO,EAAE;AAAA,iBAAMD,uBAAuB,CAACC,MAAD,CAA7B;AAAA,SAAxB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACG5D,aAAa,CAAC4D,MAAD,CADhB,CADY;AAAA,KALhB;AAUE,IAAA,OAAO,EAAEhC,OAVX;AAWE,IAAA,WAAW,EAAE,qBAAC6C,MAAD;AAAA,aACX,MAAC,SAAD,eACMA,MADN;AAEE,QAAA,QAAQ,EAAExB,sBAFZ;AAGE,QAAA,KAAK,EAAC,EAHR;AAIE,QAAA,SAAS,EAAEvB,aAJb;AAKE,QAAA,OAAO,EAAC,UALV;AAME,QAAA,MAAM,EAAC,QANT;AAOE,QAAA,QAAQ,EAAEQ,QAPZ;AAQE,QAAA,UAAU,kCAAOuC,MAAM,CAACC,UAAd;AAA0BC,UAAAA,IAAI,EAAE;AAAhC,UARZ;AASE,QAAA,MAAM,EAAE;AAAA,iBAAMlE,WAAW,CAACyB,QAAQ,CAAC0C,OAAV,EAAmB,WAAnB,EAAgC,EAAhC,CAAjB;AAAA,SATV;AAUE,QAAA,SAAS,EAAEN,mBAAmB,EAVhC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SADW;AAAA,KAXf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAPF,CADF;;AAqCA,SACE,4BACE,MAAC,MAAD;AACE,IAAA,IAAI,EAAE5C,aADR;AAEE,IAAA,MAAM,EAAC,MAFT;AAGE,IAAA,KAAK,EAAE,EAHT;AAIE,IAAA,OAAO,EAAE;AAAA,aAAMO,oBAAoB,CAAC,KAAD,CAA1B;AAAA,KAJX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAKE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,MAAC,0BAAD;AAA4B,IAAA,KAAK,EAAER,SAAnC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,EAEE,MAAC,sBAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,MAAC,kBAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,MAAC,UAAD;AAAY,kBAAW,QAAvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,MAAC,SAAD;AAAW,IAAA,QAAQ,EAAC,OAApB;AAA4B,IAAA,OAAO,EAAEiB,gBAArC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,CADF,CADF,EAMG8B,oBANH,EAOE,MAAC,eAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,MAAC,MAAD;AAAQ,IAAA,MAAM,EAAExC,iBAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,CAPF,CAFF,CALF,CADF,EAqBGT,cAAc,GACb,MAAC,UAAD;AAAY,IAAA,KAAK,EAAEe,eAAnB;AAAoC,IAAA,QAAQ,EAAC,OAA7C;AAAqD,IAAA,OAAO,EAAEI,gBAA9D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADa,GAGb,MAAC,kBAAD,WACM;AACFhB,IAAAA,aAAa,EAAbA,aADE;AAEFgB,IAAAA,gBAAgB,EAAhBA,gBAFE;AAGF2B,IAAAA,eAAe,EAAfA,eAHE;AAIF/B,IAAAA,eAAe,EAAfA,eAJE;AAKFC,IAAAA,cAAc,EAAdA;AALE,GADN;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAQE,MAAC,mBAAD;AAAqB,IAAA,SAAS,MAA9B;AAA+B,IAAA,OAAO,EAAC,UAAvC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IARF,CAxBJ,CADF;AAsCD;;GA5IuBjB,M;UACAZ,Q,EAMPL,S,EACeM,M;;;KARRW,M","sourcesContent":["/* eslint-disable no-use-before-define */\n//@flow\nimport React, { useState, useRef } from 'react';\nimport TextField from '@material-ui/core/TextField';\nimport SearchIcon from '@material-ui/icons/Search';\nimport Grid from '@material-ui/core/Grid';\nimport { Flex, Actionable } from '@styles/CommonStyledComponents';\nimport ClearIcon from '@material-ui/icons/Clear';\nimport clientRequests from '../../../apiUtil/requests/clientRequests';\nimport { getPredictiveTermsList, getTermString } from './helper';\nimport { SEARCH_PATH } from '@constants';\nimport kebabCase from 'lodash/kebabCase';\nimport debounce from 'lodash/debounce';\nimport Drawer from '@units/Drawer';\nimport { useRouter } from 'next/router';\nimport { urlCase, delayedCallback, betterThrottle, createEvent } from '@helpers/common';\nimport { useTheme, useCms } from '@hooks';\nimport { type PredictiveSearch } from '@types/search';\nimport Loader from '@units/Loader';\nimport SearchInputWrapper from './SearchInputWrapper';\nimport {\n  ClearIconContainer,\n  ToogledSearchContainer,\n  SearchContainer,\n  SearchInput,\n  SearchAutoCompleteBoxStyle,\n  SuggestedText,\n  DekstopSearchAction,\n  LoaderContainer,\n} from './style';\n\ntype SearchProps = {\n  isToggleSearch?: boolean,\n  onSubmitCallback?: Function,\n};\n\nexport default function Search({ isToggleSearch, onSubmitCallback }: SearchProps) {\n  const { textTheme } = useTheme();\n  const [searchToggled, setSearchToggled] = useState(false);\n  const [options, setOptions] = useState([]);\n  const [inputValue, setInputValue] = useState([]);\n  const [predictiveLoading, setPredictiveLoading] = useState(false);\n  const inputRef = React.useRef();\n  const router = useRouter();\n  const { search: searchCms } = useCms('header');\n  const { searchIconColor, searchBarColor } = searchCms;\n\n  let apiThrottleTimeout;\n  let smoothLoaderControler;\n\n  const handleSetToggled = (): void => setSearchToggled(!searchToggled);\n\n  const setPredictiveSearch = async (value: string): Promise<any> => {\n    const result = await clientRequests.getPredictiveSearch(value);\n    setPredictiveLoading(false);\n    const predivtiveTerms = getPredictiveTermsList(result, value);\n    setOptions([{ keyTerm: `\"${value}\"` }, ...predivtiveTerms]);\n  };\n\n  const handlePredictiveSearch = async ({ target: { value } }: Object): Promise<any> => {\n    const valueCase = value.toLowerCase();\n    setInputValue(valueCase);\n    if (apiThrottleTimeout) clearTimeout(apiThrottleTimeout);\n    apiThrottleTimeout = setTimeout(() => {\n      // throttle reduces 'glitchy' loader animations caused by quick typing\n      betterThrottle(() => setPredictiveLoading(!!value));\n      if (value.length > 2) {\n        setPredictiveSearch(valueCase);\n      }\n    }, 500);\n  };\n\n  const goToSearch = (page: string): void => {\n    if (onSubmitCallback) onSubmitCallback();\n    setSearchToggled(false);\n    router.push(page);\n  };\n\n  const handleAutoCompleteClick = (option: PredictiveSearch): void => {\n    const searchParams = Object.keys(option)\n      .reduce(\n        (acc, cur) => `${acc}${kebabCase(cur)}=${urlCase(option[cur]?.replace(/\\\"/g, ''))}&`,\n        `/${SEARCH_PATH}?`\n      )\n      .slice(0, -1);\n\n    handleSetToggled();\n    goToSearch(searchParams);\n  };\n\n  const initLooseSearch = (): void => {\n    if (inputValue && inputValue.length > 2) {\n      goToSearch(`/${SEARCH_PATH}?key-term=${urlCase(inputValue)}`);\n      handleSetToggled();\n    }\n  };\n\n  const handleKeyDownSearch = () => ({ keyCode }: Object): void => {\n    if (keyCode === 13) initLooseSearch();\n  };\n\n  const renderNoToggleSearch = (\n    <SearchInputWrapper\n      {...{\n        searchToggled,\n        initLooseSearch,\n        searchIconColor,\n        searchBarColor,\n      }}>\n      <SearchInput\n        freeSolo\n        ignoreCase\n        disableClearable\n        getOptionLabel={(option) => getTermString(option)}\n        renderOption={(option) => (\n          <SuggestedText onClick={() => handleAutoCompleteClick(option)}>\n            {getTermString(option)}\n          </SuggestedText>\n        )}\n        options={options}\n        renderInput={(params) => (\n          <TextField\n            {...params}\n            onChange={handlePredictiveSearch}\n            label=\"\"\n            autoFocus={searchToggled}\n            variant=\"outlined\"\n            margin=\"normal\"\n            inputRef={inputRef}\n            InputProps={{ ...params.InputProps, type: 'search' }}\n            onBlur={() => createEvent(inputRef.current, 'mousedown', 50)}\n            onKeyDown={handleKeyDownSearch()}\n          />\n        )}\n      />\n    </SearchInputWrapper>\n  );\n\n  return (\n    <>\n      <Drawer\n        open={searchToggled}\n        anchor=\"left\"\n        width={70}\n        onClose={() => setPredictiveLoading(false)}>\n        <div>\n          <SearchAutoCompleteBoxStyle theme={textTheme} />\n          <ToogledSearchContainer>\n            <ClearIconContainer>\n              <Actionable aria-label=\"search\">\n                <ClearIcon fontSize=\"large\" onClick={handleSetToggled} />\n              </Actionable>\n            </ClearIconContainer>\n            {renderNoToggleSearch}\n            <LoaderContainer>\n              <Loader active={predictiveLoading} />\n            </LoaderContainer>\n          </ToogledSearchContainer>\n        </div>\n      </Drawer>\n      {isToggleSearch ? (\n        <SearchIcon color={searchIconColor} fontSize=\"large\" onClick={handleSetToggled} />\n      ) : (\n        <SearchInputWrapper\n          {...{\n            searchToggled,\n            handleSetToggled,\n            initLooseSearch,\n            searchIconColor,\n            searchBarColor,\n          }}>\n          <DekstopSearchAction fullWidth variant=\"outlined\" />\n        </SearchInputWrapper>\n      )}\n    </>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}