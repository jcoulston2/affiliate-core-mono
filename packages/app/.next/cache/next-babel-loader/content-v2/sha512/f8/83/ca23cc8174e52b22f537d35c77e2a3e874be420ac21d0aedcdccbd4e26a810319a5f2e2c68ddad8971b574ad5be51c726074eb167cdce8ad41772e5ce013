{"ast":null,"code":"// TODO: we need to make the redis import work\n// import redis from 'redis';\nimport * as Promise from 'bluebird';\nimport { IS_PROD } from '../../constants';\nimport storeCache from '../../__store-cache__/store-cache.json';\nimport { zipParse } from '../../helpers/common';\n\nclass Store {\n  constructor(data) {\n    this.store = data || null;\n  }\n\n  serialize(data) {\n    return JSON.stringify(data);\n  }\n\n  async setStore(affiliateData) {\n    this.store = affiliateData;\n\n    try {\n      if (this.redisClient) {\n        await this.redisSetPromise(this.redisKey, this.serialize(affiliateData));\n      }\n\n      return {\n        success: true\n      };\n    } catch (e) {\n      return {\n        success: false,\n        error: `${e}`\n      };\n    }\n  } // Redis only\n\n\n  async getRedisStore() {\n    const store = await this.redisGetPromise(this.redisKey);\n    return JSON.parse(store);\n  } // Redis only\n\n\n  getStore() {\n    return this.store;\n  }\n\n}\n\nconst configuredStore = new Store(zipParse(storeCache.store), {\n  useRedis: false\n});\nexport { configuredStore, Store };","map":{"version":3,"sources":["/Users/justincoulston/Desktop/affilaite-core-mono/packages/affiliate-app/server/store/Store.js"],"names":["Promise","IS_PROD","storeCache","zipParse","Store","constructor","data","store","serialize","JSON","stringify","setStore","affiliateData","redisClient","redisSetPromise","redisKey","success","e","error","getRedisStore","redisGetPromise","parse","getStore","configuredStore","useRedis"],"mappings":"AAEA;AACA;AACA,OAAO,KAAKA,OAAZ,MAAyB,UAAzB;AACA,SAASC,OAAT,QAAwB,iBAAxB;AACA,OAAOC,UAAP,MAAuB,wCAAvB;AACA,SAASC,QAAT,QAAyB,sBAAzB;;AAOA,MAAMC,KAAN,CAAY;AAGVC,EAAAA,WAAW,CAACC,IAAD,EAAkB;AAC3B,SAAKC,KAAL,GAAaD,IAAI,IAAI,IAArB;AACD;;AAEDE,EAAAA,SAAS,CAACF,IAAD,EAAuB;AAC9B,WAAOG,IAAI,CAACC,SAAL,CAAeJ,IAAf,CAAP;AACD;;AAED,QAAMK,QAAN,CACEC,aADF,EAEiD;AAC/C,SAAKL,KAAL,GAAaK,aAAb;;AAEA,QAAI;AACF,UAAI,KAAKC,WAAT,EAAsB;AACpB,cAAM,KAAKC,eAAL,CAAmC,KAAKC,QAAxC,EAAkD,KAAKP,SAAL,CAAeI,aAAf,CAAlD,CAAN;AACD;;AACD,aAAO;AACLI,QAAAA,OAAO,EAAE;AADJ,OAAP;AAGD,KAPD,CAOE,OAAOC,CAAP,EAAU;AACV,aAAO;AACLD,QAAAA,OAAO,EAAE,KADJ;AAELE,QAAAA,KAAK,EAAG,GAAED,CAAE;AAFP,OAAP;AAID;AACF,GA7BS,CA+BV;;;AACA,QAAME,aAAN,GAA4C;AAC1C,UAAMZ,KAAK,GAAG,MAAM,KAAKa,eAAL,CAAmC,KAAKL,QAAxC,CAApB;AACA,WAAON,IAAI,CAACY,KAAL,CAAWd,KAAX,CAAP;AACD,GAnCS,CAqCV;;;AACAe,EAAAA,QAAQ,GAAyB;AAC/B,WAAO,KAAKf,KAAZ;AACD;;AAxCS;;AA2CZ,MAAMgB,eAAe,GAAG,IAAInB,KAAJ,CAAUD,QAAQ,CAACD,UAAU,CAACK,KAAZ,CAAlB,EAAsC;AAAEiB,EAAAA,QAAQ,EAAE;AAAZ,CAAtC,CAAxB;AAEA,SAASD,eAAT,EAA0BnB,KAA1B","sourcesContent":["//@flow\n\n// TODO: we need to make the redis import work\n// import redis from 'redis';\nimport * as Promise from 'bluebird';\nimport { IS_PROD } from '../../constants';\nimport storeCache from '../../__store-cache__/store-cache.json';\nimport { zipParse } from '../../helpers/common';\nimport { type ParsedStore } from '../../types/store';\n\ntype StoreConfig = {\n  useRedis: boolean,\n};\n\nclass Store {\n  store: Array<any> | Object;\n\n  constructor(data: any): void {\n    this.store = data || null;\n  }\n\n  serialize(data: Object): string {\n    return JSON.stringify(data);\n  }\n\n  async setStore(\n    affiliateData: Array<any> | Object\n  ): Promise<{ success: boolean, error?: string }> {\n    this.store = affiliateData;\n\n    try {\n      if (this.redisClient) {\n        await this.redisSetPromise<Promise<any>>(this.redisKey, this.serialize(affiliateData));\n      }\n      return {\n        success: true,\n      };\n    } catch (e) {\n      return {\n        success: false,\n        error: `${e}`,\n      };\n    }\n  }\n\n  // Redis only\n  async getRedisStore(): Promise<ParsedStore> {\n    const store = await this.redisGetPromise<Promise<any>>(this.redisKey);\n    return JSON.parse(store);\n  }\n\n  // Redis only\n  getStore(): Promise<ParsedStore> {\n    return this.store;\n  }\n}\n\nconst configuredStore = new Store(zipParse(storeCache.store), { useRedis: false });\n\nexport { configuredStore, Store };\n"]},"metadata":{},"sourceType":"module"}