{"ast":null,"code":"import { graphql } from 'graphql';\nimport { fastClone } from '../helpers/common';\nimport { configuredStore } from '@affiliate-master/store';\nimport { productResolver, cmsResolver } from '../graphQL/resolvers';\n\nfunction getQqlString(doc) {\n  var _doc$loc, _doc$loc$source;\n\n  return (doc === null || doc === void 0 ? void 0 : (_doc$loc = doc.loc) === null || _doc$loc === void 0 ? void 0 : (_doc$loc$source = _doc$loc.source) === null || _doc$loc$source === void 0 ? void 0 : _doc$loc$source.body) || null;\n}\n\nexport async function cmsController(query, schema) {\n  const gqlQuery = getQqlString(query);\n  const result = await graphql(schema, gqlQuery, cmsResolver());\n  return result.data;\n}\nexport async function storeController(query, schema, clone = true, variables) {\n  const gqlQuery = getQqlString(query);\n  const affiliateData = configuredStore;\n  const result = await graphql(schema, gqlQuery, productResolver(affiliateData), null, variables);\n  if (result.errors) console.log(result.errors[0]);\n  return clone ? fastClone(result.data) : result.data;\n}","map":{"version":3,"sources":["/Users/justincoulston/Desktop/affilaite-core-mono/packages/app/apiUtil/controller.js"],"names":["graphql","fastClone","configuredStore","productResolver","cmsResolver","getQqlString","doc","loc","source","body","cmsController","query","schema","gqlQuery","result","data","storeController","clone","variables","affiliateData","errors","console","log"],"mappings":"AACA,SAASA,OAAT,QAAwB,SAAxB;AACA,SAASC,SAAT,QAA0B,mBAA1B;AACA,SAASC,eAAT,QAAgC,yBAAhC;AACA,SAASC,eAAT,EAA0BC,WAA1B,QAA6C,sBAA7C;;AAIA,SAASC,YAAT,CAAsBC,GAAtB,EAA2C;AAAA;;AACzC,SAAO,CAAAA,GAAG,SAAH,IAAAA,GAAG,WAAH,wBAAAA,GAAG,CAAEC,GAAL,yEAAUC,MAAV,oEAAkBC,IAAlB,KAA0B,IAAjC;AACD;;AAED,OAAO,eAAeC,aAAf,CAA6BC,KAA7B,EAA8CC,MAA9C,EAAsF;AAC3F,QAAMC,QAAQ,GAAGR,YAAY,CAACM,KAAD,CAA7B;AACA,QAAMG,MAAc,GAAG,MAAMd,OAAO,CAACY,MAAD,EAASC,QAAT,EAAmBT,WAAW,EAA9B,CAApC;AACA,SAAOU,MAAM,CAACC,IAAd;AACD;AAED,OAAO,eAAeC,eAAf,CACLL,KADK,EAELC,MAFK,EAGLK,KAAc,GAAG,IAHZ,EAILC,SAJK,EAKS;AACd,QAAML,QAAQ,GAAGR,YAAY,CAACM,KAAD,CAA7B;AACA,QAAMQ,aAAa,GAAGjB,eAAtB;AACA,QAAMY,MAAM,GAAG,MAAMd,OAAO,CAACY,MAAD,EAASC,QAAT,EAAmBV,eAAe,CAACgB,aAAD,CAAlC,EAAmD,IAAnD,EAAyDD,SAAzD,CAA5B;AACA,MAAIJ,MAAM,CAACM,MAAX,EAAmBC,OAAO,CAACC,GAAR,CAAYR,MAAM,CAACM,MAAP,CAAc,CAAd,CAAZ;AACnB,SAAOH,KAAK,GAAGhB,SAAS,CAACa,MAAM,CAACC,IAAR,CAAZ,GAA4BD,MAAM,CAACC,IAA/C;AACD","sourcesContent":["//@flow\nimport { graphql } from 'graphql';\nimport { fastClone } from '../helpers/common';\nimport { configuredStore } from '@affiliate-master/store';\nimport { productResolver, cmsResolver } from '../graphQL/resolvers';\nimport { type CmsApiQuery } from '../types/apiQueries';\nimport { type GqlQuery, type GqlSchema, type GqlDoc } from '../types/graphQl';\n\nfunction getQqlString(doc: GqlDoc): string {\n  return doc?.loc?.source?.body || null;\n}\n\nexport async function cmsController(query: GqlQuery, schema: GqlQuery): Promise<CmsApiQuery> {\n  const gqlQuery = getQqlString(query);\n  const result: Object = await graphql(schema, gqlQuery, cmsResolver());\n  return result.data;\n}\n\nexport async function storeController(\n  query: GqlQuery,\n  schema: GqlSchema,\n  clone: boolean = true,\n  variables?: ?Object\n): Promise<any> {\n  const gqlQuery = getQqlString(query);\n  const affiliateData = configuredStore;\n  const result = await graphql(schema, gqlQuery, productResolver(affiliateData), null, variables);\n  if (result.errors) console.log(result.errors[0]);\n  return clone ? fastClone(result.data) : result.data;\n}\n"]},"metadata":{},"sourceType":"module"}