{"ast":null,"code":"import _defineProperty from \"/Users/justincoulston/Desktop/affilaite-core-mono/node_modules/next/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nvar _jsxFileName = \"/Users/justincoulston/Desktop/affilaite-core-mono/packages/app/components/modules/Navigation/MobileSubNavContainers/MobileSubNavContainers.js\";\nvar __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport React from 'react';\nimport Grid from '@material-ui/core/Grid';\nimport Divider from '@material-ui/core/Divider';\nimport Link from 'next/link';\nimport Typography from '@units/Typography';\nimport Card from '@units/Card';\nimport { SubNavTitle, MobileMenuItem, MobileLink } from './styles';\nimport { NavCard } from '../MobileNavigation/styles';\nimport ChevronRightIcon from '@material-ui/icons/ChevronRight';\nimport { PLP_PATH } from '@constants';\nexport default function SubNavContainers(_ref) {\n  var _this = this;\n\n  var title = _ref.title,\n      titleIndex = _ref.titleIndex,\n      subNav = _ref.subNav,\n      setNavigationExpandedLevel = _ref.setNavigationExpandedLevel,\n      setMobileNavigationActiveTitleIndex = _ref.setMobileNavigationActiveTitleIndex,\n      mobileNavigationActiveTitleIndex = _ref.mobileNavigationActiveTitleIndex,\n      navigationExpandedLevel = _ref.navigationExpandedLevel,\n      setNavigationBreadCrumb = _ref.setNavigationBreadCrumb,\n      mobileFirstLevelNavLink = _ref.mobileFirstLevelNavLink,\n      mobileSecondLevelNavLink = _ref.mobileSecondLevelNavLink,\n      mobileNavHorizontalLayers = _ref.mobileNavHorizontalLayers,\n      mobileNavCardPadding = _ref.mobileNavCardPadding,\n      togglMobileNav = _ref.togglMobileNav,\n      resetProductFeeds = _ref.resetProductFeeds;\n\n  var handleNavExpanded = function handleNavExpanded(activeIndex, level, title) {\n    setNavigationBreadCrumb(function (state) {\n      return _objectSpread(_objectSpread({}, state), {}, _defineProperty({}, level, title));\n    });\n    setNavigationExpandedLevel(level);\n    setMobileNavigationActiveTitleIndex(activeIndex);\n  };\n\n  var isThirdLevel = navigationExpandedLevel === 2;\n  var isSecondLevel = navigationExpandedLevel === 1;\n  var isActive = mobileNavigationActiveTitleIndex === titleIndex;\n  var isThreeLayeredMobileNav = mobileNavHorizontalLayers === 3;\n  var isLastLayerActive = isThreeLayeredMobileNav ? isThirdLevel : isSecondLevel;\n\n  var handleNavItemClick = function handleNavItemClick() {\n    togglMobileNav(false);\n    resetProductFeeds();\n  }; // First / top level\n\n\n  var renderFirstLevelNav = function renderFirstLevelNav() {\n    return __jsx(NavCard, {\n      item: true,\n      xs: 4,\n      onClick: function onClick() {\n        return handleNavExpanded(titleIndex, 1, title);\n      },\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 69,\n        columnNumber: 5\n      }\n    }, __jsx(Card, {\n      padding: mobileNavCardPadding,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 70,\n        columnNumber: 7\n      }\n    }, __jsx(Grid, {\n      container: true,\n      alignItems: \"center\",\n      justify: \"space-between\",\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 71,\n        columnNumber: 9\n      }\n    }, __jsx(Typography, {\n      tag: \"h3\",\n      typeStyles: mobileFirstLevelNavLink,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 72,\n        columnNumber: 11\n      }\n    }, title), __jsx(ChevronRightIcon, {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 75,\n        columnNumber: 11\n      }\n    }))));\n  }; // Labels\n\n\n  var renderLabels = function renderLabels(title) {\n    return __jsx(Grid, {\n      item: true,\n      xs: true,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 83,\n        columnNumber: 5\n      }\n    }, __jsx(NavCard, {\n      onClick: function onClick() {\n        return handleNavExpanded(titleIndex, 2, title);\n      },\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 84,\n        columnNumber: 7\n      }\n    }, isSecondLevel && __jsx(Card, {\n      padding: mobileNavCardPadding,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 86,\n        columnNumber: 11\n      }\n    }, __jsx(Grid, {\n      container: true,\n      alignItems: \"center\",\n      justify: \"space-between\",\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 87,\n        columnNumber: 13\n      }\n    }, __jsx(Typography, {\n      tag: \"h3\",\n      typeStyles: mobileSecondLevelNavLink,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 88,\n        columnNumber: 15\n      }\n    }, title), __jsx(ChevronRightIcon, {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 91,\n        columnNumber: 15\n      }\n    })))));\n  }; // Nav links\n\n\n  var renderNavLinks = function renderNavLinks(subNavItems, title) {\n    return __jsx(Grid, {\n      item: true,\n      xs: true,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 101,\n        columnNumber: 5\n      }\n    }, !isThreeLayeredMobileNav && __jsx(MobileMenuItem, {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 103,\n        columnNumber: 9\n      }\n    }, __jsx(Typography, {\n      tag: \"h3\",\n      typeStyles: mobileSecondLevelNavLink,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 104,\n        columnNumber: 11\n      }\n    }, title)), isLastLayerActive && subNavItems.map(function (_ref2, index) {\n      var title = _ref2.title,\n          link = _ref2.link;\n      return __jsx(React.Fragment, null, __jsx(MobileMenuItem, {\n        key: \"StyledMenuItem\".concat(index),\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 112,\n          columnNumber: 13\n        }\n      }, __jsx(MobileLink, {\n        onClick: handleNavItemClick,\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 113,\n          columnNumber: 15\n        }\n      }, __jsx(Link, {\n        href: \"/\".concat(PLP_PATH, \"/[...slug]\"),\n        as: \"/\".concat(PLP_PATH).concat(link),\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 114,\n          columnNumber: 17\n        }\n      }, title))), __jsx(Divider, {\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 119,\n          columnNumber: 13\n        }\n      }));\n    }));\n  };\n\n  return __jsx(React.Fragment, null, (!navigationExpandedLevel || isActive) && __jsx(SubNavTitle, {\n    container: true,\n    item: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 128,\n      columnNumber: 9\n    }\n  }, renderFirstLevelNav(), __jsx(Grid, {\n    container: true,\n    item: true,\n    xs: 8,\n    direction: \"column\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 130,\n      columnNumber: 11\n    }\n  }, subNav.map(function (_ref3, index) {\n    var title = _ref3.title,\n        subNavItems = _ref3.subNavItems;\n    return __jsx(Grid, {\n      item: true,\n      xs: true,\n      container: true,\n      key: index,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 132,\n        columnNumber: 15\n      }\n    }, isThreeLayeredMobileNav && renderLabels(title), renderNavLinks(subNavItems, title));\n  }))));\n}\n_c = SubNavContainers;\nSubNavContainers.propTypes = {};\n\nvar _c;\n\n$RefreshReg$(_c, \"SubNavContainers\");","map":{"version":3,"sources":["/Users/justincoulston/Desktop/affilaite-core-mono/packages/app/components/modules/Navigation/MobileSubNavContainers/MobileSubNavContainers.js"],"names":["React","Grid","Divider","Link","Typography","Card","SubNavTitle","MobileMenuItem","MobileLink","NavCard","ChevronRightIcon","PLP_PATH","SubNavContainers","title","titleIndex","subNav","setNavigationExpandedLevel","setMobileNavigationActiveTitleIndex","mobileNavigationActiveTitleIndex","navigationExpandedLevel","setNavigationBreadCrumb","mobileFirstLevelNavLink","mobileSecondLevelNavLink","mobileNavHorizontalLayers","mobileNavCardPadding","togglMobileNav","resetProductFeeds","handleNavExpanded","activeIndex","level","state","isThirdLevel","isSecondLevel","isActive","isThreeLayeredMobileNav","isLastLayerActive","handleNavItemClick","renderFirstLevelNav","renderLabels","renderNavLinks","subNavItems","map","index","link","propTypes"],"mappings":"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","sourcesContent":["//@flow\nimport React from 'react';\nimport Grid from '@material-ui/core/Grid';\nimport Divider from '@material-ui/core/Divider';\nimport Link from 'next/link';\nimport Typography from '@units/Typography';\nimport { type CmsCopy } from '@types/cms';\nimport Card from '@units/Card';\nimport { SubNavTitle, MobileMenuItem, MobileLink } from './styles';\nimport { NavCard } from '../MobileNavigation/styles';\nimport ChevronRightIcon from '@material-ui/icons/ChevronRight';\nimport { type NormalizedSubNavDataItem } from '@types/navigationData';\nimport { type CmsResponsiveString } from '@types/cms';\nimport { PLP_PATH } from '@constants';\n\ntype SubNavContainersProps = {\n  title: string,\n  titleIndex: number,\n  subNav: Array<NormalizedSubNavDataItem>,\n  navigationExpandedLevel: number,\n  setMobileNavigationActiveTitleIndex: Function,\n  mobileNavigationActiveTitleIndex: Function,\n  setNavigationExpandedLevel: Function,\n  navigationExpandedLevel: number,\n  setNavigationBreadCrumb: Function,\n  mobileFirstLevelNavLink: CmsCopy,\n  mobileSecondLevelNavLink: CmsCopy,\n  mobileNavCardPadding: CmsResponsiveString,\n  mobileNavHorizontalLayers: 2 | 3,\n  togglMobileNav: Function,\n  resetProductFeeds: Function,\n};\n\nexport default function SubNavContainers({\n  title,\n  titleIndex,\n  subNav,\n  setNavigationExpandedLevel,\n  setMobileNavigationActiveTitleIndex,\n  mobileNavigationActiveTitleIndex,\n  navigationExpandedLevel,\n  setNavigationBreadCrumb,\n  mobileFirstLevelNavLink,\n  mobileSecondLevelNavLink,\n  mobileNavHorizontalLayers,\n  mobileNavCardPadding,\n  togglMobileNav,\n  resetProductFeeds,\n}: SubNavContainersProps) {\n  const handleNavExpanded = (activeIndex, level, title) => {\n    setNavigationBreadCrumb((state) => ({ ...state, [level]: title }));\n    setNavigationExpandedLevel(level);\n    setMobileNavigationActiveTitleIndex(activeIndex);\n  };\n\n  const isThirdLevel = navigationExpandedLevel === 2;\n  const isSecondLevel = navigationExpandedLevel === 1;\n  const isActive = mobileNavigationActiveTitleIndex === titleIndex;\n  const isThreeLayeredMobileNav = mobileNavHorizontalLayers === 3;\n  const isLastLayerActive = isThreeLayeredMobileNav ? isThirdLevel : isSecondLevel;\n\n  const handleNavItemClick = (): void => {\n    togglMobileNav(false);\n    resetProductFeeds();\n  };\n\n  // First / top level\n  const renderFirstLevelNav = () => (\n    <NavCard item xs={4} onClick={() => handleNavExpanded(titleIndex, 1, title)}>\n      <Card padding={mobileNavCardPadding}>\n        <Grid container alignItems=\"center\" justify=\"space-between\">\n          <Typography tag=\"h3\" typeStyles={mobileFirstLevelNavLink}>\n            {title}\n          </Typography>\n          <ChevronRightIcon />\n        </Grid>\n      </Card>\n    </NavCard>\n  );\n\n  // Labels\n  const renderLabels = (title) => (\n    <Grid item xs>\n      <NavCard onClick={() => handleNavExpanded(titleIndex, 2, title)}>\n        {isSecondLevel && (\n          <Card padding={mobileNavCardPadding}>\n            <Grid container alignItems=\"center\" justify=\"space-between\">\n              <Typography tag=\"h3\" typeStyles={mobileSecondLevelNavLink}>\n                {title}\n              </Typography>\n              <ChevronRightIcon />\n            </Grid>\n          </Card>\n        )}\n      </NavCard>\n    </Grid>\n  );\n\n  // Nav links\n  const renderNavLinks = (subNavItems, title) => (\n    <Grid item xs>\n      {!isThreeLayeredMobileNav && (\n        <MobileMenuItem>\n          <Typography tag=\"h3\" typeStyles={mobileSecondLevelNavLink}>\n            {title}\n          </Typography>\n        </MobileMenuItem>\n      )}\n      {isLastLayerActive &&\n        subNavItems.map(({ title, link }, index) => (\n          <>\n            <MobileMenuItem key={`StyledMenuItem${index}`}>\n              <MobileLink onClick={handleNavItemClick}>\n                <Link href={`/${PLP_PATH}/[...slug]`} as={`/${PLP_PATH}${link}`}>\n                  {title}\n                </Link>\n              </MobileLink>\n            </MobileMenuItem>\n            <Divider />\n          </>\n        ))}\n    </Grid>\n  );\n\n  return (\n    <>\n      {(!navigationExpandedLevel || isActive) && (\n        <SubNavTitle container item>\n          {renderFirstLevelNav()}\n          <Grid container item xs={8} direction=\"column\">\n            {subNav.map(({ title, subNavItems }, index) => (\n              <Grid item xs container key={index}>\n                {isThreeLayeredMobileNav && renderLabels(title)}\n                {renderNavLinks(subNavItems, title)}\n              </Grid>\n            ))}\n          </Grid>\n        </SubNavTitle>\n      )}\n    </>\n  );\n}\n\nSubNavContainers.propTypes = {};\n"]},"metadata":{},"sourceType":"module"}