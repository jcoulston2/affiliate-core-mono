{"ast":null,"code":"import _toConsumableArray from \"/Users/justincoulston/Desktop/affilaite-core-mono/node_modules/next/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\nvar __jsx = React.createElement;\nimport React, { useState, useEffect } from 'react';\nimport Grid from '@material-ui/core/Grid';\nimport Image from '@units/Image';\nimport Card from '@units/Card';\nimport Input from '@units/Input';\nimport Checkbox from '@units/Checkbox';\nimport Typography from '@units/Typography';\nimport RadioButton from '@units/RadioButton';\nimport { Spacer } from '@styles/CommonStyledComponents';\nimport RadioGroup from '@material-ui/core/RadioGroup';\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\nimport FormControl from '@material-ui/core/FormControl';\nimport FormLabel from '@material-ui/core/FormLabel';\nimport Slider from '@units/Slider';\nimport Tooltip from '@material-ui/core/Tooltip';\nimport HelpIcon from '@material-ui/icons/Info';\nimport { CenterVertical } from '@styles/CommonStyledComponents';\nimport Button from '@units/Button';\nimport { useRouter } from 'next/router';\nimport { PLP_PATH, SEARCH_PATH } from '@constants';\nimport { createUrlFilters, normalizeFilters, getNumberOfFiltersSelected, getCategoryFilters, getSectionFilters, sortSelectedCheckboxes, isSearch } from './helper';\nimport { stringifySafe, toArrayNullable, keyWordsToString, urlCase } from '@helpers/common';\nimport { getFilterPlpBasePath, pushFilterPlpBasePath, getFiltersFromUrl } from '@helpers/page';\nimport ClearIcon from '@material-ui/icons/Clear';\nimport Drawer from '@units/Drawer';\nimport { TooltopContent, ClearFilters, FilterNotification } from './styles';\nimport { useBrandList, useCategoryData } from '@hooks';\nimport FilterItem from './FilterItem';\nimport isEmpty from 'lodash/isEmpty';\nimport capitalize from 'lodash/capitalize';\nexport default function Filters(_ref) {\n  var section = _ref.section,\n      category = _ref.category,\n      productSearchValues = _ref.productSearchValues,\n      fetchProducts = _ref.fetchProducts,\n      fetchProductsInSearch = _ref.fetchProductsInSearch,\n      setClientFilterStatus = _ref.setClientFilterStatus,\n      scaler = _ref.scaler,\n      setLoading = _ref.setLoading,\n      setPriceSort = _ref.setPriceSort,\n      setPriceThreshold = _ref.setPriceThreshold,\n      setKeyWords = _ref.setKeyWords,\n      setBrands = _ref.setBrands,\n      setCategory = _ref.setCategory,\n      setSection = _ref.setSection,\n      setSaleThreshold = _ref.setSaleThreshold,\n      setFilterDrawOpen = _ref.setFilterDrawOpen,\n      setHasTouchedSlider = _ref.setHasTouchedSlider,\n      hasSetDefaultFilters = _ref.hasSetDefaultFilters,\n      triggerFilterRefresh = _ref.triggerFilterRefresh,\n      filterDrawOpen = _ref.filterDrawOpen,\n      priceSort = _ref.priceSort,\n      keyWords = _ref.keyWords,\n      brands = _ref.brands,\n      saleThreshold = _ref.saleThreshold,\n      hasTouchedSlider = _ref.hasTouchedSlider,\n      filterRefresh = _ref.filterRefresh,\n      priceThreshold = _ref.priceThreshold,\n      normalizedFilters = _ref.normalizedFilters,\n      useFilterSelectedNotifcation = _ref.useFilterSelectedNotifcation,\n      cms = _ref.productFiltersContent;\n  var router = useRouter();\n  var brandList = useBrandList();\n  var categoryData = useCategoryData();\n  var categoryFilters = getCategoryFilters(section, categoryData);\n  var sectionFilters = getSectionFilters(section, categoryData);\n  var isSearchPage = isSearch(router);\n  var numberOfFiltersSelected = getNumberOfFiltersSelected(normalizedFilters);\n  var sliderMarks = [{\n    label: 'Â£0',\n    value: 0\n  }, {\n    label: hasTouchedSlider ? \"\\xA3\".concat(100 * scaler) : 'no max',\n    value: 100\n  }];\n\n  var closeFilters = function closeFilters() {\n    return setFilterDrawOpen(false);\n  };\n\n  var handleInputChange = function handleInputChange(cb) {\n    return function (event) {\n      cb(event.target.value);\n    };\n  };\n\n  var handleCheckBoxChange = function handleCheckBoxChange(stateVale, stateSetter) {\n    return function (value) {\n      if (stateVale.includes(value)) {\n        stateSetter(stateVale.filter(function (item) {\n          return urlCase(item) !== value;\n        }));\n      } else {\n        stateSetter([].concat(_toConsumableArray(stateVale), [value]));\n      }\n    };\n  };\n\n  var restoreDefaultFilters = function restoreDefaultFilters() {\n    setFilterDrawOpen(false);\n    pushFilterPlpBasePath(router);\n  };\n\n  var applyFilters = function applyFilters() {\n    setClientFilterStatus(true);\n    setFilterDrawOpen(false);\n    setLoading(true);\n    createUrlFilters(normalizedFilters, getFilterPlpBasePath(router), isSearchPage);\n\n    if (isSearchPage) {\n      fetchProductsInSearch(productSearchValues, 0, 100, normalizedFilters);\n    } else {\n      fetchProducts(section, category, 0, 100, normalizedFilters);\n    }\n  };\n\n  useEffect(function () {\n    if (filterRefresh) {\n      triggerFilterRefresh(false);\n      applyFilters();\n    }\n  }, [filterRefresh]);\n  return __jsx(React.Fragment, null, __jsx(Grid, {\n    item: true,\n    onClick: function onClick() {\n      return setFilterDrawOpen(!filterDrawOpen);\n    }\n  }, !!numberOfFiltersSelected && __jsx(FilterNotification, null, numberOfFiltersSelected), __jsx(Image, {\n    src: \"filter-icon.svg\",\n    alt: \"Select productFilters\"\n  })), __jsx(Drawer, {\n    anchor: 'right',\n    open: filterDrawOpen,\n    iconCloseClick: closeFilters,\n    onClose: closeFilters\n  }, __jsx(Card, {\n    padding: '28px'\n  }, __jsx(FormControl, {\n    component: \"fieldset\"\n  }, __jsx(FormLabel, {\n    component: \"legend\"\n  }, __jsx(Typography, {\n    tag: \"h3\",\n    typeStyles: cms.filterCardTitle\n  }, \"Sort\")), __jsx(FilterItem, {\n    isLast: true\n  }, __jsx(RadioGroup, {\n    \"aria-label\": \"price sort\",\n    name: \"price-sort\",\n    value: priceSort,\n    onChange: handleInputChange(setPriceSort)\n  }, __jsx(FormControlLabel, {\n    value: \"low\",\n    control: __jsx(RadioButton, null),\n    label: \"Price low to high\"\n  }), __jsx(FormControlLabel, {\n    value: \"high\",\n    control: __jsx(RadioButton, null),\n    label: \"Price high to low\"\n  }), __jsx(FormControlLabel, {\n    value: 'recommended',\n    control: __jsx(RadioButton, null),\n    label: \"Recommended\"\n  }))))), isSearchPage && __jsx(React.Fragment, null, __jsx(Spacer, {\n    h: 20\n  }), __jsx(Card, null, !!sectionFilters.length && __jsx(React.Fragment, null, __jsx(Typography, {\n    tag: \"h3\",\n    typeStyles: cms.filterItemTitle\n  }, \"Section\"), __jsx(FilterItem, null, __jsx(RadioGroup, {\n    \"aria-label\": \"section\",\n    name: \"section\",\n    value: section,\n    onChange: handleInputChange(setSection)\n  }, sectionFilters.map(function (sectionFilter) {\n    return __jsx(FormControlLabel, {\n      value: sectionFilter,\n      control: __jsx(RadioButton, null),\n      label: capitalize(sectionFilter)\n    });\n  }), __jsx(FormControlLabel, {\n    value: null,\n    control: __jsx(RadioButton, null),\n    label: \"All\"\n  })))), __jsx(Typography, {\n    tag: \"h3\",\n    typeStyles: cms.filterItemTitle\n  }, \"Categories\"), __jsx(FilterItem, {\n    expandable: true\n  }, sortSelectedCheckboxes(categoryFilters, category).map(function (catItem) {\n    return __jsx(Grid, {\n      key: catItem\n    }, __jsx(FormControlLabel, {\n      value: urlCase(catItem),\n      control: __jsx(Checkbox, {\n        checked: category.includes(urlCase(catItem)),\n        onChange: handleInputChange(handleCheckBoxChange(category, setCategory))\n      }),\n      label: capitalize(catItem)\n    }));\n  })))), __jsx(Spacer, {\n    h: 20\n  }), __jsx(Card, {\n    padding: '28px'\n  }, __jsx(Typography, {\n    tag: \"h3\",\n    typeStyles: cms.filterCardTitle\n  }, \"Filters\"), __jsx(Spacer, {\n    h: 20\n  }), __jsx(Typography, {\n    tag: \"h3\",\n    typeStyles: cms.filterItemTitle\n  }, \"Price Range\"), __jsx(FilterItem, null, __jsx(Slider, {\n    scale: function scale(_scale) {\n      return _scale * scaler;\n    },\n    value: priceThreshold,\n    onChange: function onChange(__, value) {\n      setHasTouchedSlider(true);\n      setPriceThreshold(value);\n    },\n    valueLabelDisplay: \"auto\",\n    \"aria-labelledby\": \"set-price\",\n    marks: sliderMarks,\n    valueLabelFormat: function valueLabelFormat(value) {\n      return \"\\xA3\".concat(value);\n    }\n  })), __jsx(CenterVertical, null, __jsx(Typography, {\n    tag: \"h3\",\n    typeStyles: cms.filterItemTitle\n  }, \"Key Words\"), __jsx(Tooltip, {\n    title: __jsx(TooltopContent, null, cms.keyWordsTooltipText)\n  }, __jsx(HelpIcon, {\n    size: \"small\"\n  }))), __jsx(FilterItem, null, __jsx(Input, {\n    fullWidth: true,\n    variant: \"outlined\",\n    label: !keyWords.length ? cms.keyWordsInputLabel : '',\n    value: keyWordsToString(keyWords),\n    onChange: function onChange(_ref2) {\n      var target = _ref2.target;\n      return setKeyWords(target.value && target.value.toLowerCase().replace(',', ' ').split(' ') || []);\n    }\n  })), __jsx(Typography, {\n    tag: \"h3\",\n    typeStyles: cms.filterItemTitle\n  }, \"Brands\"), __jsx(FilterItem, {\n    expandable: true\n  }, brandList.map(function (brand) {\n    return __jsx(Grid, {\n      key: brand\n    }, __jsx(FormControlLabel, {\n      value: urlCase(brand),\n      control: __jsx(Checkbox, {\n        checked: brands.includes(urlCase(brand)),\n        onChange: handleInputChange(handleCheckBoxChange(brands, setBrands))\n      }),\n      label: brand\n    }));\n  })), __jsx(Typography, {\n    tag: \"h3\",\n    typeStyles: cms.filterItemTitle\n  }, \"Sale\"), __jsx(FilterItem, null, __jsx(RadioGroup, {\n    \"aria-label\": \"sale filter\",\n    name: \"sale-filter\",\n    value: saleThreshold,\n    onChange: handleInputChange(setSaleThreshold)\n  }, __jsx(FormControlLabel, {\n    value: '0',\n    control: __jsx(RadioButton, null),\n    label: \"All products\"\n  }), __jsx(FormControlLabel, {\n    value: '1',\n    control: __jsx(RadioButton, null),\n    label: \"All sale items\"\n  }), __jsx(FormControlLabel, {\n    value: '20',\n    control: __jsx(RadioButton, null),\n    label: \"20% and more\"\n  }), __jsx(FormControlLabel, {\n    value: '50',\n    control: __jsx(RadioButton, null),\n    label: \"50% and more\"\n  }), __jsx(FormControlLabel, {\n    value: '70',\n    control: __jsx(RadioButton, null),\n    label: \"70% and more\"\n  })))), __jsx(Spacer, {\n    h: 7\n  }), __jsx(ClearFilters, {\n    onClick: restoreDefaultFilters\n  }, __jsx(Typography, {\n    tag: \"p\",\n    size: 15,\n    decoration: \"underline\",\n    margin: \"0px 0px 10px 0px\"\n  }, \"Clear filters\")), __jsx(Button, {\n    primary: true,\n    fullWidth: true,\n    onClick: applyFilters\n  }, \"Apply filters\")));\n}","map":null,"metadata":{},"sourceType":"module"}