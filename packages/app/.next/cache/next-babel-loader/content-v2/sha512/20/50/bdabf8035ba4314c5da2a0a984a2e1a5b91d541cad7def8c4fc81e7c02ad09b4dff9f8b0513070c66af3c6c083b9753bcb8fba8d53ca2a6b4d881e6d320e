{"ast":null,"code":"import { actions, actionTypes } from './actions';\nimport { take, put, all, fork, call } from 'redux-saga/effects';\nimport clientRequests from '../../apiUtil/requests/clientRequests';\nimport { getFetchedProductsData } from './helper';\nexport function* watchPopulateProductView() {\n  while (true) {\n    const {\n      productViewData\n    } = yield take(actionTypes.POPULATE_PRODUCT_VIEW);\n    yield put(actions.populateProductViewSuccess(productViewData));\n  }\n}\nexport function* watchOpenProductView() {\n  while (true) {\n    yield take(actionTypes.OPEN_PRODUCT_DETAIL_VIEW);\n    yield put(actions.openProductDetailViewSuccess());\n  }\n}\nexport function* watcherClientFilterStatus() {\n  while (true) {\n    const {\n      status\n    } = yield take(actionTypes.HAS_FILTERS_SET_FROM_CLIENT);\n    yield put(actions.setClientFilterStatusSuccess(status));\n  }\n}\nexport function* watcherSetLoading() {\n  while (true) {\n    const {\n      status\n    } = yield take(actionTypes.SET_LOADING);\n    yield put(actions.setLoadingSuccess(status));\n  }\n}\nexport function* watchFetchProducts() {\n  while (true) {\n    const {\n      section,\n      productType,\n      productCountStart,\n      productCountEnd,\n      filters,\n      incrementExistingProducts\n    } = yield take(actionTypes.FETCH_PRODUCTS_LISTING);\n    const {\n      categoryData\n    } = yield call(clientRequests.getProductData, section, productType, productCountStart, productCountEnd, filters);\n    const {\n      data: fetchedProducts,\n      totalProductsInCategory\n    } = getFetchedProductsData(categoryData);\n    if (!fetchedProducts) return null;\n    yield put(actions.setLoadingSuccess(false));\n    yield put(actions.fetchProductsSuccess(fetchedProducts, productCountStart, productCountEnd, incrementExistingProducts, totalProductsInCategory));\n  }\n}\nexport function* watchFetchProductsInSearch() {\n  while (true) {\n    const {\n      searchValues,\n      productCountStart,\n      productCountEnd,\n      searchFilters,\n      incrementExistingProducts\n    } = yield take(actionTypes.FETCH_PRODUCTS_IN_SEARCH);\n    const {\n      searchData\n    } = yield call(clientRequests.getSearchData, searchValues, productCountStart, productCountEnd, searchFilters);\n    const {\n      data: fetchedProducts,\n      totalProductsInCategory\n    } = getFetchedProductsData(searchData);\n\n    if (!fetchedProducts) {\n      return null;\n    }\n\n    yield put(actions.setLoadingSuccess(false));\n    yield put(actions.fetchProductsSuccess(fetchedProducts, productCountStart, productCountEnd, incrementExistingProducts, totalProductsInCategory));\n  }\n}\nexport function* watcherClearFetchedProducts() {\n  while (true) {\n    yield take(actionTypes.CLEAR_FETCHED_PRODUCTS);\n    yield put(actions.clearClientFetchedProductsSuccess());\n  }\n}\nexport default function* rootSaga() {\n  yield all([fork(watchPopulateProductView), fork(watchOpenProductView), fork(watchFetchProducts), fork(watcherClientFilterStatus), fork(watcherSetLoading), fork(watchFetchProductsInSearch), fork(watcherClearFetchedProducts)]);\n}","map":{"version":3,"sources":["/Users/justincoulston/Desktop/affilaite-core-mono/packages/app/containers/ListingContent/saga.js"],"names":["actions","actionTypes","take","put","all","fork","call","clientRequests","getFetchedProductsData","watchPopulateProductView","productViewData","POPULATE_PRODUCT_VIEW","populateProductViewSuccess","watchOpenProductView","OPEN_PRODUCT_DETAIL_VIEW","openProductDetailViewSuccess","watcherClientFilterStatus","status","HAS_FILTERS_SET_FROM_CLIENT","setClientFilterStatusSuccess","watcherSetLoading","SET_LOADING","setLoadingSuccess","watchFetchProducts","section","productType","productCountStart","productCountEnd","filters","incrementExistingProducts","FETCH_PRODUCTS_LISTING","categoryData","getProductData","data","fetchedProducts","totalProductsInCategory","fetchProductsSuccess","watchFetchProductsInSearch","searchValues","searchFilters","FETCH_PRODUCTS_IN_SEARCH","searchData","getSearchData","watcherClearFetchedProducts","CLEAR_FETCHED_PRODUCTS","clearClientFetchedProductsSuccess","rootSaga"],"mappings":"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","sourcesContent":["//@flow\nimport { actions, actionTypes } from './actions';\nimport { take, put, all, fork, call } from 'redux-saga/effects';\nimport clientRequests from '../../apiUtil/requests/clientRequests';\nimport { getFetchedProductsData } from './helper';\nimport { type Saga } from '@types/redux';\n\nexport function* watchPopulateProductView(): Saga {\n  while (true) {\n    const { productViewData } = yield take(actionTypes.POPULATE_PRODUCT_VIEW);\n    yield put(actions.populateProductViewSuccess(productViewData));\n  }\n}\n\nexport function* watchOpenProductView(): Saga {\n  while (true) {\n    yield take(actionTypes.OPEN_PRODUCT_DETAIL_VIEW);\n    yield put(actions.openProductDetailViewSuccess());\n  }\n}\n\nexport function* watcherClientFilterStatus(): Saga {\n  while (true) {\n    const { status } = yield take(actionTypes.HAS_FILTERS_SET_FROM_CLIENT);\n    yield put(actions.setClientFilterStatusSuccess(status));\n  }\n}\n\nexport function* watcherSetLoading(): Saga {\n  while (true) {\n    const { status } = yield take(actionTypes.SET_LOADING);\n    yield put(actions.setLoadingSuccess(status));\n  }\n}\n\nexport function* watchFetchProducts(): Saga {\n  while (true) {\n    const {\n      section,\n      productType,\n      productCountStart,\n      productCountEnd,\n      filters,\n      incrementExistingProducts,\n    } = yield take(actionTypes.FETCH_PRODUCTS_LISTING);\n\n    const { categoryData } = yield call(\n      clientRequests.getProductData,\n      section,\n      productType,\n      productCountStart,\n      productCountEnd,\n      filters\n    );\n\n    const { data: fetchedProducts, totalProductsInCategory } = getFetchedProductsData(categoryData);\n    if (!fetchedProducts) return null;\n\n    yield put(actions.setLoadingSuccess(false));\n    yield put(\n      actions.fetchProductsSuccess(\n        fetchedProducts,\n        productCountStart,\n        productCountEnd,\n        incrementExistingProducts,\n        totalProductsInCategory\n      )\n    );\n  }\n}\n\nexport function* watchFetchProductsInSearch(): Saga {\n  while (true) {\n    const {\n      searchValues,\n      productCountStart,\n      productCountEnd,\n      searchFilters,\n      incrementExistingProducts,\n    } = yield take(actionTypes.FETCH_PRODUCTS_IN_SEARCH);\n\n    const { searchData } = yield call(\n      clientRequests.getSearchData,\n      searchValues,\n      productCountStart,\n      productCountEnd,\n      searchFilters\n    );\n\n    const { data: fetchedProducts, totalProductsInCategory } = getFetchedProductsData(searchData);\n    if (!fetchedProducts) {\n      return null;\n    }\n\n    yield put(actions.setLoadingSuccess(false));\n    yield put(\n      actions.fetchProductsSuccess(\n        fetchedProducts,\n        productCountStart,\n        productCountEnd,\n        incrementExistingProducts,\n        totalProductsInCategory\n      )\n    );\n  }\n}\n\nexport function* watcherClearFetchedProducts(): Saga {\n  while (true) {\n    yield take(actionTypes.CLEAR_FETCHED_PRODUCTS);\n    yield put(actions.clearClientFetchedProductsSuccess());\n  }\n}\n\nexport default function* rootSaga(): Saga {\n  yield all([\n    fork(watchPopulateProductView),\n    fork(watchOpenProductView),\n    fork(watchFetchProducts),\n    fork(watcherClientFilterStatus),\n    fork(watcherSetLoading),\n    fork(watchFetchProductsInSearch),\n    fork(watcherClearFetchedProducts),\n  ]);\n}\n"]},"metadata":{},"sourceType":"module"}