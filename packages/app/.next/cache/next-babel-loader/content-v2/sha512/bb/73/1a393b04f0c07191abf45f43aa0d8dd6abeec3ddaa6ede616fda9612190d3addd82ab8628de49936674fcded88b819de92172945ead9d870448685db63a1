{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nvar __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport React from 'react';\nimport Grid from '@material-ui/core/Grid';\nimport Divider from '@material-ui/core/Divider';\nimport Link from 'next/link';\nimport Typography from '@units/Typography';\nimport Card from '@units/Card';\nimport { SubNavTitle, MobileMenuItem, MobileLink } from './styles';\nimport { NavCard } from '../MobileNavigation/styles';\nimport ChevronRightIcon from '@material-ui/icons/ChevronRight';\nimport { PLP_PATH } from '@constants';\nexport default function SubNavContainers({\n  title,\n  titleIndex,\n  subNav,\n  setNavigationExpandedLevel,\n  setMobileNavigationActiveTitleIndex,\n  mobileNavigationActiveTitleIndex,\n  navigationExpandedLevel,\n  setNavigationBreadCrumb,\n  mobileFirstLevelNavLink,\n  mobileSecondLevelNavLink,\n  mobileNavHorizontalLayers,\n  mobileNavCardPadding,\n  togglMobileNav,\n  resetProductFeeds\n}) {\n  const handleNavExpanded = (activeIndex, level, title) => {\n    setNavigationBreadCrumb(state => _objectSpread(_objectSpread({}, state), {}, {\n      [level]: title\n    }));\n    setNavigationExpandedLevel(level);\n    setMobileNavigationActiveTitleIndex(activeIndex);\n  };\n\n  const isThirdLevel = navigationExpandedLevel === 2;\n  const isSecondLevel = navigationExpandedLevel === 1;\n  const isActive = mobileNavigationActiveTitleIndex === titleIndex;\n  const isThreeLayeredMobileNav = mobileNavHorizontalLayers === 3;\n  const isLastLayerActive = isThreeLayeredMobileNav ? isThirdLevel : isSecondLevel;\n\n  const handleNavItemClick = () => {\n    togglMobileNav(false);\n    resetProductFeeds();\n  }; // First / top level\n\n\n  const renderFirstLevelNav = () => __jsx(NavCard, {\n    item: true,\n    xs: 4,\n    onClick: () => handleNavExpanded(titleIndex, 1, title)\n  }, __jsx(Card, {\n    padding: mobileNavCardPadding\n  }, __jsx(Grid, {\n    container: true,\n    alignItems: \"center\",\n    justify: \"space-between\"\n  }, __jsx(Typography, {\n    tag: \"h3\",\n    typeStyles: mobileFirstLevelNavLink\n  }, title), __jsx(ChevronRightIcon, null)))); // Labels\n\n\n  const renderLabels = title => __jsx(Grid, {\n    item: true,\n    xs: true\n  }, __jsx(NavCard, {\n    onClick: () => handleNavExpanded(titleIndex, 2, title)\n  }, isSecondLevel && __jsx(Card, {\n    padding: mobileNavCardPadding\n  }, __jsx(Grid, {\n    container: true,\n    alignItems: \"center\",\n    justify: \"space-between\"\n  }, __jsx(Typography, {\n    tag: \"h3\",\n    typeStyles: mobileSecondLevelNavLink\n  }, title), __jsx(ChevronRightIcon, null))))); // Nav links\n\n\n  const renderNavLinks = (subNavItems, title) => __jsx(Grid, {\n    item: true,\n    xs: true\n  }, !isThreeLayeredMobileNav && __jsx(MobileMenuItem, null, __jsx(Typography, {\n    tag: \"h3\",\n    typeStyles: mobileSecondLevelNavLink\n  }, title)), isLastLayerActive && subNavItems.map(({\n    title,\n    link\n  }, index) => __jsx(React.Fragment, null, __jsx(MobileMenuItem, {\n    key: `StyledMenuItem${index}`\n  }, __jsx(MobileLink, {\n    onClick: handleNavItemClick\n  }, __jsx(Link, {\n    href: `/${PLP_PATH}/[...slug]`,\n    as: `/${PLP_PATH}${link}`\n  }, title))), __jsx(Divider, null))));\n\n  return __jsx(React.Fragment, null, (!navigationExpandedLevel || isActive) && __jsx(SubNavTitle, {\n    container: true,\n    item: true\n  }, renderFirstLevelNav(), __jsx(Grid, {\n    container: true,\n    item: true,\n    xs: 8,\n    direction: \"column\"\n  }, subNav.map(({\n    title,\n    subNavItems\n  }, index) => __jsx(Grid, {\n    item: true,\n    xs: true,\n    container: true,\n    key: index\n  }, isThreeLayeredMobileNav && renderLabels(title), renderNavLinks(subNavItems, title))))));\n}","map":null,"metadata":{},"sourceType":"module"}