{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/extends\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nvar __jsx = React.createElement;\nimport React, { useState, useEffect } from 'react';\nimport ProductListingItem from '@units/ProductListingItem';\nimport Grid from '@material-ui/core/Grid';\nimport Typography from '@units/Typography';\nimport Flicker from '@units/Flicker';\nimport { NoMoreProductsFlicker, FlickerFilters } from './styles';\nimport { VIEW_MODE } from '@constants';\nimport FavoriteIcon from '@material-ui/icons/Favorite';\nimport ClearIcon from '@material-ui/icons/Clear';\nimport Image from '@units/Image';\nimport Modal from '@units/Modal';\nimport NoMoreProductsIndicator from './NoMoreProductsIndicator';\nimport Drawer from '@units/Drawer';\nimport { Filters } from '@modules/Filters';\nimport { Actionable } from '@styles/CommonStyledComponents';\nexport default function ProductFlickView(_ref) {\n  let {\n    isFlickView,\n    setViewMode,\n    flickViewTitleCopy,\n    flickViewTitleText,\n    wishListAction,\n    openCardAction,\n    allProducts,\n    showNoMoreProducts,\n    noMoreProductsCopyText,\n    openCardActionMemo,\n    loadMoreProducts,\n    filterProps\n  } = _ref,\n      listingItemProps = _objectWithoutProperties(_ref, [\"isFlickView\", \"setViewMode\", \"flickViewTitleCopy\", \"flickViewTitleText\", \"wishListAction\", \"openCardAction\", \"allProducts\", \"showNoMoreProducts\", \"noMoreProductsCopyText\", \"openCardActionMemo\", \"loadMoreProducts\", \"filterProps\"]);\n\n  const {\n    0: flickModalOpen,\n    1: setFlickModalOpen\n  } = useState(true);\n  const {\n    0: noMoreFlickerCards,\n    1: setNoMoreFlickerCards\n  } = useState(false);\n\n  const flickerEndCallback = () => {\n    if (showNoMoreProducts) {\n      setNoMoreFlickerCards(true);\n    } else {\n      loadMoreProducts();\n    }\n  };\n\n  useEffect(() => {\n    setNoMoreFlickerCards(false);\n  }, [allProducts.length]);\n  return __jsx(React.Fragment, null, __jsx(Drawer, {\n    anchor: 'bottom',\n    open: isFlickView,\n    fullHeight: true,\n    width: 100,\n    iconCloseClick: () => setViewMode(VIEW_MODE.GRID_MODE),\n    onClose: () => setViewMode(VIEW_MODE.GRID_MODE)\n  }, __jsx(FlickerFilters, null, __jsx(Actionable, {\n    \"aria-label\": \"filters\"\n  }, __jsx(Filters, _extends({}, filterProps, filterProps.filterMethods)))), __jsx(Grid, {\n    container: true,\n    justify: \"center\"\n  }, __jsx(Typography, {\n    tag: \"h3\",\n    typeStyles: flickViewTitleCopy\n  }, flickViewTitleText)), __jsx(Modal, {\n    showOnce: true,\n    open: flickModalOpen,\n    setOpen: setFlickModalOpen,\n    modalKey: \"flick-modal\",\n    modalTitle: \"Fliik view\"\n  }, __jsx(Image, {\n    src: \"flick-instructions.png\",\n    maxWidth: \"434px\"\n  })), !noMoreFlickerCards ? __jsx(Flicker, {\n    preventSwipe: ['down'],\n    SwipeIconRight: __jsx(FavoriteIcon, {\n      color: \"primary\"\n    }),\n    SwipeIconLeft: __jsx(ClearIcon, {\n      color: \"primary\"\n    }),\n    onSwipeCallback: (direction, product) => {\n      if (direction === 'right') wishListAction(product);\n      if (direction === 'up') openCardAction(product);\n    },\n    onEndCallback: () => flickerEndCallback(),\n    dataMap: allProducts,\n    isLastDataMap: showNoMoreProducts,\n    Component: __jsx(ProductListingItem, listingItemProps)\n  }) : __jsx(NoMoreProductsFlicker, null, __jsx(NoMoreProductsIndicator, {\n    text: noMoreProductsCopyText\n  }))), __jsx(Grid, {\n    container: true,\n    justify: \"center\"\n  }, allProducts.map((product, index) => __jsx(ProductListingItem, _extends({\n    hasWishListAction: true,\n    onCardClick: openCardActionMemo(product)\n  }, product, listingItemProps, {\n    key: index\n  })))));\n}","map":null,"metadata":{},"sourceType":"module"}