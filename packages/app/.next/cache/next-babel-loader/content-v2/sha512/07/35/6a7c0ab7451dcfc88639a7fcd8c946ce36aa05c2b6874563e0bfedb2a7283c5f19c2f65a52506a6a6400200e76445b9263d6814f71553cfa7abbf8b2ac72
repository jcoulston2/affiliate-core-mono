{"ast":null,"code":"export { config } from '../../../apiUtil';\nimport predictiveSearch from '@affiliate-master/store';\nimport { commonMultiMatch } from '@helpers/common';\nimport { baseMiddleware } from '@server/middleware';\n\nfunction predictiveSearchFilter(terms) {\n  const result = predictiveSearch.filter(({\n    brand,\n    section,\n    productColor,\n    keyTerm,\n    category\n  }) => {\n    const termsArray = terms.split(' ');\n    return commonMultiMatch(termsArray, termItem => (brand === null || brand === void 0 ? void 0 : brand.includes(termItem)) || (section === null || section === void 0 ? void 0 : section.includes(termItem)) || (productColor === null || productColor === void 0 ? void 0 : productColor.includes(termItem)) || (keyTerm === null || keyTerm === void 0 ? void 0 : keyTerm.includes(termItem)) || (category === null || category === void 0 ? void 0 : category.includes(termItem)));\n  });\n  return result;\n}\n\nconst handler = {\n  error: (req, res) => {\n    res.status(404).send();\n  },\n\n  /**\n   * @endpoint /predictive-search\n   */\n  search: async (req, res) => {\n    var _req$query;\n\n    const terms = (_req$query = req.query) === null || _req$query === void 0 ? void 0 : _req$query.terms;\n\n    if (req.method === 'GET' && terms) {\n      return res.json(predictiveSearchFilter(terms));\n    } else {\n      handler.error(req, res);\n    }\n  }\n};\nexport default async function handle(req, res) {\n  await baseMiddleware(req, res);\n  return handler.search(req, res);\n}","map":null,"metadata":{},"sourceType":"module"}