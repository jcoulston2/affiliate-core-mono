{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/extends\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nvar __jsx = React.createElement;\nimport React from 'react';\nimport { useTheme } from '@material-ui/core/styles';\nimport Navigation from '@modules/Navigation';\nimport BenefitBar from '@modules/BenefitBar';\nimport { connect } from 'react-redux';\nimport { actions as headerActions } from './actions';\nimport { actions as listingActions } from '@containers/ListingContent/actions';\nimport { useCms } from '@hooks';\nimport { HeaderWrapper } from './styles';\nimport useMediaQuery from '@material-ui/core/useMediaQuery';\n\nconst Header = (_ref) => {\n  let {\n    navigationData,\n    mobileMenuOpen,\n    togglMobileNav,\n    resetProductFeeds\n  } = _ref,\n      topLevelAppState = _objectWithoutProperties(_ref, [\"navigationData\", \"mobileMenuOpen\", \"togglMobileNav\", \"resetProductFeeds\"]);\n\n  // TODO: start to migrate CMS config further down the component instead of passing props down\n  const {\n    benefitBar: benefitBarConfig,\n    navigation: navigationConfig,\n    headerBar: headerBarConfig\n  } = useCms('header');\n  const muiTheme = useTheme();\n  const {\n    headerSeparatorStyle,\n    headerSeparatorColor\n  } = headerBarConfig;\n  const isDesktop = useMediaQuery(muiTheme.breakpoints.up('lg'));\n\n  const renderAdaptiveNavigation = device => {\n    let adaptiveNavigationProp = '';\n    if (device === 'mobile') adaptiveNavigationProp = 'isMobileNavigation';\n    if (device === 'desktop') adaptiveNavigationProp = 'isDesktopNavigation';\n    return __jsx(Navigation, _extends({\n      [adaptiveNavigationProp]: true\n    }, {\n      navigationData,\n      togglMobileNav,\n      mobileMenuOpen,\n      resetProductFeeds\n    }, navigationConfig));\n  };\n\n  return __jsx(HeaderWrapper, {\n    headerSeparatorStyle,\n    headerSeparatorColor\n  }, benefitBarConfig.showBenefitbar && __jsx(BenefitBar, _extends({}, benefitBarConfig, topLevelAppState)), renderAdaptiveNavigation(isDesktop ? 'desktop' : 'mobile'));\n};\n\nfunction mapDispatchToProps(dispatch) {\n  return {\n    togglMobileNav: flag => dispatch(headerActions.togglMobileNav(flag)),\n    resetProductFeeds: () => dispatch(listingActions.clearClientFetchedProducts())\n  };\n}\n\nexport default connect(state => {\n  const {\n    globalAppState,\n    headerState,\n    buildTimeState\n  } = state;\n  const {\n    clientWidth\n  } = globalAppState;\n  const {\n    navigationData\n  } = buildTimeState;\n  const {\n    mobileMenuOpen\n  } = headerState;\n  return {\n    clientWidth,\n    navigationData,\n    mobileMenuOpen\n  };\n}, mapDispatchToProps)(Header);","map":null,"metadata":{},"sourceType":"module"}