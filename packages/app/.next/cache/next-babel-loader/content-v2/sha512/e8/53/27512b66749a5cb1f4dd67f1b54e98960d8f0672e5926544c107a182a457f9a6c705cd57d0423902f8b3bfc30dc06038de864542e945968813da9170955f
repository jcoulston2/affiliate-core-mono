{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\n\nvar _marked = /*#__PURE__*/_regeneratorRuntime.mark(watcherSetWishList),\n    _marked2 = /*#__PURE__*/_regeneratorRuntime.mark(watcherRemoveWishList),\n    _marked3 = /*#__PURE__*/_regeneratorRuntime.mark(rootSaga);\n\nimport { actions, actionTypes } from './actions';\nimport { take, put, all, fork } from 'redux-saga/effects';\nexport function watcherSetWishList() {\n  var _yield$take, product;\n\n  return _regeneratorRuntime.wrap(function watcherSetWishList$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          if (!true) {\n            _context.next = 9;\n            break;\n          }\n\n          _context.next = 3;\n          return take(actionTypes.ADD_PRODUCT_TO_WISHLIST);\n\n        case 3:\n          _yield$take = _context.sent;\n          product = _yield$take.product;\n          _context.next = 7;\n          return put(actions.addProductToWishListSuccess(product));\n\n        case 7:\n          _context.next = 0;\n          break;\n\n        case 9:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, _marked);\n}\nexport function watcherRemoveWishList() {\n  var _yield$take2, productLink;\n\n  return _regeneratorRuntime.wrap(function watcherRemoveWishList$(_context2) {\n    while (1) {\n      switch (_context2.prev = _context2.next) {\n        case 0:\n          if (!true) {\n            _context2.next = 9;\n            break;\n          }\n\n          _context2.next = 3;\n          return take(actionTypes.REMOVE_PRODUCT_FROM_WISHLIST);\n\n        case 3:\n          _yield$take2 = _context2.sent;\n          productLink = _yield$take2.productLink;\n          _context2.next = 7;\n          return put(actions.removeProductfromWishListSuccess(productLink));\n\n        case 7:\n          _context2.next = 0;\n          break;\n\n        case 9:\n        case \"end\":\n          return _context2.stop();\n      }\n    }\n  }, _marked2);\n}\nexport default function rootSaga() {\n  return _regeneratorRuntime.wrap(function rootSaga$(_context3) {\n    while (1) {\n      switch (_context3.prev = _context3.next) {\n        case 0:\n          _context3.next = 2;\n          return all([fork(watcherSetWishList), fork(watcherRemoveWishList)]);\n\n        case 2:\n        case \"end\":\n          return _context3.stop();\n      }\n    }\n  }, _marked3);\n}","map":{"version":3,"sources":["/Users/justincoulston/Desktop/affilaite-core-mono/packages/app/containers/WishList/saga.js"],"names":["watcherSetWishList","watcherRemoveWishList","rootSaga","actions","actionTypes","take","put","all","fork","ADD_PRODUCT_TO_WISHLIST","product","addProductToWishListSuccess","REMOVE_PRODUCT_FROM_WISHLIST","productLink","removeProductfromWishListSuccess"],"mappings":";;oDAKiBA,kB;qDAOAC,qB;qDAOQC,Q;;AAlBzB,SAASC,OAAT,EAAkBC,WAAlB,QAAqC,WAArC;AACA,SAASC,IAAT,EAAeC,GAAf,EAAoBC,GAApB,EAAyBC,IAAzB,QAAqC,oBAArC;AAGA,OAAO,SAAUR,kBAAV;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA,eACE,IADF;AAAA;AAAA;AAAA;;AAAA;AAEiB,iBAAMK,IAAI,CAACD,WAAW,CAACK,uBAAb,CAAV;;AAFjB;AAAA;AAEKC,UAAAA,OAFL,eAEKA,OAFL;AAAA;AAGH,iBAAMJ,GAAG,CAACH,OAAO,CAACQ,2BAAR,CAAoCD,OAApC,CAAD,CAAT;;AAHG;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAOP,OAAO,SAAUT,qBAAV;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA,eACE,IADF;AAAA;AAAA;AAAA;;AAAA;AAEqB,iBAAMI,IAAI,CAACD,WAAW,CAACQ,4BAAb,CAAV;;AAFrB;AAAA;AAEKC,UAAAA,WAFL,gBAEKA,WAFL;AAAA;AAGH,iBAAMP,GAAG,CAACH,OAAO,CAACW,gCAAR,CAAyCD,WAAzC,CAAD,CAAT;;AAHG;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAOP,eAAe,SAAUX,QAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AACb,iBAAMK,GAAG,CAAC,CAACC,IAAI,CAACR,kBAAD,CAAL,EAA2BQ,IAAI,CAACP,qBAAD,CAA/B,CAAD,CAAT;;AADa;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA","sourcesContent":["//@flow\nimport { actions, actionTypes } from './actions';\nimport { take, put, all, fork } from 'redux-saga/effects';\nimport { type Saga } from '@types/redux';\n\nexport function* watcherSetWishList(): Saga {\n  while (true) {\n    const { product } = yield take(actionTypes.ADD_PRODUCT_TO_WISHLIST);\n    yield put(actions.addProductToWishListSuccess(product));\n  }\n}\n\nexport function* watcherRemoveWishList(): Saga {\n  while (true) {\n    const { productLink } = yield take(actionTypes.REMOVE_PRODUCT_FROM_WISHLIST);\n    yield put(actions.removeProductfromWishListSuccess(productLink));\n  }\n}\n\nexport default function* rootSaga(): Saga {\n  yield all([fork(watcherSetWishList), fork(watcherRemoveWishList)]);\n}\n"]},"metadata":{},"sourceType":"module"}