{"ast":null,"code":"var __jsx = React.createElement;\nimport React, { useEffect, useState, useRef } from 'react';\nimport styled from 'styled-components';\nimport { StyledCmsGrid } from '@styles/CommonStyledComponents';\nimport { shadowBottom } from '@styles/commonStyles';\nconst StickHeaderWrapper = styled.div.withConfig({\n  displayName: \"StickyHeader__StickHeaderWrapper\",\n  componentId: \"sc-1jsa0sh-0\"\n})([\"width:100%;\", \" \", \"\"], ({\n  sticky,\n  height\n}) => sticky && `    \n    height: ${height}px;    \n    > ${StyledCmsGrid} {      \n      position: fixed;\n      z-index: 99;\n      width: 100%;\n      top: 0px;  \n      left: 0px;\n      ${shadowBottom}\n    }  \n  `, ({\n  background\n}) => background && `\n    > div {\n      background ${background};\n    }\n    \n  `);\nexport default function StickyHeader({\n  children,\n  background,\n  padding\n}) {\n  var _ref$current;\n\n  const ref = useRef(null);\n  const {\n    0: sticky,\n    1: setSticky\n  } = useState(false);\n\n  const handleScroll = () => {\n    document.addEventListener('scroll', () => {\n      if (ref !== null && ref !== void 0 && ref.current) {\n        setSticky(ref.current.getBoundingClientRect().top < 0);\n      }\n    });\n  };\n\n  useEffect(() => {\n    handleScroll();\n  }, []);\n  return __jsx(StickHeaderWrapper, {\n    height: (_ref$current = ref.current) === null || _ref$current === void 0 ? void 0 : _ref$current.clientHeight,\n    background: background,\n    sticky: sticky,\n    ref: ref\n  }, __jsx(StyledCmsGrid, sticky ? {\n    padding\n  } : {}, children));\n}","map":null,"metadata":{},"sourceType":"module"}