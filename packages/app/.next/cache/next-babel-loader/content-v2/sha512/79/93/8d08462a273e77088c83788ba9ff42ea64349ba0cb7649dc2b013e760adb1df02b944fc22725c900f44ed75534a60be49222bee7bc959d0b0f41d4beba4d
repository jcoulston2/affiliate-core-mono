{"ast":null,"code":"import _asyncToGenerator from \"/Users/justincoulston/Desktop/affilaite-core-mono/node_modules/next/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _defineProperty from \"/Users/justincoulston/Desktop/affilaite-core-mono/node_modules/next/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport gql from 'graphql-tag';\nimport { PRODUCTS_API_END_POINT, PREDICTIVE_SEARCH_API_END_POINT } from '@constants';\nimport { productQuery, searchQuery } from '../../graphQL/graphqlQueries';\nimport proxy from '../proxy'; // NOTE: this utility is intended for pages making requests via any client side requests. We should never include the store\n// cache in this file as it will be included inside the JS bundle\n\nexport default {\n  getProductData: function getProductData(section, productType, productCountStart, productCountEnd, filters) {\n    var query = \"\".concat(productQuery);\n    return proxy().graphQl(PRODUCTS_API_END_POINT, query, _objectSpread({\n      section: section,\n      productType: productType,\n      productCountStart: productCountStart,\n      productCountEnd: productCountEnd\n    }, filters));\n  },\n  getSearchData: function getSearchData(searchValues, productCountStart, productCountEnd, filters) {\n    var query = \"\".concat(searchQuery);\n    return proxy().graphQl(PRODUCTS_API_END_POINT, query, _objectSpread(_objectSpread(_objectSpread({}, searchValues), filters), {}, {\n      productCountStart: productCountStart,\n      productCountEnd: productCountEnd\n    }));\n  },\n  getPredictiveSearch: function () {\n    var _getPredictiveSearch = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(keyTerm) {\n      var result;\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _context.next = 2;\n              return proxy().get(PREDICTIVE_SEARCH_API_END_POINT, \"?terms=\".concat(keyTerm), {\n                'content-type': 'application/x-www-form-urlencoded;charset=utf-8'\n              });\n\n            case 2:\n              result = _context.sent;\n              return _context.abrupt(\"return\", result.data);\n\n            case 4:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee);\n    }));\n\n    function getPredictiveSearch(_x) {\n      return _getPredictiveSearch.apply(this, arguments);\n    }\n\n    return getPredictiveSearch;\n  }()\n};","map":null,"metadata":{},"sourceType":"module"}