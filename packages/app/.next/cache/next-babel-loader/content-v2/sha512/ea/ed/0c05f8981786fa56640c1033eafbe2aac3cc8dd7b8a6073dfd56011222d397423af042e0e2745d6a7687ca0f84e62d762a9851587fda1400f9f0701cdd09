{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\n\nvar _marked = /*#__PURE__*/_regeneratorRuntime.mark(watchPopulateProductView),\n    _marked2 = /*#__PURE__*/_regeneratorRuntime.mark(watchOpenProductView),\n    _marked3 = /*#__PURE__*/_regeneratorRuntime.mark(watcherClientFilterStatus),\n    _marked4 = /*#__PURE__*/_regeneratorRuntime.mark(watcherSetLoading),\n    _marked5 = /*#__PURE__*/_regeneratorRuntime.mark(watchFetchProducts),\n    _marked6 = /*#__PURE__*/_regeneratorRuntime.mark(watchFetchProductsInSearch),\n    _marked7 = /*#__PURE__*/_regeneratorRuntime.mark(watcherClearFetchedProducts),\n    _marked8 = /*#__PURE__*/_regeneratorRuntime.mark(rootSaga);\n\nimport { actions, actionTypes } from './actions';\nimport { take, put, all, fork, call } from 'redux-saga/effects';\nimport clientRequests from '../../apiUtil/requests/clientRequests';\nimport { getFetchedProductsData } from './helper';\nexport function watchPopulateProductView() {\n  var _yield$take, productViewData;\n\n  return _regeneratorRuntime.wrap(function watchPopulateProductView$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          if (!true) {\n            _context.next = 9;\n            break;\n          }\n\n          _context.next = 3;\n          return take(actionTypes.POPULATE_PRODUCT_VIEW);\n\n        case 3:\n          _yield$take = _context.sent;\n          productViewData = _yield$take.productViewData;\n          _context.next = 7;\n          return put(actions.populateProductViewSuccess(productViewData));\n\n        case 7:\n          _context.next = 0;\n          break;\n\n        case 9:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, _marked);\n}\nexport function watchOpenProductView() {\n  return _regeneratorRuntime.wrap(function watchOpenProductView$(_context2) {\n    while (1) {\n      switch (_context2.prev = _context2.next) {\n        case 0:\n          if (!true) {\n            _context2.next = 7;\n            break;\n          }\n\n          _context2.next = 3;\n          return take(actionTypes.OPEN_PRODUCT_DETAIL_VIEW);\n\n        case 3:\n          _context2.next = 5;\n          return put(actions.openProductDetailViewSuccess());\n\n        case 5:\n          _context2.next = 0;\n          break;\n\n        case 7:\n        case \"end\":\n          return _context2.stop();\n      }\n    }\n  }, _marked2);\n}\nexport function watcherClientFilterStatus() {\n  var _yield$take2, status;\n\n  return _regeneratorRuntime.wrap(function watcherClientFilterStatus$(_context3) {\n    while (1) {\n      switch (_context3.prev = _context3.next) {\n        case 0:\n          if (!true) {\n            _context3.next = 9;\n            break;\n          }\n\n          _context3.next = 3;\n          return take(actionTypes.HAS_FILTERS_SET_FROM_CLIENT);\n\n        case 3:\n          _yield$take2 = _context3.sent;\n          status = _yield$take2.status;\n          _context3.next = 7;\n          return put(actions.setClientFilterStatusSuccess(status));\n\n        case 7:\n          _context3.next = 0;\n          break;\n\n        case 9:\n        case \"end\":\n          return _context3.stop();\n      }\n    }\n  }, _marked3);\n}\nexport function watcherSetLoading() {\n  var _yield$take3, status;\n\n  return _regeneratorRuntime.wrap(function watcherSetLoading$(_context4) {\n    while (1) {\n      switch (_context4.prev = _context4.next) {\n        case 0:\n          if (!true) {\n            _context4.next = 9;\n            break;\n          }\n\n          _context4.next = 3;\n          return take(actionTypes.SET_LOADING);\n\n        case 3:\n          _yield$take3 = _context4.sent;\n          status = _yield$take3.status;\n          _context4.next = 7;\n          return put(actions.setLoadingSuccess(status));\n\n        case 7:\n          _context4.next = 0;\n          break;\n\n        case 9:\n        case \"end\":\n          return _context4.stop();\n      }\n    }\n  }, _marked4);\n}\nexport function watchFetchProducts() {\n  var _yield$take4, section, productType, productCountStart, productCountEnd, filters, incrementExistingProducts, _yield$call, categoryData, _getFetchedProductsDa, fetchedProducts, totalProductsInCategory;\n\n  return _regeneratorRuntime.wrap(function watchFetchProducts$(_context5) {\n    while (1) {\n      switch (_context5.prev = _context5.next) {\n        case 0:\n          if (!true) {\n            _context5.next = 23;\n            break;\n          }\n\n          _context5.next = 3;\n          return take(actionTypes.FETCH_PRODUCTS_LISTING);\n\n        case 3:\n          _yield$take4 = _context5.sent;\n          section = _yield$take4.section;\n          productType = _yield$take4.productType;\n          productCountStart = _yield$take4.productCountStart;\n          productCountEnd = _yield$take4.productCountEnd;\n          filters = _yield$take4.filters;\n          incrementExistingProducts = _yield$take4.incrementExistingProducts;\n          _context5.next = 12;\n          return call(clientRequests.getProductData, section, productType, productCountStart, productCountEnd, filters);\n\n        case 12:\n          _yield$call = _context5.sent;\n          categoryData = _yield$call.categoryData;\n          _getFetchedProductsDa = getFetchedProductsData(categoryData), fetchedProducts = _getFetchedProductsDa.data, totalProductsInCategory = _getFetchedProductsDa.totalProductsInCategory;\n\n          if (fetchedProducts) {\n            _context5.next = 17;\n            break;\n          }\n\n          return _context5.abrupt(\"return\", null);\n\n        case 17:\n          _context5.next = 19;\n          return put(actions.setLoadingSuccess(false));\n\n        case 19:\n          _context5.next = 21;\n          return put(actions.fetchProductsSuccess(fetchedProducts, productCountStart, productCountEnd, incrementExistingProducts, totalProductsInCategory));\n\n        case 21:\n          _context5.next = 0;\n          break;\n\n        case 23:\n        case \"end\":\n          return _context5.stop();\n      }\n    }\n  }, _marked5);\n}\nexport function watchFetchProductsInSearch() {\n  var _yield$take5, searchValues, productCountStart, productCountEnd, searchFilters, incrementExistingProducts, _yield$call2, searchData, _getFetchedProductsDa2, fetchedProducts, totalProductsInCategory;\n\n  return _regeneratorRuntime.wrap(function watchFetchProductsInSearch$(_context6) {\n    while (1) {\n      switch (_context6.prev = _context6.next) {\n        case 0:\n          if (!true) {\n            _context6.next = 22;\n            break;\n          }\n\n          _context6.next = 3;\n          return take(actionTypes.FETCH_PRODUCTS_IN_SEARCH);\n\n        case 3:\n          _yield$take5 = _context6.sent;\n          searchValues = _yield$take5.searchValues;\n          productCountStart = _yield$take5.productCountStart;\n          productCountEnd = _yield$take5.productCountEnd;\n          searchFilters = _yield$take5.searchFilters;\n          incrementExistingProducts = _yield$take5.incrementExistingProducts;\n          _context6.next = 11;\n          return call(clientRequests.getSearchData, searchValues, productCountStart, productCountEnd, searchFilters);\n\n        case 11:\n          _yield$call2 = _context6.sent;\n          searchData = _yield$call2.searchData;\n          _getFetchedProductsDa2 = getFetchedProductsData(searchData), fetchedProducts = _getFetchedProductsDa2.data, totalProductsInCategory = _getFetchedProductsDa2.totalProductsInCategory;\n\n          if (fetchedProducts) {\n            _context6.next = 16;\n            break;\n          }\n\n          return _context6.abrupt(\"return\", null);\n\n        case 16:\n          _context6.next = 18;\n          return put(actions.setLoadingSuccess(false));\n\n        case 18:\n          _context6.next = 20;\n          return put(actions.fetchProductsSuccess(fetchedProducts, productCountStart, productCountEnd, incrementExistingProducts, totalProductsInCategory));\n\n        case 20:\n          _context6.next = 0;\n          break;\n\n        case 22:\n        case \"end\":\n          return _context6.stop();\n      }\n    }\n  }, _marked6);\n}\nexport function watcherClearFetchedProducts() {\n  return _regeneratorRuntime.wrap(function watcherClearFetchedProducts$(_context7) {\n    while (1) {\n      switch (_context7.prev = _context7.next) {\n        case 0:\n          if (!true) {\n            _context7.next = 7;\n            break;\n          }\n\n          _context7.next = 3;\n          return take(actionTypes.CLEAR_FETCHED_PRODUCTS);\n\n        case 3:\n          _context7.next = 5;\n          return put(actions.clearClientFetchedProductsSuccess());\n\n        case 5:\n          _context7.next = 0;\n          break;\n\n        case 7:\n        case \"end\":\n          return _context7.stop();\n      }\n    }\n  }, _marked7);\n}\nexport default function rootSaga() {\n  return _regeneratorRuntime.wrap(function rootSaga$(_context8) {\n    while (1) {\n      switch (_context8.prev = _context8.next) {\n        case 0:\n          _context8.next = 2;\n          return all([fork(watchPopulateProductView), fork(watchOpenProductView), fork(watchFetchProducts), fork(watcherClientFilterStatus), fork(watcherSetLoading), fork(watchFetchProductsInSearch), fork(watcherClearFetchedProducts)]);\n\n        case 2:\n        case \"end\":\n          return _context8.stop();\n      }\n    }\n  }, _marked8);\n}","map":null,"metadata":{},"sourceType":"module"}