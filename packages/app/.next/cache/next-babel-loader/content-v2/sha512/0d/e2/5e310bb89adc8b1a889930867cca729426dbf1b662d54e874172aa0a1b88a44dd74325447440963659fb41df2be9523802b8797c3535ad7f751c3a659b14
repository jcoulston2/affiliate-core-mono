{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/extends\";\nvar _jsxFileName = \"/Users/justincoulston/Desktop/affilaite-core-mono/packages/app/containers/ListingContent/ListingContent.js\";\nvar __jsx = React.createElement;\nimport React from 'react';\nimport { connect } from 'react-redux';\nimport ProductListing from '@modules/ProductListing';\nimport ProductDetailView from '@modules/ProductDetailView';\nimport ListingHero from '@modules/ListingHero';\nimport { useCms } from '@hooks';\nimport { actions } from './actions';\nimport { Spacer } from '@styles/CommonStyledComponents';\nimport { getProductLink } from '@helpers/page';\n\nconst ListingContent = ({\n  initialProductData,\n  fetchedProducts,\n  fetchProductsInSearch,\n  totalProductsInCategory,\n  productViewOpen,\n  productViewData,\n  populateProductView,\n  openProductDetailView,\n  fetchProducts,\n  productFilters,\n  productSearchValues,\n  hasFiltersSetFromClient,\n  setClientFilterStatus,\n  loading,\n  setLoading\n}) => {\n  const {\n    section,\n    data: sectionData\n  } = initialProductData;\n  const {\n    productListingContent,\n    productViewContent,\n    productListingHeroContent\n  } = useCms('listingContent');\n  const {\n    category,\n    data: initialProducts,\n    totalProductsInCategory: totalFromBuild,\n    categoryLastUpdated\n  } = sectionData[0] || {};\n  const productLink = getProductLink(productViewData); // We need to check the totalProductsInCategory property from both the static prop fetching and the client fetching\n  // for the filter update/fetch functionality. This is used for the 'load more' button on the listing page.\n\n  const totalCategoryProducts = totalProductsInCategory || totalFromBuild; // When we have filters selected, the product fetching will be handled via the client for SPA functionality\n  // this means that we can omit the inital products given via 'getStaticProps' which was executed server-side.\n  // When we clear the filters, we just do a simple page refresh and getStaticProps executes again.\n\n  const initialProductsProps = hasFiltersSetFromClient ? [] : initialProducts || [];\n  return __jsx(\"section\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 5\n    }\n  }, __jsx(ListingHero, _extends({}, productListingHeroContent, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 7\n    }\n  })), __jsx(ProductListing, _extends({}, productListingContent, {\n    section,\n    category,\n    totalCategoryProducts,\n    fetchedProducts,\n    productSearchValues,\n    fetchProductsInSearch,\n    populateProductView,\n    openProductDetailView,\n    fetchProducts,\n    setLoading,\n    loading,\n    productFilters,\n    setClientFilterStatus,\n    initialProducts: initialProductsProps\n  }, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 7\n    }\n  })), __jsx(ProductDetailView, _extends({}, productViewContent, {\n    productViewOpen,\n    productViewData,\n    openProductDetailView,\n    productLink,\n    categoryLastUpdated\n  }, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 97,\n      columnNumber: 7\n    }\n  })), __jsx(Spacer, {\n    h: 20,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 107,\n      columnNumber: 7\n    }\n  }));\n};\n\nfunction mapDispatchToProps(dispatch) {\n  return {\n    populateProductView: productViewData => dispatch(actions.populateProductView(productViewData)),\n    openProductDetailView: () => dispatch(actions.openProductDetailView()),\n    fetchProducts: (...args) => dispatch(actions.fetchProducts(...args)),\n    fetchProductsInSearch: (...args) => dispatch(actions.fetchProductsInSearch(...args)),\n    setClientFilterStatus: status => dispatch(actions.setClientFilterStatus(status)),\n    setLoading: status => dispatch(actions.setLoading(status))\n  };\n}\n\nfunction mapStateToProps({\n  buildTimeState,\n  listingContentState\n}) {\n  const {\n    productData: initialProductData,\n    productFilters,\n    productSearchValues\n  } = buildTimeState;\n  const {\n    productViewData,\n    productViewOpen,\n    fetchedProducts,\n    totalProductsInCategory,\n    hasFiltersSetFromClient,\n    loading\n  } = listingContentState;\n  return {\n    initialProductData,\n    productFilters,\n    productSearchValues,\n    fetchedProducts,\n    totalProductsInCategory,\n    productViewOpen,\n    productViewData,\n    hasFiltersSetFromClient,\n    loading\n  };\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(ListingContent);","map":{"version":3,"sources":["/Users/justincoulston/Desktop/affilaite-core-mono/packages/app/containers/ListingContent/ListingContent.js"],"names":["React","connect","ProductListing","ProductDetailView","ListingHero","useCms","actions","Spacer","getProductLink","ListingContent","initialProductData","fetchedProducts","fetchProductsInSearch","totalProductsInCategory","productViewOpen","productViewData","populateProductView","openProductDetailView","fetchProducts","productFilters","productSearchValues","hasFiltersSetFromClient","setClientFilterStatus","loading","setLoading","section","data","sectionData","productListingContent","productViewContent","productListingHeroContent","category","initialProducts","totalFromBuild","categoryLastUpdated","productLink","totalCategoryProducts","initialProductsProps","mapDispatchToProps","dispatch","args","status","mapStateToProps","buildTimeState","listingContentState","productData"],"mappings":"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","sourcesContent":["//@flow\nimport React from 'react';\nimport { connect } from 'react-redux';\nimport ProductListing from '@modules/ProductListing';\nimport ProductDetailView from '@modules/ProductDetailView';\nimport ListingHero from '@modules/ListingHero';\nimport { useCms } from '@hooks';\nimport { actions } from './actions';\nimport { type ProductData, type ProductSection } from '@types/product';\nimport { type PredictiveSearch } from '@types/search';\nimport { type GlobalState } from '../../types/appState';\nimport { Spacer } from '@styles/CommonStyledComponents';\nimport { getProductLink } from '@helpers/page';\nimport { type Filters } from '@types/product';\n\ntype ListingContentProps = {\n  fetchedProducts: Function,\n  fetchProductsInSearch: Function,\n  totalProductsInCategory: ?number,\n  initialProductData: ProductSection,\n  productFilters: Filters,\n  productSearchValues: PredictiveSearch,\n  productViewOpen: boolean,\n  productViewData: ProductData,\n  populateProductView: Function,\n  openProductDetailView: Function,\n  fetchProducts: Function,\n  setClientFilterStatus: Function,\n  hasFiltersSetFromClient: boolean,\n  setLoading: Function,\n  loading: boolean,\n};\n\nconst ListingContent = ({\n  initialProductData,\n  fetchedProducts,\n  fetchProductsInSearch,\n  totalProductsInCategory,\n  productViewOpen,\n  productViewData,\n  populateProductView,\n  openProductDetailView,\n  fetchProducts,\n  productFilters,\n  productSearchValues,\n  hasFiltersSetFromClient,\n  setClientFilterStatus,\n  loading,\n  setLoading,\n}: ListingContentProps) => {\n  const { section, data: sectionData } = initialProductData;\n  const { productListingContent, productViewContent, productListingHeroContent } = useCms(\n    'listingContent'\n  );\n\n  const {\n    category,\n    data: initialProducts,\n    totalProductsInCategory: totalFromBuild,\n    categoryLastUpdated,\n  } = sectionData[0] || {};\n\n  const productLink = getProductLink(productViewData);\n\n  // We need to check the totalProductsInCategory property from both the static prop fetching and the client fetching\n  // for the filter update/fetch functionality. This is used for the 'load more' button on the listing page.\n  const totalCategoryProducts = totalProductsInCategory || totalFromBuild;\n\n  // When we have filters selected, the product fetching will be handled via the client for SPA functionality\n  // this means that we can omit the inital products given via 'getStaticProps' which was executed server-side.\n  // When we clear the filters, we just do a simple page refresh and getStaticProps executes again.\n  const initialProductsProps = hasFiltersSetFromClient ? [] : initialProducts || [];\n\n  return (\n    <section>\n      <ListingHero {...productListingHeroContent} />\n      <ProductListing\n        {...productListingContent}\n        {...{\n          section,\n          category,\n          totalCategoryProducts,\n          fetchedProducts,\n          productSearchValues,\n          fetchProductsInSearch,\n          populateProductView,\n          openProductDetailView,\n          fetchProducts,\n          setLoading,\n          loading,\n          productFilters,\n          setClientFilterStatus,\n          initialProducts: initialProductsProps,\n        }}\n      />\n\n      <ProductDetailView\n        {...productViewContent}\n        {...{\n          productViewOpen,\n          productViewData,\n          openProductDetailView,\n          productLink,\n          categoryLastUpdated,\n        }}\n      />\n      <Spacer h={20} />\n    </section>\n  );\n};\n\nfunction mapDispatchToProps(dispatch: Function): { [string]: Function } {\n  return {\n    populateProductView: (productViewData) =>\n      dispatch(actions.populateProductView(productViewData)),\n    openProductDetailView: () => dispatch(actions.openProductDetailView()),\n    fetchProducts: (...args) => dispatch(actions.fetchProducts(...args)),\n    fetchProductsInSearch: (...args) => dispatch(actions.fetchProductsInSearch(...args)),\n    setClientFilterStatus: (status) => dispatch(actions.setClientFilterStatus(status)),\n    setLoading: (status) => dispatch(actions.setLoading(status)),\n  };\n}\n\nfunction mapStateToProps({ buildTimeState, listingContentState }: $Shape<GlobalState>) {\n  const { productData: initialProductData, productFilters, productSearchValues } = buildTimeState;\n  const {\n    productViewData,\n    productViewOpen,\n    fetchedProducts,\n    totalProductsInCategory,\n    hasFiltersSetFromClient,\n    loading,\n  } = listingContentState;\n\n  return {\n    initialProductData,\n    productFilters,\n    productSearchValues,\n    fetchedProducts,\n    totalProductsInCategory,\n    productViewOpen,\n    productViewData,\n    hasFiltersSetFromClient,\n    loading,\n  };\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(ListingContent);\n"]},"metadata":{},"sourceType":"module"}