{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport gql from 'graphql-tag';\nimport { navigationDataQuery, cmsQuery, productQuery, brandListQuery } from '../../graphQL/graphqlQueries';\nimport { productSchema, cmsSchema } from '../../graphQL/schemas';\nimport { storeController, cmsController } from '../controller';\n// NOTE: this utility is intended for pages making requests via any \"getStaticProps\" / build time requests\nexport default {\n  getProductData: (section, productType, productCountStart, productCountEnd, filters) => {\n    const query = gql`\n      ${productQuery}\n    `;\n    return storeController(query, productSchema, true, _objectSpread({\n      section,\n      productType,\n      productCountStart,\n      productCountEnd\n    }, filters));\n  },\n  getNavigationData: () => {\n    const query = gql`\n      ${navigationDataQuery}\n    `;\n    return storeController(query, productSchema, false);\n  },\n  getCmsContent: bespokeSections => {\n    const query = gql`\n      ${cmsQuery(bespokeSections)}\n    `;\n    return cmsController(query, cmsSchema);\n  },\n  getBrandList: () => {\n    const query = gql`\n      ${brandListQuery}\n    `;\n    return storeController(query, productSchema, false);\n  }\n};","map":null,"metadata":{},"sourceType":"module"}