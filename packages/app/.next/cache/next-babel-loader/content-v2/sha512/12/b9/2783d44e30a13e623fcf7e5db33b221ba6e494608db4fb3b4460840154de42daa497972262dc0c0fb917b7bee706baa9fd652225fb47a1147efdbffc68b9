{"ast":null,"code":"import _extends from \"/Users/justincoulston/Desktop/affilaite-core-mono/node_modules/next/node_modules/@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutProperties from \"/Users/justincoulston/Desktop/affilaite-core-mono/node_modules/next/node_modules/@babel/runtime/helpers/esm/objectWithoutProperties\";\nvar _jsxFileName = \"/Users/justincoulston/Desktop/affilaite-core-mono/packages/app/components/units/CmsGrid/CmsGrid.js\";\nvar __jsx = React.createElement;\nimport React from 'react';\nimport Grid from '@material-ui/core/Grid';\nimport styled from 'styled-components';\nimport Button from '@units/Button';\nimport Image from '@units/Image';\nimport Typography from '@units/Typography';\nimport Copy from '@units/Copy';\nimport isEmpty from 'lodash/isEmpty';\nimport { StyledCmsGrid } from '@styles/CommonStyledComponents';\nvar InnerGridContent = styled(Grid).withConfig({\n  displayName: \"CmsGrid__InnerGridContent\",\n  componentId: \"mbo5y8-0\"\n})([\"&&{\", \" \", \"}\"], function (props) {\n  return props.isStacked ? 'flex-wrap: wrap; ' : '';\n}, function (props) {\n  return props.isStacked ? 'flex-direction: column; ' : '';\n});\n_c = InnerGridContent;\nvar CmsGridWrapper = styled.section.withConfig({\n  displayName: \"CmsGrid__CmsGridWrapper\",\n  componentId: \"mbo5y8-1\"\n})([\"background:\", \";box-shadow:\", \";\"], function (props) {\n  return props.bgColor;\n}, function (props) {\n  return props.borderShadow || 'auto';\n});\n_c2 = CmsGridWrapper;\nexport default function CmsGrid(_ref) {\n  var _this = this;\n\n  var rows = _ref.rows,\n      bgColor = _ref.bgColor,\n      borderShadow = _ref.borderShadow,\n      cmsEventMappings = _ref.cmsEventMappings,\n      gridContainerProps = _objectWithoutProperties(_ref, [\"rows\", \"bgColor\", \"borderShadow\", \"cmsEventMappings\"]);\n\n  return __jsx(CmsGridWrapper, {\n    bgColor: bgColor,\n    borderShadow: borderShadow,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 33,\n      columnNumber: 5\n    }\n  }, __jsx(StyledCmsGrid, _extends({\n    container: true\n  }, gridContainerProps, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 34,\n      columnNumber: 7\n    }\n  }), rows === null || rows === void 0 ? void 0 : rows.map(function (_ref2, index) {\n    var _ref2$cta = _ref2.cta,\n        cta = _ref2$cta === void 0 ? {} : _ref2$cta,\n        copy = _ref2.copy,\n        img = _ref2.img,\n        contentLayout = _ref2.contentLayout,\n        grid = _ref2.grid,\n        restGrid = _objectWithoutProperties(_ref2, [\"cta\", \"copy\", \"img\", \"contentLayout\", \"grid\"]);\n\n    return __jsx(StyledCmsGrid, _extends({\n      item: true\n    }, grid, restGrid, {\n      key: index,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 37,\n        columnNumber: 13\n      }\n    }), __jsx(InnerGridContent, {\n      container: true,\n      alignItems: \"flex-start\",\n      isStacked: contentLayout === 'stack',\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 38,\n        columnNumber: 15\n      }\n    }, copy && __jsx(Typography, {\n      typeStyles: copy,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 42,\n        columnNumber: 26\n      }\n    }, __jsx(Copy, {\n      text: copy.text,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 42,\n        columnNumber: 57\n      }\n    })), img && __jsx(Image, _extends({}, img, {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 44,\n        columnNumber: 25\n      }\n    })), !isEmpty(cta) && __jsx(Button, _extends({}, cta, {\n      cmsEventMappings: cmsEventMappings,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 46,\n        columnNumber: 35\n      }\n    }))));\n  })));\n}\n_c3 = CmsGrid;\n\nvar _c, _c2, _c3;\n\n$RefreshReg$(_c, \"InnerGridContent\");\n$RefreshReg$(_c2, \"CmsGridWrapper\");\n$RefreshReg$(_c3, \"CmsGrid\");","map":{"version":3,"sources":["/Users/justincoulston/Desktop/affilaite-core-mono/packages/app/components/units/CmsGrid/CmsGrid.js"],"names":["React","Grid","styled","Button","Image","Typography","Copy","isEmpty","StyledCmsGrid","InnerGridContent","props","isStacked","CmsGridWrapper","section","bgColor","borderShadow","CmsGrid","rows","cmsEventMappings","gridContainerProps","map","index","cta","copy","img","contentLayout","grid","restGrid","text"],"mappings":"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","sourcesContent":["//@flow\nimport React from 'react';\nimport Grid from '@material-ui/core/Grid';\nimport styled from 'styled-components';\nimport Button from '@units/Button';\nimport Image from '@units/Image';\nimport Typography from '@units/Typography';\nimport Copy from '@units/Copy';\nimport isEmpty from 'lodash/isEmpty';\nimport { StyledCmsGrid } from '@styles/CommonStyledComponents';\nimport { type CmsGridContent } from '@types/cms';\n\nconst InnerGridContent = styled(Grid)`\n  && {\n    ${(props) => (props.isStacked ? 'flex-wrap: wrap; ' : '')}\n    ${(props) => (props.isStacked ? 'flex-direction: column; ' : '')}\n  }\n`;\n\nconst CmsGridWrapper = styled.section`\n  background: ${(props) => props.bgColor};\n  box-shadow: ${(props) => props.borderShadow || 'auto'};\n`;\n\nexport default function CmsGrid({\n  rows,\n  bgColor,\n  borderShadow,\n  cmsEventMappings,\n  ...gridContainerProps\n}: CmsGridContent) {\n  return (\n    <CmsGridWrapper bgColor={bgColor} borderShadow={borderShadow}>\n      <StyledCmsGrid container {...gridContainerProps}>\n        {rows?.map(({ cta = {}, copy, img, contentLayout, grid, ...restGrid }, index) => {\n          return (\n            <StyledCmsGrid item {...grid} {...restGrid} key={index}>\n              <InnerGridContent\n                container\n                alignItems=\"flex-start\"\n                isStacked={contentLayout === 'stack'}>\n                {copy && <Typography typeStyles={copy}>{<Copy text={copy.text} />}</Typography>}\n\n                {img && <Image {...img} />}\n\n                {!isEmpty(cta) && <Button {...cta} cmsEventMappings={cmsEventMappings} />}\n              </InnerGridContent>\n            </StyledCmsGrid>\n          );\n        })}\n      </StyledCmsGrid>\n    </CmsGridWrapper>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}