{"ast":null,"code":"var __jsx = React.createElement;\nimport React, { useState, Fragment } from 'react';\nimport PersonIcon from '@material-ui/icons/Person';\nimport Divider from '@material-ui/core/Divider';\nimport Typography from '@units/Typography';\nimport ListItemText from '@material-ui/core/ListItemText';\nimport upperFirst from 'lodash/upperFirst';\nimport UserEditSetting from './UserEditSetting';\nimport WcIcon from '@material-ui/icons/Wc';\nimport LabelIcon from '@material-ui/icons/Label';\nimport DataUsageIcon from '@material-ui/icons/DataUsage';\nimport NotificationsIcon from '@material-ui/icons/Notifications';\nimport ChevronRightIcon from '@material-ui/icons/ChevronRight';\nimport Drawer from '@units/Drawer';\nimport { StyledList, StyledListItem, StyledListIcon, CleasrSettings } from './styles';\nimport { Actionable } from '@styles/CommonStyledComponents';\nimport { useCms } from '@hooks';\nexport default function UserSettingsConfig({\n  user,\n  setUserSettings,\n  avatarIconColor\n}) {\n  const {\n    0: settingsOpen,\n    1: setSettingsOpen\n  } = useState(false);\n  const {\n    0: currentEditSetting,\n    1: setCurrentEditSetting\n  } = useState(null);\n  const {\n    persuasiveCookieText\n  } = useCms('other');\n\n  const closeSettings = () => setSettingsOpen(false);\n\n  const settingsList = [{\n    icon: __jsx(LabelIcon, {\n      color: \"primary\"\n    }),\n    property: 'name',\n    title: 'name',\n    value: user.name,\n    description: ''\n  }, {\n    icon: __jsx(WcIcon, {\n      color: \"primary\"\n    }),\n    property: 'gender',\n    title: 'gender',\n    value: user.gender,\n    description: ''\n  }, {\n    icon: __jsx(NotificationsIcon, {\n      color: \"primary\"\n    }),\n    property: 'notifications',\n    title: 'notifications',\n    value: user.notifications ? 'on' : 'off',\n    description: ''\n  }, {\n    icon: __jsx(DataUsageIcon, {\n      color: \"primary\"\n    }),\n    property: 'allowCookies',\n    title: 'cookies',\n    value: user.allowCookies ? 'on' : 'off',\n    description: persuasiveCookieText\n  }];\n  return __jsx(React.Fragment, null, __jsx(Actionable, {\n    \"aria-label\": \"user settings\"\n  }, __jsx(PersonIcon, {\n    fontSize: \"large\",\n    color: avatarIconColor,\n    onClick: () => setSettingsOpen(true)\n  })), __jsx(Drawer, {\n    open: settingsOpen,\n    anchor: 'right',\n    iconCloseClick: closeSettings,\n    onClose: closeSettings\n  }, !currentEditSetting ? __jsx(React.Fragment, null, __jsx(StyledList, null, __jsx(Divider, {\n    light: true\n  }), settingsList.map(({\n    icon,\n    property,\n    value,\n    title,\n    description\n  }, index) => __jsx(Fragment, {\n    key: index\n  }, __jsx(StyledListItem, {\n    onClick: () => setCurrentEditSetting({\n      property,\n      title,\n      description\n    })\n  }, __jsx(StyledListIcon, null, icon), __jsx(ListItemText, {\n    primary: upperFirst(title),\n    secondary: value\n  }), __jsx(ChevronRightIcon, null)), __jsx(Divider, {\n    light: true\n  })))), __jsx(CleasrSettings, {\n    onClick: () => setUserSettings({})\n  }, __jsx(Typography, {\n    tag: \"p\",\n    decoration: 'underline',\n    padding: '30px'\n  }, \"Clear all settings\"))) : __jsx(UserEditSetting, {\n    setting: currentEditSetting,\n    user: user,\n    setUserSettings: setUserSettings,\n    setCurrentEditSetting: setCurrentEditSetting\n  })));\n}","map":null,"metadata":{},"sourceType":"module"}