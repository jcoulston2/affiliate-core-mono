{"ast":null,"code":"import _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nimport _defineProperty from \"@babel/runtime/helpers/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport { MultiString } from '../customScalars';\nimport GraphQLJSON, { GraphQLJSONObject } from 'graphql-type-json';\nimport { getCategoryLastUpdated, traverseAllProducts } from './helper';\nimport { searchPipe, productCountPipe, searchResultShapePipe, categoryPipe, filterPipe } from './resolverPipes';\nexport default function productResolver(affiliateData) {\n  const scalars = {\n    MultiString,\n    JSON: GraphQLJSON,\n    JSONObject: GraphQLJSONObject\n  };\n  return _objectSpread(_objectSpread({}, scalars), {}, {\n    searchData: (_ref) => {\n      let {\n        productCountStart,\n        productCountEnd,\n        category,\n        keyTerm,\n        productColor,\n        section,\n        brand\n      } = _ref,\n          filters = _objectWithoutProperties(_ref, [\"productCountStart\", \"productCountEnd\", \"category\", \"keyTerm\", \"productColor\", \"section\", \"brand\"]);\n\n      let productData;\n      const lastUpdated = getCategoryLastUpdated(affiliateData, section, category) || null;\n      productData = searchPipe(affiliateData, {\n        category,\n        keyTerm,\n        productColor,\n        section,\n        brand\n      });\n      productData = searchResultShapePipe(productData, lastUpdated);\n      productData = filterPipe(productData, filters);\n      productData = productCountPipe(productData, productCountStart, productCountEnd);\n      return {\n        section: 'Search',\n        data: productData\n      };\n    },\n    categoryData: (_ref2) => {\n      let {\n        section,\n        productCountStart,\n        productCountEnd,\n        productType\n      } = _ref2,\n          filters = _objectWithoutProperties(_ref2, [\"section\", \"productCountStart\", \"productCountEnd\", \"productType\"]);\n\n      let productData;\n      productData = categoryPipe(affiliateData, section, productType);\n      productData = filterPipe(productData, filters);\n      productData = productCountPipe(productData, productCountStart, productCountEnd);\n      return {\n        section,\n        data: productData\n      };\n    },\n    affiliateData: () => {\n      return affiliateData;\n    },\n    brandList: () => {\n      const brands = [];\n      traverseAllProducts(affiliateData, {\n        level: 'product',\n        cb: product => {\n          const {\n            brand\n          } = product.metaData;\n          if (!brands.includes(brand)) brands.push(brand);\n        }\n      });\n      return brands;\n    }\n  });\n}","map":null,"metadata":{},"sourceType":"module"}