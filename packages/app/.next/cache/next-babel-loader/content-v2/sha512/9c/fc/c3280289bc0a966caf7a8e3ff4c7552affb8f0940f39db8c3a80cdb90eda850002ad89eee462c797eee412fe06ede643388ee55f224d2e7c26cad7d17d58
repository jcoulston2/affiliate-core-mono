{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\n/**\n * @info This is an alternative to using useCms hook, and can be used outside React components if needed.\n * Uing this requires passing in the cmsContext as a param e.g.\n *\n * const cmsContext = useCmsContext();\n * const cmsContent = getCmsContent(cmsContext, 'theme');\n *\n * When linking to the cms it's preferred to the hook as easier\n *\n */\nexport function getCmsContent(context, cmsContainer, cmsContent) {\n  const content = context && context[cmsContainer];\n\n  if (!cmsContent) {\n    return content;\n  } else {\n    return content && content[cmsContent];\n  }\n}\nexport function getCopy(copy, toReplace) {\n  return copy && copy.replace(/\\{\\}/g, toReplace || '');\n}\nexport function setCommonCmsAttr(value) {\n  return ['mobile', 'tablet', 'desktop'].reduce((acc, cur) => {\n    return _objectSpread(_objectSpread({}, acc), {}, {\n      [cur]: value\n    });\n  }, {});\n}\nexport async function injectLocalCms() {\n  const {\n    cms\n  } = await import('@affiliate-master/config');\n  return cms;\n}","map":{"version":3,"sources":["/Users/justincoulston/Desktop/affilaite-core-mono/packages/app/helpers/cms/cms.js"],"names":["getCmsContent","context","cmsContainer","cmsContent","content","getCopy","copy","toReplace","replace","setCommonCmsAttr","value","reduce","acc","cur","injectLocalCms","cms"],"mappings":";;;;;;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,SAASA,aAAT,CACLC,OADK,EAELC,YAFK,EAGLC,UAHK,EAIO;AACZ,QAAMC,OAAO,GAAGH,OAAO,IAAIA,OAAO,CAACC,YAAD,CAAlC;;AACA,MAAI,CAACC,UAAL,EAAiB;AACf,WAAOC,OAAP;AACD,GAFD,MAEO;AACL,WAAOA,OAAO,IAAIA,OAAO,CAACD,UAAD,CAAzB;AACD;AACF;AAED,OAAO,SAASE,OAAT,CAAiBC,IAAjB,EAA+BC,SAA/B,EAA0D;AAC/D,SAAOD,IAAI,IAAIA,IAAI,CAACE,OAAL,CAAa,OAAb,EAAsBD,SAAS,IAAI,EAAnC,CAAf;AACD;AAED,OAAO,SAASE,gBAAT,CAA0BC,KAA1B,EAAsE;AAC3E,SAAO,CAAC,QAAD,EAAW,QAAX,EAAqB,SAArB,EAAgCC,MAAhC,CAAuC,CAACC,GAAD,EAAcC,GAAd,KAA8B;AAC1E,2CACKD,GADL;AAEE,OAACC,GAAD,GAAOH;AAFT;AAID,GALM,EAKJ,EALI,CAAP;AAMD;AAED,OAAO,eAAeI,cAAf,GAA4C;AACjD,QAAM;AAAEC,IAAAA;AAAF,MAAkB,MAAM,OAAO,0BAAP,CAA9B;AACA,SAAOA,GAAP;AACD","sourcesContent":["//@flow\nimport { type CommonJson } from '../../types/other';\nimport { type CmsResponsiveMixed } from '../../types/cms';\n\n/**\n * @info This is an alternative to using useCms hook, and can be used outside React components if needed.\n * Uing this requires passing in the cmsContext as a param e.g.\n *\n * const cmsContext = useCmsContext();\n * const cmsContent = getCmsContent(cmsContext, 'theme');\n *\n * When linking to the cms it's preferred to the hook as easier\n *\n */\nexport function getCmsContent(\n  context: { [string]: any },\n  cmsContainer: string,\n  cmsContent: string\n): CommonJson {\n  const content = context && context[cmsContainer];\n  if (!cmsContent) {\n    return content;\n  } else {\n    return content && content[cmsContent];\n  }\n}\n\nexport function getCopy(copy: string, toReplace: string): string {\n  return copy && copy.replace(/\\{\\}/g, toReplace || '');\n}\n\nexport function setCommonCmsAttr(value: string | number): CmsResponsiveMixed {\n  return ['mobile', 'tablet', 'desktop'].reduce((acc: Object, cur: string) => {\n    return {\n      ...acc,\n      [cur]: value,\n    };\n  }, {});\n}\n\nexport async function injectLocalCms(): CommonJson {\n  const { cms }: Object = await import('@affiliate-master/config');\n  return cms;\n}\n"]},"metadata":{},"sourceType":"module"}