{"ast":null,"code":"import _extends from \"/Users/justincoulston/Desktop/affilaite-core-mono/node_modules/next/node_modules/@babel/runtime/helpers/esm/extends\";\nimport _defineProperty from \"/Users/justincoulston/Desktop/affilaite-core-mono/node_modules/next/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nimport _toConsumableArray from \"/Users/justincoulston/Desktop/affilaite-core-mono/node_modules/next/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\nimport _objectWithoutProperties from \"/Users/justincoulston/Desktop/affilaite-core-mono/node_modules/next/node_modules/@babel/runtime/helpers/esm/objectWithoutProperties\";\nvar __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport React, { useEffect, useState, useCallback } from 'react';\nimport Grid from '@material-ui/core/Grid';\nimport Button from '@units/Button';\nimport Typography from '@units/Typography';\nimport Loader from '@units/Loader';\nimport Card from '@units/Card';\nimport { Spacer } from '@styles/CommonStyledComponents';\nimport { getScrollTop, setScrollTop, navigateToUrl, urlContainsQuery } from '@helpers/common';\nimport { getFiltersFromUrl } from '@helpers/page';\nimport { SEARCH_PATH } from '@constants';\nimport { useRouter } from 'next/router';\nimport { getProductLink } from '@helpers/page';\nimport { useWishListAction, useCms } from '@hooks';\nimport { useFilters } from '@modules/Filters';\nimport { ProductListingContainer, LoadMoreProductsCopy, ListingInformation } from './styles';\nimport PorductGridControls from './PorductGridControls';\nimport { VIEW_MODE, FLICK_VIEW_QUERY } from '@constants';\nimport { useTheme } from '@hooks';\nimport NoMoreProductsIndicator from './NoMoreProductsIndicator';\nimport memoize from 'fast-memoize';\nimport ProductsView from './ProductsView';\nexport default function ProductListing(_ref) {\n  var initialProducts = _ref.initialProducts,\n      fetchedProducts = _ref.fetchedProducts,\n      initialProductsPerPage = _ref.initialProductsPerPage,\n      listingContentInnerMaxWidth = _ref.listingContentInnerMaxWidth,\n      listingContentInnerPadding = _ref.listingContentInnerPadding,\n      noMoreProductsCopyText = _ref.noMoreProductsCopyText,\n      noMoreProductsCopy = _ref.noMoreProductsCopy,\n      loadMoreProductsButton = _ref.loadMoreProductsButton,\n      loadMoreProductsCopy = _ref.loadMoreProductsCopy,\n      fetchProducts = _ref.fetchProducts,\n      totalCategoryProducts = _ref.totalCategoryProducts,\n      productSearchValues = _ref.productSearchValues,\n      fetchProductsInSearch = _ref.fetchProductsInSearch,\n      section = _ref.section,\n      category = _ref.category,\n      setLoading = _ref.setLoading,\n      loading = _ref.loading,\n      openProductDetailView = _ref.openProductDetailView,\n      populateProductView = _ref.populateProductView,\n      productFilters = _ref.productFilters,\n      setClientFilterStatus = _ref.setClientFilterStatus,\n      noSearchResultText = _ref.noSearchResultText,\n      flickViewTitleCopy = _ref.flickViewTitleCopy,\n      flickViewTitleText = _ref.flickViewTitleText,\n      listingItemProps = _objectWithoutProperties(_ref, [\"initialProducts\", \"fetchedProducts\", \"initialProductsPerPage\", \"listingContentInnerMaxWidth\", \"listingContentInnerPadding\", \"noMoreProductsCopyText\", \"noMoreProductsCopy\", \"loadMoreProductsButton\", \"loadMoreProductsCopy\", \"fetchProducts\", \"totalCategoryProducts\", \"productSearchValues\", \"fetchProductsInSearch\", \"section\", \"category\", \"setLoading\", \"loading\", \"openProductDetailView\", \"populateProductView\", \"productFilters\", \"setClientFilterStatus\", \"noSearchResultText\", \"flickViewTitleCopy\", \"flickViewTitleText\"]);\n\n  var _useState = useState(VIEW_MODE.GRID_MODE),\n      viewMode = _useState[0],\n      setViewMode = _useState[1];\n\n  var _useState2 = useState(null),\n      lastScrolltop = _useState2[0],\n      setLastScrollTop = _useState2[1];\n\n  var _useCms = useCms('listingContent'),\n      productFiltersContent = _useCms.productFiltersContent;\n\n  var _useTheme = useTheme(),\n      textTheme = _useTheme.textTheme;\n\n  var _useFilters = useFilters(productFilters),\n      filterState = _useFilters.filterState,\n      filterMethods = _useFilters.filterMethods,\n      normalizedFilters = _useFilters.normalizedFilters;\n\n  var router = useRouter();\n  var wishListAction = useWishListAction('add');\n  var scaler = productFiltersContent.sliderPriceScaleMultiplier;\n  var allProducts = [].concat(_toConsumableArray(initialProducts), _toConsumableArray(fetchedProducts));\n  var numberOfProducts = allProducts.length;\n  var nextFetchEndCount = numberOfProducts + initialProductsPerPage;\n  var showNoMoreProducts = numberOfProducts >= totalCategoryProducts;\n  var filters = getFiltersFromUrl();\n  var isSearchPage = router.pathname.includes(SEARCH_PATH);\n  var isFlickView = viewMode === VIEW_MODE.FLICK_MODE;\n\n  var filterProps = _objectSpread({\n    section: section,\n    category: category,\n    productFilters: productFilters,\n    productSearchValues: productSearchValues,\n    fetchProducts: fetchProducts,\n    fetchProductsInSearch: fetchProductsInSearch,\n    setClientFilterStatus: setClientFilterStatus,\n    setLoading: setLoading,\n    productFiltersContent: productFiltersContent,\n    scaler: scaler,\n    normalizedFilters: normalizedFilters,\n    filterMethods: filterMethods\n  }, filterState);\n\n  var openCardAction = function openCardAction(product) {\n    try {\n      openProductDetailView();\n      populateProductView(product);\n    } catch (e) {\n      console.warn(e);\n      navigateToUrl(getProductLink(product));\n    }\n  };\n\n  var openCardActionMemo = useCallback(memoize(function (product) {\n    return function () {\n      return openCardAction(product);\n    };\n  }), []);\n\n  var setScroll = function setScroll() {\n    if (document.scrollingElement) {\n      setLastScrollTop(getScrollTop());\n    }\n  };\n\n  var loadMoreProducts = function loadMoreProducts() {\n    setLoading(true);\n    setScroll();\n\n    if (isSearchPage) {\n      fetchProductsInSearch(productSearchValues, numberOfProducts, nextFetchEndCount, filters, true);\n    } else {\n      fetchProducts(section, category, numberOfProducts, nextFetchEndCount, filters, true);\n    }\n  };\n\n  var maintainScrollTop = function maintainScrollTop() {\n    if (document.scrollingElement && lastScrolltop !== null) {\n      setScrollTop(lastScrolltop);\n      setLastScrollTop(null);\n    }\n  };\n\n  useEffect(function () {\n    maintainScrollTop();\n  }, [numberOfProducts]);\n  useEffect(function () {\n    if (urlContainsQuery(FLICK_VIEW_QUERY)) {\n      setViewMode(VIEW_MODE.FLICK_MODE);\n    }\n  }, []);\n  return __jsx(React.Fragment, null, __jsx(PorductGridControls, {\n    filterProps: filterProps,\n    setViewMode: setViewMode,\n    viewMode: viewMode\n  }), __jsx(Loader, {\n    active: loading,\n    useBackdrop: true\n  }), __jsx(ProductListingContainer, {\n    padding: listingContentInnerPadding,\n    maxWidth: listingContentInnerMaxWidth\n  }, __jsx(ProductsView, _extends({\n    isFlickView: isFlickView,\n    setViewMode: setViewMode,\n    flickViewTitleCopy: flickViewTitleCopy,\n    flickViewTitleText: flickViewTitleText,\n    wishListAction: wishListAction,\n    openCardAction: openCardAction,\n    allProducts: allProducts,\n    loadMoreProducts: loadMoreProducts,\n    showNoMoreProducts: showNoMoreProducts,\n    noMoreProductsCopyText: noMoreProductsCopyText,\n    openCardActionMemo: openCardActionMemo,\n    filterProps: filterProps\n  }, listingItemProps)), !numberOfProducts && __jsx(NoMoreProductsIndicator, {\n    text: !loading && noSearchResultText\n  }), __jsx(ListingInformation, {\n    container: true,\n    justify: \"center\"\n  }, !isFlickView && __jsx(Grid, {\n    item: true,\n    lg: 5\n  }, __jsx(LoadMoreProductsCopy, null, __jsx(Typography, {\n    tag: \"h3\",\n    fullwidth: true,\n    typeStyles: loadMoreProductsCopy\n  }, \"Showing \", numberOfProducts, \" item(s)\"))), __jsx(Grid, {\n    item: true,\n    xs: 12,\n    lg: 8,\n    container: true,\n    justify: \"center\"\n  }, !isFlickView && showNoMoreProducts && __jsx(Card, {\n    padding: \"0px\",\n    margin: \"20px 0px 20px\"\n  }, __jsx(Typography, {\n    tag: \"p\",\n    typeStyles: noMoreProductsCopy,\n    color: textTheme.slightlyFadedTextColor\n  }, noMoreProductsCopyText)), !showNoMoreProducts && !isFlickView && __jsx(Button, _extends({}, loadMoreProductsButton, {\n    onClick: loadMoreProducts\n  }))), __jsx(Spacer, {\n    h: [{\n      value: 20,\n      breakPoint: 'max_xs'\n    }]\n  }))));\n}","map":null,"metadata":{},"sourceType":"module"}