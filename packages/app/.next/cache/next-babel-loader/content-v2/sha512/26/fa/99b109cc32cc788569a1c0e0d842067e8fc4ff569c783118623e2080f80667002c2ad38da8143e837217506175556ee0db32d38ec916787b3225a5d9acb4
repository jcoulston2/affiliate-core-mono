{"ast":null,"code":"// TODO: we need to make the redis import work\n// import redis from 'redis';\nimport * as Promise from 'bluebird';\nimport { IS_PROD } from '../../constants';\nimport storeCache from '../../__store-cache__/store-cache.json';\nimport { zipParse } from '../../helpers/common';\n\nclass Store {\n  constructor(data) {\n    this.store = data || null;\n  }\n\n  listenToConnections() {\n    this.redisClient.on('connect', () => {\n      console.log(':::REDIS CLIENT CONNECTED:::');\n    });\n    this.redisClient.on('error', errpr => {\n      console.log(`:::REDIS ERROR::: ${errpr}`);\n    });\n  }\n\n  promisifyRedisMethods() {\n    const context = {\n      context: this.redisClient\n    };\n    this.redisClientAuthPromise = Promise.promisify(this.redisClient.auth, context);\n    this.redisFlushPromise = Promise.promisify(this.redisClient.del, context);\n    this.redisSetPromise = Promise.promisify(this.redisClient.set, context);\n    this.redisGetPromise = Promise.promisify(this.redisClient.get, context);\n  }\n\n  serialize(data) {\n    return JSON.stringify(data);\n  } // Attempts to build from Redis cloud, if there is no redis store, fallback to\n  // to pre-provided constructor value for store or else give an empty array\n\n\n  async buildStoreFromRedis() {\n    const redisStore = await this.redisGetPromise(this.redisKey);\n    this.store = redisStore ? JSON.parse(redisStore) : this.store || [];\n    return this.store;\n  }\n\n  async connectRedisClient() {\n    this.listenToConnections();\n    this.promisifyRedisMethods();\n    if (this.redisRequireAuth) await this.redisClientAuthPromise(this.redisAuth);\n    return await this.buildStoreFromRedis();\n  }\n\n  async flush() {\n    await this.redisFlushPromise(this.redisKey);\n    const checkFlushed = await this.redisGetPromise(this.redisKey);\n    if (!checkFlushed) console.log(`FLUSHED ${this.redisKey}`);\n  }\n\n  async setStore(affiliateData) {\n    this.store = affiliateData;\n\n    try {\n      if (this.redisClient) {\n        await this.redisSetPromise(this.redisKey, this.serialize(affiliateData));\n      }\n\n      return {\n        success: true\n      };\n    } catch (e) {\n      return {\n        success: false,\n        error: `${e}`\n      };\n    }\n  } // Redis only\n\n\n  async getRedisStore() {\n    const store = await this.redisGetPromise(this.redisKey);\n    return JSON.parse(store);\n  } // Redis only\n\n\n  getStore() {\n    return this.store;\n  }\n\n}\n\nconst configuredStore = new Store(zipParse(storeCache.store), {\n  useRedis: false\n});\nexport { configuredStore, Store };","map":{"version":3,"sources":["/Users/justincoulston/Desktop/affilaite-core-mono/packages/affiliate-app/server/store/Store.js"],"names":["Promise","IS_PROD","storeCache","zipParse","Store","constructor","data","store","listenToConnections","redisClient","on","console","log","errpr","promisifyRedisMethods","context","redisClientAuthPromise","promisify","auth","redisFlushPromise","del","redisSetPromise","set","redisGetPromise","get","serialize","JSON","stringify","buildStoreFromRedis","redisStore","redisKey","parse","connectRedisClient","redisRequireAuth","redisAuth","flush","checkFlushed","setStore","affiliateData","success","e","error","getRedisStore","getStore","configuredStore","useRedis"],"mappings":"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","sourcesContent":["//@flow\n\n// TODO: we need to make the redis import work\n// import redis from 'redis';\nimport * as Promise from 'bluebird';\nimport { IS_PROD } from '../../constants';\nimport storeCache from '../../__store-cache__/store-cache.json';\nimport { zipParse } from '../../helpers/common';\nimport { type ParsedStore } from '../../types/store';\n\ntype StoreConfig = {\n  useRedis: boolean,\n};\n\nclass Store {\n  store: Array<any> | Object;\n\n  constructor(data: any): void {\n    this.store = data || null;\n  }\n\n  listenToConnections(): void {\n    this.redisClient.on('connect', () => {\n      console.log(':::REDIS CLIENT CONNECTED:::');\n    });\n    this.redisClient.on('error', (errpr) => {\n      console.log(`:::REDIS ERROR::: ${errpr}`);\n    });\n  }\n\n  promisifyRedisMethods(): void {\n    const context = {\n      context: this.redisClient,\n    };\n\n    this.redisClientAuthPromise = Promise.promisify(this.redisClient.auth, context);\n    this.redisFlushPromise = Promise.promisify(this.redisClient.del, context);\n    this.redisSetPromise = Promise.promisify(this.redisClient.set, context);\n    this.redisGetPromise = Promise.promisify(this.redisClient.get, context);\n  }\n\n  serialize(data: Object): string {\n    return JSON.stringify(data);\n  }\n\n  // Attempts to build from Redis cloud, if there is no redis store, fallback to\n  // to pre-provided constructor value for store or else give an empty array\n  async buildStoreFromRedis(): Promise<ParsedStore> {\n    const redisStore = await this.redisGetPromise<Promise<any>>(this.redisKey);\n    this.store = redisStore ? JSON.parse(redisStore) : this.store || [];\n    return this.store;\n  }\n\n  async connectRedisClient(): Promise<ParsedStore> {\n    this.listenToConnections();\n    this.promisifyRedisMethods();\n    if (this.redisRequireAuth) await this.redisClientAuthPromise<Promise<any>>(this.redisAuth);\n    return await this.buildStoreFromRedis();\n  }\n\n  async flush(): Promise<any> {\n    await this.redisFlushPromise(this.redisKey);\n    const checkFlushed = await this.redisGetPromise<Promise<any>>(this.redisKey);\n    if (!checkFlushed) console.log(`FLUSHED ${this.redisKey}`);\n  }\n\n  async setStore(\n    affiliateData: Array<any> | Object\n  ): Promise<{ success: boolean, error?: string }> {\n    this.store = affiliateData;\n\n    try {\n      if (this.redisClient) {\n        await this.redisSetPromise<Promise<any>>(this.redisKey, this.serialize(affiliateData));\n      }\n      return {\n        success: true,\n      };\n    } catch (e) {\n      return {\n        success: false,\n        error: `${e}`,\n      };\n    }\n  }\n\n  // Redis only\n  async getRedisStore(): Promise<ParsedStore> {\n    const store = await this.redisGetPromise<Promise<any>>(this.redisKey);\n    return JSON.parse(store);\n  }\n\n  // Redis only\n  getStore(): Promise<ParsedStore> {\n    return this.store;\n  }\n}\n\nconst configuredStore = new Store(zipParse(storeCache.store), { useRedis: false });\n\nexport { configuredStore, Store };\n"]},"metadata":{},"sourceType":"module"}