{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/extends\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nvar _jsxFileName = \"/Users/justincoulston/Desktop/affilaite-core-mono/packages/affiliate-app/components/units/Button/Button.js\";\nvar __jsx = React.createElement;\nimport React from 'react';\nimport Button from '@material-ui/core/Button';\nimport styled from 'styled-components';\nimport { useTheme } from '@hooks';\nimport Typography from '@units/Typography';\nimport Copy from '@units/Copy';\nconst StyledButton = styled((_ref) => {\n  let {\n    color,\n    maxWidth,\n    bgColor,\n    padding,\n    borderRadius,\n    textTransform,\n    disableHover,\n    style,\n    children\n  } = _ref,\n      rest = _objectWithoutProperties(_ref, [\"color\", \"maxWidth\", \"bgColor\", \"padding\", \"borderRadius\", \"textTransform\", \"disableHover\", \"style\", \"children\"]);\n\n  return __jsx(Button, _extends({}, rest, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 22,\n      columnNumber: 9\n    }\n  }), children);\n}).withConfig({\n  displayName: \"Button__StyledButton\",\n  componentId: \"sc-1cxgf7e-0\"\n})([\"&&{max-width:\", \";background-color:\", \";padding:\", \";border-radius:\", \";text-transform:\", \";color:\", \";font-weight:\", \";&:hover{background-color:\", \";}p > span{white-space:nowrap;}}\"], ({\n  maxWidth\n}) => maxWidth ? `${maxWidth}` : 'auto', props => props.bgColor, ({\n  padding\n}) => Number.isInteger(padding) ? `${padding}px` : padding, props => props.square ? '0px' : `${props.borderRadius || 20}px`, props => props.textTransform, props => props.color, props => props.defaultFontWeight, props => !props.disableHover ? '#cecece' : 'initial');\nexport default function BrandButton(_ref2) {\n  let {\n    color: propColor,\n    bgColor: propBgColor,\n    primary,\n    secondary,\n    padding,\n    maxWidth,\n    textTransform,\n    copy,\n    text,\n    noPad,\n    children,\n    cmsEventMappings,\n    reference,\n    disableHover,\n    square\n  } = _ref2,\n      rest = _objectWithoutProperties(_ref2, [\"color\", \"bgColor\", \"primary\", \"secondary\", \"padding\", \"maxWidth\", \"textTransform\", \"copy\", \"text\", \"noPad\", \"children\", \"cmsEventMappings\", \"reference\", \"disableHover\", \"square\"]);\n\n  const {\n    buttonTheme\n  } = useTheme();\n  const calculatedPadding = noPad ? 0 : padding || buttonTheme.defaultPadding;\n  const eventMap = reference && cmsEventMappings && cmsEventMappings[reference] || {};\n  let color, bgColor;\n\n  if (primary) {\n    bgColor = buttonTheme.primaryColor;\n    color = buttonTheme.primaryTextColor;\n  } else if (secondary) {\n    bgColor = buttonTheme.secondaryColor;\n    color = buttonTheme.secondaryTextColor;\n  } else {\n    color = propColor;\n    bgColor = propBgColor;\n  }\n\n  return __jsx(StyledButton, _extends({\n    color: color,\n    bgColor: bgColor,\n    maxWidth: maxWidth,\n    borderRadius: buttonTheme.borderRadius,\n    padding: calculatedPadding,\n    textTransform: textTransform,\n    defaultFontWeight: buttonTheme.defaultFontWeight,\n    disableHover: disableHover,\n    square: square\n  }, rest, eventMap, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 5\n    }\n  }), copy && __jsx(Typography, {\n    tag: \"p\",\n    typeStyles: copy,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 91,\n      columnNumber: 9\n    }\n  }, text && __jsx(Copy, {\n    text: text,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 92,\n      columnNumber: 20\n    }\n  })) || children);\n}","map":{"version":3,"sources":["/Users/justincoulston/Desktop/affilaite-core-mono/packages/affiliate-app/components/units/Button/Button.js"],"names":["React","Button","styled","useTheme","Typography","Copy","StyledButton","color","maxWidth","bgColor","padding","borderRadius","textTransform","disableHover","style","children","rest","props","Number","isInteger","square","defaultFontWeight","BrandButton","propColor","propBgColor","primary","secondary","copy","text","noPad","cmsEventMappings","reference","buttonTheme","calculatedPadding","defaultPadding","eventMap","primaryColor","primaryTextColor","secondaryColor","secondaryTextColor"],"mappings":"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","sourcesContent":["//@flow\nimport React from 'react';\nimport Button from '@material-ui/core/Button';\nimport styled from 'styled-components';\nimport { useTheme } from '@hooks';\nimport Typography from '@units/Typography';\nimport Copy from '@units/Copy';\nimport { type CmsButton } from '@types/cms';\n\nconst StyledButton = styled(\n  ({\n    color,\n    maxWidth,\n    bgColor,\n    padding,\n    borderRadius,\n    textTransform,\n    disableHover,\n    style,\n    children,\n    ...rest\n  }) => <Button {...rest}>{children}</Button>\n)`\n  && {\n    max-width: ${({ maxWidth }) => (maxWidth ? `${maxWidth}` : 'auto')};\n    background-color: ${(props) => props.bgColor};\n    padding: ${({ padding }) => (Number.isInteger(padding) ? `${padding}px` : padding)};\n    border-radius: ${(props) => (props.square ? '0px' : `${props.borderRadius || 20}px`)};\n    text-transform: ${(props) => props.textTransform};\n    color: ${(props) => props.color};\n    font-weight: ${(props) => props.defaultFontWeight};\n    &:hover {\n      background-color: ${(props) => (!props.disableHover ? '#cecece' : 'initial')};\n    }\n\n    p > span {\n      white-space: nowrap;\n    }\n  }\n`;\n\nexport default function BrandButton({\n  color: propColor,\n  bgColor: propBgColor,\n  primary,\n  secondary,\n  padding,\n  maxWidth,\n  textTransform,\n  copy,\n  text,\n  noPad,\n  children,\n  cmsEventMappings,\n  reference,\n  disableHover,\n  square,\n  ...rest\n}: CmsButton) {\n  const { buttonTheme } = useTheme();\n  const calculatedPadding = noPad ? 0 : padding || buttonTheme.defaultPadding;\n  const eventMap = (reference && cmsEventMappings && cmsEventMappings[reference]) || {};\n\n  let color, bgColor;\n\n  if (primary) {\n    bgColor = buttonTheme.primaryColor;\n    color = buttonTheme.primaryTextColor;\n  } else if (secondary) {\n    bgColor = buttonTheme.secondaryColor;\n    color = buttonTheme.secondaryTextColor;\n  } else {\n    color = propColor;\n    bgColor = propBgColor;\n  }\n\n  return (\n    <StyledButton\n      color={color}\n      bgColor={bgColor}\n      maxWidth={maxWidth}\n      borderRadius={buttonTheme.borderRadius}\n      padding={calculatedPadding}\n      textTransform={textTransform}\n      defaultFontWeight={buttonTheme.defaultFontWeight}\n      disableHover={disableHover}\n      square={square}\n      {...rest}\n      {...eventMap}>\n      {(copy && (\n        <Typography tag=\"p\" typeStyles={copy}>\n          {text && <Copy text={text} />}\n        </Typography>\n      )) ||\n        children}\n    </StyledButton>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}