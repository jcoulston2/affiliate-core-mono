{"ast":null,"code":"import _extends from \"/Users/justincoulston/Desktop/affilaite-core-mono/node_modules/next/node_modules/@babel/runtime/helpers/esm/extends\";\nimport _toConsumableArray from \"/Users/justincoulston/Desktop/affilaite-core-mono/node_modules/next/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\nimport _objectWithoutProperties from \"/Users/justincoulston/Desktop/affilaite-core-mono/node_modules/next/node_modules/@babel/runtime/helpers/esm/objectWithoutProperties\";\nvar __jsx = React.createElement;\nimport React, { useState } from 'react';\nimport RadioButton from '@units/RadioButton';\nimport Checkbox from '@units/Checkbox';\nimport RadioGroup from '@material-ui/core/RadioGroup';\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\nimport Typography from '@units/Typography';\nimport { keyWordsToString, urlCase } from '@helpers/common';\nimport { PLP_PATH, SEARCH_PATH } from '@constants';\nimport Input from '@units/Input';\nimport { useCms, useBrandList } from '@hooks';\nimport { useFilters } from '@modules/Filters';\nimport { Spacer } from '@styles/CommonStyledComponents';\nimport { useRouter } from 'next/router';\nimport { SectionTabs, LabelTabs } from './QuickFinderTabs';\nimport startCase from 'lodash/startCase';\nimport Grid from '@material-ui/core/Grid';\nimport { QuickSectionTabs, QuickViewSection, RadioItem, RadioItemContainer, QuickViewModal, SectionLabel } from './styles';\nexport default function QuickFinder(_ref) {\n  var _navigationData$secti, _navigationData$secti2, _getCategoryList;\n\n  var navigationData = _ref.navigationData,\n      onSubmitCallback = _ref.onSubmitCallback,\n      modalProps = _objectWithoutProperties(_ref, [\"navigationData\", \"onSubmitCallback\"]);\n\n  var _useState = useState(0),\n      sectionTabValue = _useState[0],\n      setSectionTabValue = _useState[1];\n\n  var _useState2 = useState(0),\n      labelTabValue = _useState2[0],\n      setLabelTabValue = _useState2[1];\n\n  var _useState3 = useState('all'),\n      selectedCategory = _useState3[0],\n      setSelectedCategory = _useState3[1];\n\n  var _useCms = useCms('listingContent'),\n      productFiltersContent = _useCms.productFiltersContent;\n\n  var _useFilters = useFilters(),\n      filterMethods = _useFilters.filterMethods,\n      filterState = _useFilters.filterState,\n      normalizedFilters = _useFilters.normalizedFilters;\n\n  var router = useRouter();\n  var brandList = useBrandList();\n  var selectedSection = (_navigationData$secti = navigationData[sectionTabValue]) === null || _navigationData$secti === void 0 ? void 0 : _navigationData$secti.title;\n  var hasMultipleLabels = ((_navigationData$secti2 = navigationData[sectionTabValue]) === null || _navigationData$secti2 === void 0 ? void 0 : _navigationData$secti2.subNav.length) > 1;\n\n  var getCategoryList = function getCategoryList() {\n    var _navigationData$secti3;\n\n    return (_navigationData$secti3 = navigationData[sectionTabValue]) === null || _navigationData$secti3 === void 0 ? void 0 : _navigationData$secti3.subNav[labelTabValue].subNavItems;\n  };\n\n  var handleCheckBoxChange = function handleCheckBoxChange(value) {\n    var brands = filterState.brands;\n\n    if (brands.includes(value)) {\n      filterMethods.setBrands(brands.filter(function (brand) {\n        return urlCase(brand) !== value;\n      }));\n    } else {\n      filterMethods.setBrands([].concat(_toConsumableArray(brands), [value]));\n    }\n  };\n\n  var submitQuickFinder = function submitQuickFinder() {\n    var path = '';\n    var keyWords = normalizedFilters.keyWords,\n        saleThreshold = normalizedFilters.saleThreshold,\n        brands = normalizedFilters.brands;\n    var urlParts = [];\n    var isSearchBaseUrl = selectedCategory === 'all';\n    var base = isSearchBaseUrl ? \"/\".concat(SEARCH_PATH, \"?section=\").concat(selectedSection) : \"/\".concat(PLP_PATH, \"/\").concat(urlCase(selectedSection), \"/\").concat(urlCase(selectedCategory));\n    if (keyWords !== null && keyWords !== void 0 && keyWords.length) urlParts.push(\"key-words=\".concat(keyWords.join(',')));\n    if (brands !== null && brands !== void 0 && brands.length) urlParts.push(\"brands=\".concat(brands.join(',')));\n    if (saleThreshold && parseInt(saleThreshold)) urlParts.push(\"sale-threshold=\".concat(saleThreshold));\n\n    if (isSearchBaseUrl && urlParts.length > 0) {\n      path = \"&\".concat(urlParts.join('&'));\n    } else {\n      path = urlParts.length ? \"/filter/\".concat(urlParts.join('&')) : '';\n    }\n\n    if (onSubmitCallback) onSubmitCallback();\n    router.push(\"\".concat(base).concat(path));\n  };\n\n  var quickFindSectionLabel = function quickFindSectionLabel(text) {\n    return __jsx(SectionLabel, {\n      container: true\n    }, __jsx(Typography, {\n      tag: \"h2\",\n      weight: 500,\n      margin: \"10px 0px 10px 0px\"\n    }, text));\n  };\n\n  return __jsx(QuickViewModal, _extends({\n    onSubmitModal: submitQuickFinder\n  }, modalProps), __jsx(QuickSectionTabs, {\n    container: true\n  }, __jsx(SectionTabs, {\n    navigationData: navigationData,\n    sectionTabValue: sectionTabValue,\n    setSectionTabValue: setSectionTabValue\n  })), quickFindSectionLabel('Category'), hasMultipleLabels && __jsx(QuickViewSection, null, __jsx(LabelTabs, {\n    navigationData: navigationData,\n    sectionTabValue: sectionTabValue,\n    labelTabValue: labelTabValue,\n    setLabelTabValue: setLabelTabValue\n  })), __jsx(QuickViewSection, null, __jsx(RadioGroup, {\n    \"aria-label\": \"set category\",\n    name: \"set-category\",\n    value: selectedCategory,\n    onChange: function onChange(event) {\n      var _event$target;\n\n      return setSelectedCategory((_event$target = event.target) === null || _event$target === void 0 ? void 0 : _event$target.value);\n    }\n  }, __jsx(RadioItemContainer, {\n    container: true\n  }, __jsx(RadioItem, {\n    item: true,\n    xs: 12,\n    sm: 6\n  }, __jsx(FormControlLabel, {\n    value: 'all',\n    label: \"I'm casually browsing\",\n    control: __jsx(RadioButton, null)\n  })), (_getCategoryList = getCategoryList()) === null || _getCategoryList === void 0 ? void 0 : _getCategoryList.map(function (_ref2, catIndex) {\n    var title = _ref2.title;\n    return __jsx(RadioItem, {\n      item: true,\n      xs: 12,\n      sm: 6,\n      key: \"\".concat(title, \"-\").concat(catIndex)\n    }, __jsx(FormControlLabel, {\n      value: title,\n      label: startCase(title),\n      control: __jsx(RadioButton, null)\n    }));\n  })))), quickFindSectionLabel('Sale'), __jsx(QuickViewSection, null, __jsx(RadioGroup, {\n    \"aria-label\": \"sale filter\",\n    name: \"sale-filter\",\n    value: filterState.saleThreshold,\n    onChange: function onChange(event) {\n      var _event$target2;\n\n      return filterMethods.setSaleThreshold((_event$target2 = event.target) === null || _event$target2 === void 0 ? void 0 : _event$target2.value);\n    }\n  }, __jsx(FormControlLabel, {\n    value: '0',\n    control: __jsx(RadioButton, null),\n    label: \"All products\"\n  }), __jsx(FormControlLabel, {\n    value: '1',\n    control: __jsx(RadioButton, null),\n    label: \"All sale items\"\n  }), __jsx(FormControlLabel, {\n    value: '20',\n    control: __jsx(RadioButton, null),\n    label: \"20% and more\"\n  }), __jsx(FormControlLabel, {\n    value: '50',\n    control: __jsx(RadioButton, null),\n    label: \"50% and more\"\n  }), __jsx(FormControlLabel, {\n    value: '70',\n    control: __jsx(RadioButton, null),\n    label: \"70% and more\"\n  }))), quickFindSectionLabel('Brands'), __jsx(QuickViewSection, null, brandList.map(function (brand) {\n    return __jsx(Grid, {\n      key: brand\n    }, __jsx(FormControlLabel, {\n      value: urlCase(brand),\n      control: __jsx(Checkbox, {\n        checked: filterState.brands.includes(urlCase(brand)),\n        onChange: function onChange(_ref3) {\n          var target = _ref3.target;\n          return handleCheckBoxChange(target.value);\n        }\n      }),\n      label: brand\n    }));\n  })), quickFindSectionLabel('Key words'), __jsx(QuickViewSection, null, __jsx(Spacer, {\n    h: 8\n  }), __jsx(Input, {\n    fullWidth: true,\n    variant: \"outlined\",\n    label: !filterState.keyWords.length ? productFiltersContent.keyWordsInputLabel : '',\n    value: keyWordsToString(filterState.keyWords),\n    onChange: function onChange(_ref4) {\n      var target = _ref4.target;\n      return filterMethods.setKeyWords(target.value && target.value.toLowerCase().replace(',', ' ').split(' ') || []);\n    }\n  })));\n}","map":null,"metadata":{},"sourceType":"module"}