{"ast":null,"code":"import _defineProperty from \"/Users/justincoulston/Desktop/affilaite-core-mono/node_modules/next/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nvar __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport React from 'react';\nimport { Spacer } from '@styles/CommonStyledComponents';\nimport Input from '@units/Input';\nimport ArrowBackIcon from '@material-ui/icons/ArrowBack';\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\nimport RadioButton from '@units/RadioButton';\nimport { EditContainer, BackCopy, StyledRadioGroup } from './styles';\nimport upperFirst from 'lodash/upperFirst';\nimport Typography from '@units/Typography';\nimport Grid from '@material-ui/core/Grid';\nimport Switch from '@material-ui/core/Switch';\nimport { useThemeColor } from '@hooks';\n\nfunction UserEditSetting(_ref) {\n  var setting = _ref.setting,\n      user = _ref.user,\n      setUserSettings = _ref.setUserSettings,\n      setCurrentEditSetting = _ref.setCurrentEditSetting;\n  var renderEditContent;\n  var property = setting.property,\n      title = setting.title,\n      description = setting.description;\n  var labelTitle = upperFirst(property);\n\n  var _useThemeColor = useThemeColor('all'),\n      slate = _useThemeColor.slate;\n\n  switch (property) {\n    case 'name':\n      renderEditContent = __jsx(Input, {\n        fullWidth: true,\n        label: labelTitle,\n        value: user.name,\n        onChange: function onChange(_ref2) {\n          var target = _ref2.target;\n          setUserSettings(_objectSpread(_objectSpread({}, user), {}, _defineProperty({}, property, target.value)));\n        }\n      });\n      break;\n\n    case 'gender':\n      renderEditContent = __jsx(StyledRadioGroup, {\n        direction: \"column\",\n        \"aria-label\": \"gender\",\n        name: \"gender\",\n        value: user.gender,\n        onChange: function onChange(_ref3) {\n          var target = _ref3.target;\n          setUserSettings(_objectSpread(_objectSpread({}, user), {}, _defineProperty({}, property, target.value)));\n        }\n      }, __jsx(FormControlLabel, {\n        value: \"Male\",\n        control: __jsx(RadioButton, {\n          color: \"primary\"\n        }),\n        label: \"Male\"\n      }), __jsx(Spacer, {\n        h: 7\n      }), __jsx(FormControlLabel, {\n        value: \"Female\",\n        control: __jsx(RadioButton, {\n          color: \"primary\"\n        }),\n        label: \"Female\"\n      }), __jsx(Spacer, {\n        h: 7\n      }), __jsx(FormControlLabel, {\n        value: \"Other\",\n        control: __jsx(RadioButton, {\n          color: \"primary\"\n        }),\n        label: \"Other\"\n      }), __jsx(Spacer, {\n        h: 7\n      }));\n      break;\n\n    case 'notifications':\n      renderEditContent = __jsx(Switch, {\n        color: \"primary\",\n        checked: user.notifications,\n        onChange: function onChange(_ref4) {\n          var target = _ref4.target;\n          setUserSettings(_objectSpread(_objectSpread({}, user), {}, _defineProperty({}, property, target.checked)));\n        },\n        name: \"notifications\",\n        inputProps: {\n          'aria-label': 'notifications'\n        }\n      });\n      break;\n\n    case 'allowCookies':\n      renderEditContent = __jsx(Switch, {\n        color: \"primary\",\n        checked: user.allowCookies,\n        onChange: function onChange(_ref5) {\n          var target = _ref5.target;\n          setUserSettings(_objectSpread(_objectSpread({}, user), {}, _defineProperty({}, property, target.checked)));\n        },\n        name: \"cookies\",\n        inputProps: {\n          'aria-label': 'notifications'\n        }\n      });\n      break;\n  }\n\n  return __jsx(EditContainer, null, __jsx(Grid, {\n    container: true\n  }, __jsx(Grid, {\n    item: true,\n    xs: 12\n  }, __jsx(Typography, {\n    tag: \"p\",\n    decoration: 'underline',\n    padding: '10px 0 30px 0'\n  }, __jsx(BackCopy, {\n    onClick: function onClick() {\n      return setCurrentEditSetting(null);\n    }\n  }, __jsx(ArrowBackIcon, null), \" \", __jsx(\"span\", null, \"settings\")))), __jsx(Grid, {\n    item: true,\n    xs: 12\n  }, __jsx(Typography, {\n    tag: \"h3\",\n    padding: '10px 0 30px 0'\n  }, title)), description && __jsx(Grid, {\n    item: true,\n    xs: 12\n  }, __jsx(Typography, {\n    tag: \"p\",\n    padding: '10px 0 30px 0',\n    fullWidth: true,\n    color: slate\n  }, description))), renderEditContent);\n}\n\nexport default UserEditSetting;","map":null,"metadata":{},"sourceType":"module"}