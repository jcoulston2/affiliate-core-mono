{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/extends\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nvar _jsxFileName = \"/Users/justincoulston/Desktop/affilaite-core-mono/packages/app/components/modules/ProductDetailView/ProductDescription.js\";\nvar __jsx = React.createElement;\nimport React, { useState } from 'react';\nimport Grid from '@material-ui/core/Grid';\nimport Copy from '@units/Copy';\nimport styled from 'styled-components';\nimport Typography from '@units/Typography';\nimport { Spacer } from '@styles/CommonStyledComponents';\nimport { hasValidTabbedData, mapCustomDataToTabs } from './helper';\nimport { toArray } from '@helpers/common';\nimport upperFirst from 'lodash/upperFirst';\nimport { useTheme } from '@hooks';\nimport startCase from 'lodash/startCase';\nconst DetailTab = styled((_ref) => {\n  let {\n    isActive,\n    textAlign,\n    markerColor,\n    children\n  } = _ref,\n      rest = _objectWithoutProperties(_ref, [\"isActive\", \"textAlign\", \"markerColor\", \"children\"]);\n\n  return __jsx(Grid, _extends({}, rest, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 32,\n      columnNumber: 3\n    }\n  }), children);\n}).withConfig({\n  displayName: \"ProductDescription__DetailTab\",\n  componentId: \"od93dl-0\"\n})([\"&&{cursor:pointer;opacity:0.5;margin-bottom:0.5em;text-align:\", \";&:hover{opacity:0.7;}\", \"}\"], props => props.textAlign, ({\n  isActive,\n  markerColor\n}) => isActive && `\n      opacity: 1;\n      h4 {\n        &::after {\n          content: ' ';\n          width: 38px;\n          height: 2px;\n          background: ${markerColor};\n          display: block;\n          position: relative;\n          top: 9px;\n        }        \n      }\n\n    `);\nconst CardList = styled.ul.withConfig({\n  displayName: \"ProductDescription__CardList\",\n  componentId: \"od93dl-1\"\n})([\"padding-left:0px;display:inline-block;ist-style-type:none;margin-top:5px;width:100%;li{display:flex;align-items:center;padding:2px 0px;justify-content:flex-start;}\"]);\n\nfunction ProductDescription({\n  productDescriptionTitleCopy,\n  productDeliveryTitleCopy,\n  commonLabel,\n  description,\n  delivery,\n  moreInfoCopy,\n  moreInfoText,\n  productLink,\n  genericProductDescriptionText,\n  genericProductDescriptionCopy,\n  customDescriptiveData,\n  brand\n}) {\n  const {\n    0: activeDescriptionTab,\n    1: setActiveDescriptionTab\n  } = useState(0);\n  const {\n    brandThemeColors\n  } = useTheme(); // We have two primary variants (delivery and description), there should always be a description\n  // tab but it is not always encouraged for the extractor to pull in bespoke description & delivery\n  // for a given product due to the different formating and cases of different brands but we include\n  // it anyway. There should always be some generic description shown from the CMS which encourages\n  // the user to navigate to the official store.\n\n  const tabsInfomration = [{\n    title: productDescriptionTitleCopy,\n    data: toArray(description),\n    isDefault: true\n  }, {\n    title: productDeliveryTitleCopy,\n    data: toArray(delivery)\n  }, // Custom non primary data will get rendered as a tab\n  ...mapCustomDataToTabs(customDescriptiveData) // we run a quick filter on valid variants to prevent rendering empty data\n  ].filter(({\n    data,\n    isDefault\n  }) => hasValidTabbedData(data, isDefault));\n  const hasMultipleTabs = tabsInfomration.length > 1; // Tab clickable headings\n\n  const getTabs = tabsInfomration.map(({\n    title\n  }, index) => __jsx(DetailTab, {\n    markerColor: brandThemeColors.primaryColor,\n    textAlign: hasMultipleTabs ? 'center' : 'left',\n    key: index,\n    item: true,\n    xs: true,\n    isActive: index === activeDescriptionTab,\n    onClick: () => setActiveDescriptionTab(index),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 122,\n      columnNumber: 5\n    }\n  }, __jsx(Typography, {\n    tag: \"h4\",\n    typeStyles: commonLabel,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 130,\n      columnNumber: 7\n    }\n  }, __jsx(Copy, {\n    text: title,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 131,\n      columnNumber: 9\n    }\n  })))); // Tab inner content\n\n  const getTabsContent = tabsInfomration.map(({\n    data: descriptiveValues\n  }, index) => index === activeDescriptionTab && __jsx(CardList, {\n    key: index,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 140,\n      columnNumber: 9\n    }\n  }, descriptiveValues.map((descriptiveValue, index) => descriptiveValue && __jsx(\"li\", {\n    key: index,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 144,\n      columnNumber: 17\n    }\n  }, __jsx(Typography, {\n    tag: \"p\",\n    typeStyles: genericProductDescriptionCopy,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 145,\n      columnNumber: 19\n    }\n  }, __jsx(Copy, {\n    text: upperFirst(descriptiveValue),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 146,\n      columnNumber: 21\n    }\n  })))))); // Cms copy\n\n  const getCmsContent = genericProductDescriptionText.map((cmsDescriptiveText, index) => __jsx(Grid, {\n    container: true,\n    xs: 12,\n    key: index,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 157,\n      columnNumber: 5\n    }\n  }, __jsx(Typography, {\n    tag: \"p\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 158,\n      columnNumber: 7\n    }\n  }, __jsx(Copy, {\n    text: cmsDescriptiveText,\n    replaceText: startCase(brand),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 159,\n      columnNumber: 9\n    }\n  })), __jsx(Spacer, {\n    h: 5,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 161,\n      columnNumber: 7\n    }\n  })));\n  return __jsx(Grid, {\n    item: true,\n    container: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 166,\n      columnNumber: 5\n    }\n  }, getTabs, getTabsContent, getCmsContent, __jsx(Spacer, {\n    h: 5,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 170,\n      columnNumber: 7\n    }\n  }), __jsx(Typography, {\n    tag: \"p\",\n    typeStyles: moreInfoCopy,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 171,\n      columnNumber: 7\n    }\n  }, __jsx(\"a\", {\n    href: productLink,\n    title: moreInfoText,\n    target: \"_blank\",\n    rel: \"nofollow\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 172,\n      columnNumber: 9\n    }\n  }, __jsx(Copy, {\n    text: moreInfoText,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 173,\n      columnNumber: 11\n    }\n  }))));\n}\n\nexport default ProductDescription;","map":{"version":3,"sources":["/Users/justincoulston/Desktop/affilaite-core-mono/packages/app/components/modules/ProductDetailView/ProductDescription.js"],"names":["React","useState","Grid","Copy","styled","Typography","Spacer","hasValidTabbedData","mapCustomDataToTabs","toArray","upperFirst","useTheme","startCase","DetailTab","isActive","textAlign","markerColor","children","rest","props","CardList","ul","ProductDescription","productDescriptionTitleCopy","productDeliveryTitleCopy","commonLabel","description","delivery","moreInfoCopy","moreInfoText","productLink","genericProductDescriptionText","genericProductDescriptionCopy","customDescriptiveData","brand","activeDescriptionTab","setActiveDescriptionTab","brandThemeColors","tabsInfomration","title","data","isDefault","filter","hasMultipleTabs","length","getTabs","map","index","primaryColor","getTabsContent","descriptiveValues","descriptiveValue","getCmsContent","cmsDescriptiveText"],"mappings":"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","sourcesContent":["//@flow\nimport React, { useState } from 'react';\nimport Grid from '@material-ui/core/Grid';\nimport { type CmsCopy } from '@types/cms';\nimport { type ProductCustomVariant } from '@types/product';\nimport Copy from '@units/Copy';\nimport styled from 'styled-components';\nimport Typography from '@units/Typography';\nimport { Spacer } from '@styles/CommonStyledComponents';\nimport { hasValidTabbedData, mapCustomDataToTabs } from './helper';\nimport { toArray } from '@helpers/common';\nimport upperFirst from 'lodash/upperFirst';\nimport { useTheme } from '@hooks';\nimport startCase from 'lodash/startCase';\n\ntype ProductDescriptionProps = {\n  productDescriptionTitleCopy: string,\n  productDeliveryTitleCopy: string,\n  commonLabel: CmsCopy,\n  description?: string | Array<string>,\n  delivery?: string | Array<string>,\n  moreInfoCopy: CmsCopy,\n  moreInfoText: string,\n  productLink: string,\n  genericProductDescriptionCopy: CmsCopy,\n  genericProductDescriptionText: Array<string>,\n  customDescriptiveData: Array<ProductCustomVariant>,\n  brand: string,\n};\n\nconst DetailTab = styled(({ isActive, textAlign, markerColor, children, ...rest }) => (\n  <Grid {...rest}>{children}</Grid>\n))`\n  && {\n    cursor: pointer;\n    opacity: 0.5;\n    margin-bottom: 0.5em;\n    text-align: ${(props) => props.textAlign};\n\n    &:hover {\n      opacity: 0.7;\n    }\n\n    ${({ isActive, markerColor }) =>\n      isActive &&\n      `\n      opacity: 1;\n      h4 {\n        &::after {\n          content: ' ';\n          width: 38px;\n          height: 2px;\n          background: ${markerColor};\n          display: block;\n          position: relative;\n          top: 9px;\n        }        \n      }\n\n    `}\n  }\n`;\n\nconst CardList = styled.ul`\n  padding-left: 0px;\n  display: inline-block;\n  ist-style-type: none;\n  margin-top: 5px;\n  width: 100%;\n\n  li {\n    display: flex;\n    align-items: center;\n    padding: 2px 0px;\n    justify-content: flex-start;\n  }\n`;\n\nfunction ProductDescription({\n  productDescriptionTitleCopy,\n  productDeliveryTitleCopy,\n  commonLabel,\n  description,\n  delivery,\n  moreInfoCopy,\n  moreInfoText,\n  productLink,\n  genericProductDescriptionText,\n  genericProductDescriptionCopy,\n  customDescriptiveData,\n  brand,\n}: ProductDescriptionProps) {\n  const [activeDescriptionTab, setActiveDescriptionTab] = useState(0);\n  const { brandThemeColors } = useTheme();\n\n  // We have two primary variants (delivery and description), there should always be a description\n  // tab but it is not always encouraged for the extractor to pull in bespoke description & delivery\n  // for a given product due to the different formating and cases of different brands but we include\n  // it anyway. There should always be some generic description shown from the CMS which encourages\n  // the user to navigate to the official store.\n  const tabsInfomration = [\n    {\n      title: productDescriptionTitleCopy,\n      data: toArray(description),\n      isDefault: true,\n    },\n    {\n      title: productDeliveryTitleCopy,\n      data: toArray(delivery),\n    },\n\n    // Custom non primary data will get rendered as a tab\n    ...mapCustomDataToTabs(customDescriptiveData),\n\n    // we run a quick filter on valid variants to prevent rendering empty data\n  ].filter(({ data, isDefault }: Object) => hasValidTabbedData(data, isDefault));\n\n  const hasMultipleTabs = tabsInfomration.length > 1;\n\n  // Tab clickable headings\n  const getTabs = tabsInfomration.map(({ title }, index) => (\n    <DetailTab\n      markerColor={brandThemeColors.primaryColor}\n      textAlign={hasMultipleTabs ? 'center' : 'left'}\n      key={index}\n      item\n      xs\n      isActive={index === activeDescriptionTab}\n      onClick={() => setActiveDescriptionTab(index)}>\n      <Typography tag=\"h4\" typeStyles={commonLabel}>\n        <Copy text={title} />\n      </Typography>\n    </DetailTab>\n  ));\n\n  // Tab inner content\n  const getTabsContent = tabsInfomration.map(\n    ({ data: descriptiveValues }, index) =>\n      index === activeDescriptionTab && (\n        <CardList key={index}>\n          {descriptiveValues.map(\n            (descriptiveValue, index) =>\n              descriptiveValue && (\n                <li key={index}>\n                  <Typography tag=\"p\" typeStyles={genericProductDescriptionCopy}>\n                    <Copy text={upperFirst(descriptiveValue)} />\n                  </Typography>\n                </li>\n              )\n          )}\n        </CardList>\n      )\n  );\n\n  // Cms copy\n  const getCmsContent = genericProductDescriptionText.map((cmsDescriptiveText, index) => (\n    <Grid container xs={12} key={index}>\n      <Typography tag=\"p\">\n        <Copy text={cmsDescriptiveText} replaceText={startCase(brand)} />\n      </Typography>\n      <Spacer h={5} />\n    </Grid>\n  ));\n\n  return (\n    <Grid item container>\n      {getTabs}\n      {getTabsContent}\n      {getCmsContent}\n      <Spacer h={5} />\n      <Typography tag=\"p\" typeStyles={moreInfoCopy}>\n        <a href={productLink} title={moreInfoText} target=\"_blank\" rel=\"nofollow\">\n          <Copy text={moreInfoText} />\n        </a>\n      </Typography>\n    </Grid>\n  );\n}\n\nexport default ProductDescription;\n"]},"metadata":{},"sourceType":"module"}