{"ast":null,"code":"import _extends from \"/Users/justincoulston/Desktop/affilaite-core-mono/node_modules/next/node_modules/@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutProperties from \"/Users/justincoulston/Desktop/affilaite-core-mono/node_modules/next/node_modules/@babel/runtime/helpers/esm/objectWithoutProperties\";\nvar __jsx = React.createElement;\nimport React from 'react';\nimport Link from 'next/link';\n// Sometimes there are some issues using next/link when liking to static dynamic pages\n// if we do encounter such issues, we can use this component, and pass in the prop\n// \"useNativeLink\", along with a href. This will just switch to a standard native link.\n// It's good to define it in a single component when linking to the CMS especially when\n// using with Typography\nexport default function CustomLink(_ref) {\n  var useNativeLink = _ref.useNativeLink,\n      children = _ref.children,\n      href = _ref.href,\n      nextLinkProps = _objectWithoutProperties(_ref, [\"useNativeLink\", \"children\", \"href\"]);\n\n  return useNativeLink ? __jsx(\"a\", {\n    href: href\n  }, children) : __jsx(Link, _extends({\n    href: href\n  }, nextLinkProps), __jsx(\"a\", null, children));\n}","map":null,"metadata":{},"sourceType":"module"}