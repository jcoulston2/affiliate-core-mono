{"ast":null,"code":"import _extends from \"/Users/justincoulston/Desktop/affilaite-core-mono/node_modules/next/node_modules/@babel/runtime/helpers/esm/extends\";\n\nvar _jsxFileName = \"/Users/justincoulston/Desktop/affilaite-core-mono/packages/app/containers/ListingContent/ListingContent.js\",\n    _this = this,\n    _s = $RefreshSig$();\n\nvar __jsx = React.createElement;\nimport React from 'react';\nimport { connect } from 'react-redux';\nimport ProductListing from '@modules/ProductListing';\nimport ProductDetailView from '@modules/ProductDetailView';\nimport ListingHero from '@modules/ListingHero';\nimport { useCms } from '@hooks';\nimport { actions } from './actions';\nimport { Spacer } from '@styles/CommonStyledComponents';\nimport { getProductLink } from '@helpers/page';\n\nvar ListingContent = function ListingContent(_ref) {\n  _s();\n\n  var initialProductData = _ref.initialProductData,\n      fetchedProducts = _ref.fetchedProducts,\n      fetchProductsInSearch = _ref.fetchProductsInSearch,\n      totalProductsInCategory = _ref.totalProductsInCategory,\n      productViewOpen = _ref.productViewOpen,\n      productViewData = _ref.productViewData,\n      populateProductView = _ref.populateProductView,\n      openProductDetailView = _ref.openProductDetailView,\n      fetchProducts = _ref.fetchProducts,\n      productFilters = _ref.productFilters,\n      productSearchValues = _ref.productSearchValues,\n      hasFiltersSetFromClient = _ref.hasFiltersSetFromClient,\n      setClientFilterStatus = _ref.setClientFilterStatus,\n      loading = _ref.loading,\n      setLoading = _ref.setLoading;\n  var section = initialProductData.section,\n      sectionData = initialProductData.data;\n\n  var _useCms = useCms('listingContent'),\n      productListingContent = _useCms.productListingContent,\n      productViewContent = _useCms.productViewContent,\n      productListingHeroContent = _useCms.productListingHeroContent;\n\n  var _ref2 = sectionData[0] || {},\n      category = _ref2.category,\n      initialProducts = _ref2.data,\n      totalFromBuild = _ref2.totalProductsInCategory,\n      categoryLastUpdated = _ref2.categoryLastUpdated;\n\n  var productLink = getProductLink(productViewData); // We need to check the totalProductsInCategory property from both the static prop fetching and the client fetching\n  // for the filter update/fetch functionality. This is used for the 'load more' button on the listing page.\n\n  var totalCategoryProducts = totalProductsInCategory || totalFromBuild; // When we have filters selected, the product fetching will be handled via the client for SPA functionality\n  // this means that we can omit the inital products given via 'getStaticProps' which was executed server-side.\n  // When we clear the filters, we just do a simple page refresh and getStaticProps executes again.\n\n  var initialProductsProps = hasFiltersSetFromClient ? [] : initialProducts || [];\n  return __jsx(\"section\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 5\n    }\n  }, __jsx(ListingHero, _extends({}, productListingHeroContent, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 7\n    }\n  })), __jsx(ProductListing, _extends({}, productListingContent, {\n    section: section,\n    category: category,\n    totalCategoryProducts: totalCategoryProducts,\n    fetchedProducts: fetchedProducts,\n    productSearchValues: productSearchValues,\n    fetchProductsInSearch: fetchProductsInSearch,\n    populateProductView: populateProductView,\n    openProductDetailView: openProductDetailView,\n    fetchProducts: fetchProducts,\n    setLoading: setLoading,\n    loading: loading,\n    productFilters: productFilters,\n    setClientFilterStatus: setClientFilterStatus,\n    initialProducts: initialProductsProps\n  }, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 7\n    }\n  })), __jsx(ProductDetailView, _extends({}, productViewContent, {\n    productViewOpen: productViewOpen,\n    productViewData: productViewData,\n    openProductDetailView: openProductDetailView,\n    productLink: productLink,\n    categoryLastUpdated: categoryLastUpdated\n  }, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 97,\n      columnNumber: 7\n    }\n  })), __jsx(Spacer, {\n    h: 20,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 107,\n      columnNumber: 7\n    }\n  }));\n};\n\n_s(ListingContent, \"w4uZq1jylwy42ClCj+LPTTO56zw=\", false, function () {\n  return [useCms];\n});\n\n_c = ListingContent;\n\nfunction mapDispatchToProps(dispatch) {\n  return {\n    populateProductView: function populateProductView(productViewData) {\n      return dispatch(actions.populateProductView(productViewData));\n    },\n    openProductDetailView: function openProductDetailView() {\n      return dispatch(actions.openProductDetailView());\n    },\n    fetchProducts: function fetchProducts() {\n      return dispatch(actions.fetchProducts.apply(actions, arguments));\n    },\n    fetchProductsInSearch: function fetchProductsInSearch() {\n      return dispatch(actions.fetchProductsInSearch.apply(actions, arguments));\n    },\n    setClientFilterStatus: function setClientFilterStatus(status) {\n      return dispatch(actions.setClientFilterStatus(status));\n    },\n    setLoading: function setLoading(status) {\n      return dispatch(actions.setLoading(status));\n    }\n  };\n}\n\nfunction mapStateToProps(_ref3) {\n  var buildTimeState = _ref3.buildTimeState,\n      listingContentState = _ref3.listingContentState;\n  var initialProductData = buildTimeState.productData,\n      productFilters = buildTimeState.productFilters,\n      productSearchValues = buildTimeState.productSearchValues;\n  var productViewData = listingContentState.productViewData,\n      productViewOpen = listingContentState.productViewOpen,\n      fetchedProducts = listingContentState.fetchedProducts,\n      totalProductsInCategory = listingContentState.totalProductsInCategory,\n      hasFiltersSetFromClient = listingContentState.hasFiltersSetFromClient,\n      loading = listingContentState.loading;\n  return {\n    initialProductData: initialProductData,\n    productFilters: productFilters,\n    productSearchValues: productSearchValues,\n    fetchedProducts: fetchedProducts,\n    totalProductsInCategory: totalProductsInCategory,\n    productViewOpen: productViewOpen,\n    productViewData: productViewData,\n    hasFiltersSetFromClient: hasFiltersSetFromClient,\n    loading: loading\n  };\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(ListingContent);\n\nvar _c;\n\n$RefreshReg$(_c, \"ListingContent\");","map":{"version":3,"sources":["/Users/justincoulston/Desktop/affilaite-core-mono/packages/app/containers/ListingContent/ListingContent.js"],"names":["React","connect","ProductListing","ProductDetailView","ListingHero","useCms","actions","Spacer","getProductLink","ListingContent","initialProductData","fetchedProducts","fetchProductsInSearch","totalProductsInCategory","productViewOpen","productViewData","populateProductView","openProductDetailView","fetchProducts","productFilters","productSearchValues","hasFiltersSetFromClient","setClientFilterStatus","loading","setLoading","section","sectionData","data","productListingContent","productViewContent","productListingHeroContent","category","initialProducts","totalFromBuild","categoryLastUpdated","productLink","totalCategoryProducts","initialProductsProps","mapDispatchToProps","dispatch","status","mapStateToProps","buildTimeState","listingContentState","productData"],"mappings":"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","sourcesContent":["//@flow\nimport React from 'react';\nimport { connect } from 'react-redux';\nimport ProductListing from '@modules/ProductListing';\nimport ProductDetailView from '@modules/ProductDetailView';\nimport ListingHero from '@modules/ListingHero';\nimport { useCms } from '@hooks';\nimport { actions } from './actions';\nimport { type ProductData, type ProductSection } from '@types/product';\nimport { type PredictiveSearch } from '@types/search';\nimport { type GlobalState } from '../../types/appState';\nimport { Spacer } from '@styles/CommonStyledComponents';\nimport { getProductLink } from '@helpers/page';\nimport { type Filters } from '@types/product';\n\ntype ListingContentProps = {\n  fetchedProducts: Function,\n  fetchProductsInSearch: Function,\n  totalProductsInCategory: ?number,\n  initialProductData: ProductSection,\n  productFilters: Filters,\n  productSearchValues: PredictiveSearch,\n  productViewOpen: boolean,\n  productViewData: ProductData,\n  populateProductView: Function,\n  openProductDetailView: Function,\n  fetchProducts: Function,\n  setClientFilterStatus: Function,\n  hasFiltersSetFromClient: boolean,\n  setLoading: Function,\n  loading: boolean,\n};\n\nconst ListingContent = ({\n  initialProductData,\n  fetchedProducts,\n  fetchProductsInSearch,\n  totalProductsInCategory,\n  productViewOpen,\n  productViewData,\n  populateProductView,\n  openProductDetailView,\n  fetchProducts,\n  productFilters,\n  productSearchValues,\n  hasFiltersSetFromClient,\n  setClientFilterStatus,\n  loading,\n  setLoading,\n}: ListingContentProps) => {\n  const { section, data: sectionData } = initialProductData;\n  const { productListingContent, productViewContent, productListingHeroContent } = useCms(\n    'listingContent'\n  );\n\n  const {\n    category,\n    data: initialProducts,\n    totalProductsInCategory: totalFromBuild,\n    categoryLastUpdated,\n  } = sectionData[0] || {};\n\n  const productLink = getProductLink(productViewData);\n\n  // We need to check the totalProductsInCategory property from both the static prop fetching and the client fetching\n  // for the filter update/fetch functionality. This is used for the 'load more' button on the listing page.\n  const totalCategoryProducts = totalProductsInCategory || totalFromBuild;\n\n  // When we have filters selected, the product fetching will be handled via the client for SPA functionality\n  // this means that we can omit the inital products given via 'getStaticProps' which was executed server-side.\n  // When we clear the filters, we just do a simple page refresh and getStaticProps executes again.\n  const initialProductsProps = hasFiltersSetFromClient ? [] : initialProducts || [];\n\n  return (\n    <section>\n      <ListingHero {...productListingHeroContent} />\n      <ProductListing\n        {...productListingContent}\n        {...{\n          section,\n          category,\n          totalCategoryProducts,\n          fetchedProducts,\n          productSearchValues,\n          fetchProductsInSearch,\n          populateProductView,\n          openProductDetailView,\n          fetchProducts,\n          setLoading,\n          loading,\n          productFilters,\n          setClientFilterStatus,\n          initialProducts: initialProductsProps,\n        }}\n      />\n\n      <ProductDetailView\n        {...productViewContent}\n        {...{\n          productViewOpen,\n          productViewData,\n          openProductDetailView,\n          productLink,\n          categoryLastUpdated,\n        }}\n      />\n      <Spacer h={20} />\n    </section>\n  );\n};\n\nfunction mapDispatchToProps(dispatch: Function): { [string]: Function } {\n  return {\n    populateProductView: (productViewData) =>\n      dispatch(actions.populateProductView(productViewData)),\n    openProductDetailView: () => dispatch(actions.openProductDetailView()),\n    fetchProducts: (...args) => dispatch(actions.fetchProducts(...args)),\n    fetchProductsInSearch: (...args) => dispatch(actions.fetchProductsInSearch(...args)),\n    setClientFilterStatus: (status) => dispatch(actions.setClientFilterStatus(status)),\n    setLoading: (status) => dispatch(actions.setLoading(status)),\n  };\n}\n\nfunction mapStateToProps({ buildTimeState, listingContentState }: $Shape<GlobalState>) {\n  const { productData: initialProductData, productFilters, productSearchValues } = buildTimeState;\n  const {\n    productViewData,\n    productViewOpen,\n    fetchedProducts,\n    totalProductsInCategory,\n    hasFiltersSetFromClient,\n    loading,\n  } = listingContentState;\n\n  return {\n    initialProductData,\n    productFilters,\n    productSearchValues,\n    fetchedProducts,\n    totalProductsInCategory,\n    productViewOpen,\n    productViewData,\n    hasFiltersSetFromClient,\n    loading,\n  };\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(ListingContent);\n"]},"metadata":{},"sourceType":"module"}