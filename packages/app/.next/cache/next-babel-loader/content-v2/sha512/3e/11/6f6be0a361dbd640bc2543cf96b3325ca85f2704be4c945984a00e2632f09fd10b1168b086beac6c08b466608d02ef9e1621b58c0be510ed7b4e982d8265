{"ast":null,"code":"import _extends from \"/Users/justincoulston/Desktop/affilaite-core-mono/node_modules/next/node_modules/@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutProperties from \"/Users/justincoulston/Desktop/affilaite-core-mono/node_modules/next/node_modules/@babel/runtime/helpers/esm/objectWithoutProperties\";\n\nvar _jsxFileName = \"/Users/justincoulston/Desktop/affilaite-core-mono/packages/app/components/units/Button/Button.js\",\n    _this = this,\n    _s = $RefreshSig$();\n\nvar __jsx = React.createElement;\nimport React from 'react';\nimport Button from '@material-ui/core/Button';\nimport styled from 'styled-components';\nimport { useTheme } from '@hooks';\nimport Typography from '@units/Typography';\nimport Copy from '@units/Copy';\nvar StyledButton = styled(function (_ref) {\n  var color = _ref.color,\n      maxWidth = _ref.maxWidth,\n      bgColor = _ref.bgColor,\n      padding = _ref.padding,\n      borderRadius = _ref.borderRadius,\n      textTransform = _ref.textTransform,\n      disableHover = _ref.disableHover,\n      style = _ref.style,\n      children = _ref.children,\n      rest = _objectWithoutProperties(_ref, [\"color\", \"maxWidth\", \"bgColor\", \"padding\", \"borderRadius\", \"textTransform\", \"disableHover\", \"style\", \"children\"]);\n\n  return __jsx(Button, _extends({}, rest, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 22,\n      columnNumber: 9\n    }\n  }), children);\n}).withConfig({\n  displayName: \"Button__StyledButton\",\n  componentId: \"sc-1kxdv2n-0\"\n})([\"&&{max-width:\", \";background-color:\", \";padding:\", \";border-radius:\", \";text-transform:\", \";color:\", \";font-weight:\", \";&:hover{background-color:\", \";}p > span{white-space:nowrap;}}\"], function (_ref2) {\n  var maxWidth = _ref2.maxWidth;\n  return maxWidth ? \"\".concat(maxWidth) : 'auto';\n}, function (props) {\n  return props.bgColor;\n}, function (_ref3) {\n  var padding = _ref3.padding;\n  return Number.isInteger(padding) ? \"\".concat(padding, \"px\") : padding;\n}, function (props) {\n  return props.square ? '0px' : \"\".concat(props.borderRadius || 20, \"px\");\n}, function (props) {\n  return props.textTransform;\n}, function (props) {\n  return props.color;\n}, function (props) {\n  return props.defaultFontWeight;\n}, function (props) {\n  return !props.disableHover ? '#cecece' : 'initial';\n});\n_c = StyledButton;\nexport default function BrandButton(_ref4) {\n  _s();\n\n  var propColor = _ref4.color,\n      propBgColor = _ref4.bgColor,\n      primary = _ref4.primary,\n      secondary = _ref4.secondary,\n      padding = _ref4.padding,\n      maxWidth = _ref4.maxWidth,\n      textTransform = _ref4.textTransform,\n      copy = _ref4.copy,\n      text = _ref4.text,\n      noPad = _ref4.noPad,\n      children = _ref4.children,\n      cmsEventMappings = _ref4.cmsEventMappings,\n      reference = _ref4.reference,\n      disableHover = _ref4.disableHover,\n      square = _ref4.square,\n      rest = _objectWithoutProperties(_ref4, [\"color\", \"bgColor\", \"primary\", \"secondary\", \"padding\", \"maxWidth\", \"textTransform\", \"copy\", \"text\", \"noPad\", \"children\", \"cmsEventMappings\", \"reference\", \"disableHover\", \"square\"]);\n\n  var _useTheme = useTheme(),\n      buttonTheme = _useTheme.buttonTheme;\n\n  var calculatedPadding = noPad ? 0 : padding || buttonTheme.defaultPadding;\n  var eventMap = reference && cmsEventMappings && cmsEventMappings[reference] || {};\n  var color, bgColor;\n\n  if (primary) {\n    bgColor = buttonTheme.primaryColor;\n    color = buttonTheme.primaryTextColor;\n  } else if (secondary) {\n    bgColor = buttonTheme.secondaryColor;\n    color = buttonTheme.secondaryTextColor;\n  } else {\n    color = propColor;\n    bgColor = propBgColor;\n  }\n\n  return __jsx(StyledButton, _extends({\n    color: color,\n    bgColor: bgColor,\n    maxWidth: maxWidth,\n    borderRadius: buttonTheme.borderRadius,\n    padding: calculatedPadding,\n    textTransform: textTransform,\n    defaultFontWeight: buttonTheme.defaultFontWeight,\n    disableHover: disableHover,\n    square: square\n  }, rest, eventMap, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 5\n    }\n  }), copy && __jsx(Typography, {\n    tag: \"p\",\n    typeStyles: copy,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 91,\n      columnNumber: 9\n    }\n  }, text && __jsx(Copy, {\n    text: text,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 92,\n      columnNumber: 20\n    }\n  })) || children);\n}\n\n_s(BrandButton, \"LJSnotKbO3x29vaVYnCSrjgZZG0=\", false, function () {\n  return [useTheme];\n});\n\n_c2 = BrandButton;\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"StyledButton\");\n$RefreshReg$(_c2, \"BrandButton\");","map":{"version":3,"sources":["/Users/justincoulston/Desktop/affilaite-core-mono/packages/app/components/units/Button/Button.js"],"names":["React","Button","styled","useTheme","Typography","Copy","StyledButton","color","maxWidth","bgColor","padding","borderRadius","textTransform","disableHover","style","children","rest","props","Number","isInteger","square","defaultFontWeight","BrandButton","propColor","propBgColor","primary","secondary","copy","text","noPad","cmsEventMappings","reference","buttonTheme","calculatedPadding","defaultPadding","eventMap","primaryColor","primaryTextColor","secondaryColor","secondaryTextColor"],"mappings":"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","sourcesContent":["//@flow\nimport React from 'react';\nimport Button from '@material-ui/core/Button';\nimport styled from 'styled-components';\nimport { useTheme } from '@hooks';\nimport Typography from '@units/Typography';\nimport Copy from '@units/Copy';\nimport { type CmsButton } from '@types/cms';\n\nconst StyledButton = styled(\n  ({\n    color,\n    maxWidth,\n    bgColor,\n    padding,\n    borderRadius,\n    textTransform,\n    disableHover,\n    style,\n    children,\n    ...rest\n  }) => <Button {...rest}>{children}</Button>\n)`\n  && {\n    max-width: ${({ maxWidth }) => (maxWidth ? `${maxWidth}` : 'auto')};\n    background-color: ${(props) => props.bgColor};\n    padding: ${({ padding }) => (Number.isInteger(padding) ? `${padding}px` : padding)};\n    border-radius: ${(props) => (props.square ? '0px' : `${props.borderRadius || 20}px`)};\n    text-transform: ${(props) => props.textTransform};\n    color: ${(props) => props.color};\n    font-weight: ${(props) => props.defaultFontWeight};\n    &:hover {\n      background-color: ${(props) => (!props.disableHover ? '#cecece' : 'initial')};\n    }\n\n    p > span {\n      white-space: nowrap;\n    }\n  }\n`;\n\nexport default function BrandButton({\n  color: propColor,\n  bgColor: propBgColor,\n  primary,\n  secondary,\n  padding,\n  maxWidth,\n  textTransform,\n  copy,\n  text,\n  noPad,\n  children,\n  cmsEventMappings,\n  reference,\n  disableHover,\n  square,\n  ...rest\n}: CmsButton) {\n  const { buttonTheme } = useTheme();\n  const calculatedPadding = noPad ? 0 : padding || buttonTheme.defaultPadding;\n  const eventMap = (reference && cmsEventMappings && cmsEventMappings[reference]) || {};\n\n  let color, bgColor;\n\n  if (primary) {\n    bgColor = buttonTheme.primaryColor;\n    color = buttonTheme.primaryTextColor;\n  } else if (secondary) {\n    bgColor = buttonTheme.secondaryColor;\n    color = buttonTheme.secondaryTextColor;\n  } else {\n    color = propColor;\n    bgColor = propBgColor;\n  }\n\n  return (\n    <StyledButton\n      color={color}\n      bgColor={bgColor}\n      maxWidth={maxWidth}\n      borderRadius={buttonTheme.borderRadius}\n      padding={calculatedPadding}\n      textTransform={textTransform}\n      defaultFontWeight={buttonTheme.defaultFontWeight}\n      disableHover={disableHover}\n      square={square}\n      {...rest}\n      {...eventMap}>\n      {(copy && (\n        <Typography tag=\"p\" typeStyles={copy}>\n          {text && <Copy text={text} />}\n        </Typography>\n      )) ||\n        children}\n    </StyledButton>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}