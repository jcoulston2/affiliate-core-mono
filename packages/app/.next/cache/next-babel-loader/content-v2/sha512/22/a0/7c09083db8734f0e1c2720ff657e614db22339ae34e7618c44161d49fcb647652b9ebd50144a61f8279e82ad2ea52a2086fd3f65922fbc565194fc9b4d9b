{"ast":null,"code":"import { getCalculatedDiscount, getSingle, getCurrentPrice } from '@helpers/common';\nimport { urlCase } from '@helpers/common';\nexport function filterDataPipe(data, {\n  priceSort,\n  priceThresholdLow,\n  priceThresholdHigh,\n  keyWords,\n  saleThreshold,\n  brands\n}) {\n  let filteredData = data;\n\n  if (priceThresholdLow) {\n    filteredData = filteredData.filter(({\n      topLevelData\n    }) => getCurrentPrice(topLevelData) >= priceThresholdLow);\n  }\n\n  if (priceThresholdHigh) {\n    filteredData = filteredData.filter(({\n      topLevelData\n    }) => getCurrentPrice(topLevelData) <= priceThresholdHigh);\n  }\n\n  if (saleThreshold) {\n    filteredData = filteredData.filter(({\n      topLevelData\n    }) => {\n      const wasPrice = getSingle(topLevelData.wasPrice) || NaN;\n      const nowPrice = getSingle(topLevelData.nowPrice) || NaN;\n      return getCalculatedDiscount(wasPrice, nowPrice) >= saleThreshold;\n    });\n  }\n\n  if (keyWords && keyWords.length) {\n    filteredData = filteredData.filter(({\n      topLevelData\n    }) => {\n      var _topLevelData$tags;\n\n      return ((_topLevelData$tags = topLevelData.tags) === null || _topLevelData$tags === void 0 ? void 0 : _topLevelData$tags.filter(tag => {\n        return keyWords.includes(tag);\n      }).length) === keyWords.length;\n    });\n  }\n\n  if (brands && brands.length) {\n    filteredData = filteredData.filter(({\n      metaData\n    }) => {\n      return brands.includes(urlCase(metaData.brand));\n    });\n  }\n\n  if (priceSort === 'high') {\n    filteredData = filteredData.sort((a, b) => getCurrentPrice(b.topLevelData) - getCurrentPrice(a.topLevelData));\n  }\n\n  if (priceSort === 'low') {\n    filteredData = filteredData.sort((a, b) => getCurrentPrice(a.topLevelData) - getCurrentPrice(b.topLevelData));\n  }\n\n  return filteredData;\n}\nexport function filterPipe(productSectionData, filters) {\n  const filteredData = productSectionData.map(({\n    category,\n    label,\n    data,\n    categoryLastUpdated\n  }) => {\n    return {\n      category,\n      label,\n      data: filterDataPipe(data, filters),\n      categoryLastUpdated\n    };\n  });\n  return filteredData;\n}","map":null,"metadata":{},"sourceType":"module"}