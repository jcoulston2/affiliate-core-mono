{"ast":null,"code":"function _createForOfIteratorHelper(o, allowArrayLike) { var it; if (typeof Symbol === \"undefined\" || o[Symbol.iterator] == null) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = o[Symbol.iterator](); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it[\"return\"] != null) it[\"return\"](); } finally { if (didErr) throw err; } } }; }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\nimport { crossIncludes } from '@helpers/common';\nexport function getTermString(predictiveTerms, useSplitter) {\n  if (typeof predictiveTerms === 'string') {\n    return predictiveTerms;\n  } else {\n    var values = Object.values(predictiveTerms).filter(function (notNull) {\n      return !!notNull;\n    });\n    return values.join(useSplitter ? ' | ' : ' ');\n  }\n}\nexport function getPredictiveTermsList(predictiveTermsResponse, value) {\n  var suggestions = [];\n  var pushedTerms = [];\n\n  var valueMatch = function valueMatch(p1, p2) {\n    return p1 && p2 ? (p1 === null || p1 === void 0 ? void 0 : p1.includes(p2)) || (p2 === null || p2 === void 0 ? void 0 : p2.includes(p1)) : false;\n  };\n\n  var pushSuggestion = function pushSuggestion(term) {\n    var termStr = JSON.stringify(term);\n\n    if (!pushedTerms.includes(termStr)) {\n      pushedTerms.push(termStr);\n      suggestions.push(term);\n    }\n  };\n\n  var _iterator = _createForOfIteratorHelper(predictiveTermsResponse),\n      _step;\n\n  try {\n    for (_iterator.s(); !(_step = _iterator.n()).done;) {\n      var term = _step.value;\n      var brand = term.brand,\n          section = term.section,\n          productColor = term.productColor,\n          keyTerm = term.keyTerm,\n          category = term.category;\n\n      if (valueMatch(section, value) && category) {\n        pushSuggestion({\n          section: section\n        });\n        pushSuggestion({\n          section: section,\n          category: category\n        });\n      }\n\n      if (valueMatch(brand, value)) {\n        pushSuggestion({\n          brand: brand\n        });\n        if (section) pushSuggestion({\n          section: section,\n          brand: brand\n        });\n        if (category) pushSuggestion({\n          section: section,\n          brand: brand,\n          category: category\n        });\n      }\n\n      if (valueMatch(productColor, value)) {\n        if (category) pushSuggestion({\n          section: section,\n          productColor: productColor,\n          category: category\n        });\n\n        if (category && keyTerm && !crossIncludes(category, keyTerm)) {\n          pushSuggestion({\n            section: section,\n            productColor: productColor,\n            keyTerm: keyTerm,\n            category: category\n          });\n        }\n      }\n\n      if (valueMatch(keyTerm, value) && category && !crossIncludes(category, keyTerm)) {\n        pushSuggestion({\n          section: section,\n          keyTerm: keyTerm,\n          category: category\n        });\n      }\n\n      if (valueMatch(category, value)) {\n        if (section) pushSuggestion({\n          section: section,\n          category: category\n        });\n      }\n    }\n  } catch (err) {\n    _iterator.e(err);\n  } finally {\n    _iterator.f();\n  }\n\n  return suggestions;\n}","map":null,"metadata":{},"sourceType":"module"}