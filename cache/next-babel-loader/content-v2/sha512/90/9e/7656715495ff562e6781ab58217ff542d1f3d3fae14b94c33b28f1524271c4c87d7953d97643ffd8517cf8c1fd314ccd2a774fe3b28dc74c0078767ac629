{"ast":null,"code":"import { traverseProductsBySection, traverseProductsByCategory, traverseAllProducts, eachCategoryCb, simpleSearchMatcher } from '../helper';\nimport { urlCaseMatches } from '@helpers/common';\n\nfunction productsByBrandAndSection(affiliateData, brand, section) {\n  const products = [];\n  traverseProductsBySection(affiliateData, section, {\n    level: 'product',\n    cb: product => {\n      var _product$metaData;\n\n      if (urlCaseMatches(product === null || product === void 0 ? void 0 : (_product$metaData = product.metaData) === null || _product$metaData === void 0 ? void 0 : _product$metaData.brand, brand, false)) {\n        products.push(product);\n      }\n    }\n  });\n  return products;\n}\n\nfunction productsByTermAndSec(affiliateData, section, keyTerm) {\n  const products = [];\n  traverseProductsBySection(affiliateData, section, {\n    level: 'product',\n    cb: product => {\n      const {\n        topLevelData\n      } = product;\n\n      if (simpleSearchMatcher(topLevelData === null || topLevelData === void 0 ? void 0 : topLevelData.tags, keyTerm)) {\n        products.push(product);\n      }\n    }\n  });\n  return products;\n}\n\nfunction productsByBrandAndCat(affiliateData, brand, section, category) {\n  const products = [];\n  traverseProductsByCategory(affiliateData, section, category, product => {\n    var _product$metaData2;\n\n    if (urlCaseMatches(product === null || product === void 0 ? void 0 : (_product$metaData2 = product.metaData) === null || _product$metaData2 === void 0 ? void 0 : _product$metaData2.brand, brand, false)) {\n      products.push(product);\n    }\n  });\n  return products;\n}\n\nfunction productsByColorAndCat(affiliateData, section, category, productColor) {\n  const products = [];\n  traverseProductsByCategory(affiliateData, section, category, product => {\n    var _product$topLevelData;\n\n    if ((_product$topLevelData = product.topLevelData.tags) !== null && _product$topLevelData !== void 0 && _product$topLevelData.includes(productColor)) products.push(product);\n  });\n  return products;\n}\n\nfunction productsByColorAndCatAndTerm(affiliateData, section, category, keyTerm, productColor) {\n  const products = [];\n  traverseProductsByCategory(affiliateData, section, category, product => {\n    var _topLevelData$tags;\n\n    const {\n      topLevelData\n    } = product;\n\n    if ((_topLevelData$tags = topLevelData.tags) !== null && _topLevelData$tags !== void 0 && _topLevelData$tags.includes(productColor) && simpleSearchMatcher(topLevelData === null || topLevelData === void 0 ? void 0 : topLevelData.tags, keyTerm)) {\n      products.push(product);\n    }\n  });\n  return products;\n}\n\nfunction productsByTermAndCat(affiliateData, section, category, keyTerm) {\n  const products = [];\n  traverseProductsByCategory(affiliateData, section, category, product => {\n    const {\n      topLevelData\n    } = product;\n\n    if (simpleSearchMatcher(topLevelData === null || topLevelData === void 0 ? void 0 : topLevelData.tags, keyTerm)) {\n      products.push(product);\n    }\n  });\n  return products;\n}\n\nfunction productsByCat(affiliateData, section, category) {\n  const products = [];\n  eachCategoryCb(affiliateData, section, cat => {\n    if (Array.isArray(category)) {\n      if (category.some(catItem => urlCaseMatches(catItem, cat.category))) {\n        products.push.apply(products, cat.data);\n      }\n    } else {\n      if (urlCaseMatches(category, cat.category)) {\n        products.push.apply(products, cat.data);\n      }\n    }\n  });\n  return products;\n}\n\nfunction productsBySection(affiliateData, section) {\n  const products = [];\n  eachCategoryCb(affiliateData, section, cat => {\n    products.push.apply(products, cat.data);\n  });\n  return products;\n}\n\nfunction getAllproducts(affiliateData) {\n  let products = [];\n  traverseAllProducts(affiliateData, {\n    level: 'category',\n    cb: cat => {\n      products.push.apply(products, cat.data);\n    }\n  });\n  return products;\n}\n\nfunction productsByTermOnly(affiliateData, keyTerm) {\n  const priorityProducts = [];\n  const secondaryProducts = [];\n  const tertiaryProducts = [];\n  traverseAllProducts(affiliateData, {\n    level: 'product',\n    cb: product => {\n      const {\n        tags\n      } = product.topLevelData;\n      if (!tags) return; // This is sensitive code in that we are looping through all products, so we should avoid\n      // extra logic and expensive operations! This is why we are using a standard for loop below.\n      // Note the tertiary condition will be activated only if we fail to match a primary condition\n      // and serves as a last attempt to match a search term. Will match if the key term itself\n      // includes a given tag. For example if a tag is \"sock\" and the term is \"socks123\"\n      // a match will be presented. However, if there is too much difference in the terms (by length)\n      // then the match will be disgarded for the tertiary condition\n\n      for (let i = 0; i < tags.length; i++) {\n        if (tags[i] === keyTerm) {\n          priorityProducts.push(product);\n          return;\n        } else if (tags[i].includes(keyTerm)) {\n          secondaryProducts.push(product);\n          return;\n        } else if (keyTerm.includes(tags[i])) {\n          if (keyTerm.length - tags[i].length < 3) {\n            tertiaryProducts.push(product);\n          }\n\n          break;\n        }\n      }\n\n      if (simpleSearchMatcher(tags, keyTerm)) {\n        secondaryProducts.push(product);\n      }\n    }\n  });\n  return [...priorityProducts, ...secondaryProducts, ...tertiaryProducts];\n}\n\nexport function searchPipe(affiliateData, {\n  category,\n  keyTerm,\n  productColor,\n  section,\n  brand\n}) {\n  if (brand && section && category) {\n    return productsByBrandAndCat(affiliateData, brand, section, category);\n  } else if (brand && section) {\n    return productsByBrandAndSection(affiliateData, brand, section);\n  } else if (productColor && section && category && keyTerm) {\n    return productsByColorAndCatAndTerm(affiliateData, section, category, keyTerm, productColor);\n  } else if (productColor && section && category) {\n    return productsByColorAndCat(affiliateData, section, category, productColor);\n  } else if (keyTerm && section && category) {\n    return productsByTermAndCat(affiliateData, section, category, keyTerm);\n  } else if (keyTerm && section) {\n    return productsByTermAndSec(affiliateData, section, keyTerm);\n  } else if (section && category) {\n    return productsByCat(affiliateData, section, category);\n  } else if (brand) {\n    return productsByBrandAndSection(affiliateData, brand, 'womens');\n  } else if (section) {\n    return productsBySection(affiliateData, section);\n  } else if (keyTerm) {\n    return productsByTermOnly(affiliateData, keyTerm);\n  } else {\n    return getAllproducts(affiliateData);\n  }\n}\nexport function searchResultShapePipe(products, categoryLastUpdated) {\n  return [{\n    category: 'Search Results',\n    label: 'clothing',\n    data: products,\n    categoryLastUpdated\n  }];\n}","map":null,"metadata":{},"sourceType":"module"}