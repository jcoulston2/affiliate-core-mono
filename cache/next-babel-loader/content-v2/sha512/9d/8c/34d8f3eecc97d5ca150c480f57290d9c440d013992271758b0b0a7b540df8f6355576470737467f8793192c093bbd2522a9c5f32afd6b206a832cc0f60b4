{"ast":null,"code":"import _toConsumableArray from \"/Users/justincoulston/Desktop/affilaite-core-mono/node_modules/next/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\nimport _objectWithoutProperties from \"/Users/justincoulston/Desktop/affilaite-core-mono/node_modules/next/node_modules/@babel/runtime/helpers/esm/objectWithoutProperties\";\nvar __jsx = React.createElement;\nimport React, { useState } from 'react';\nimport Grid from '@material-ui/core/Grid';\nimport Copy from '@units/Copy';\nimport styled from 'styled-components';\nimport Typography from '@units/Typography';\nimport { Spacer } from '@styles/CommonStyledComponents';\nimport { hasValidTabbedData, mapCustomDataToTabs } from './helper';\nimport { toArray } from '@helpers/common';\nimport upperFirst from 'lodash/upperFirst';\nimport { useTheme } from '@hooks';\nimport startCase from 'lodash/startCase';\nvar DetailTab = styled(function (_ref) {\n  var isActive = _ref.isActive,\n      textAlign = _ref.textAlign,\n      markerColor = _ref.markerColor,\n      children = _ref.children,\n      rest = _objectWithoutProperties(_ref, [\"isActive\", \"textAlign\", \"markerColor\", \"children\"]);\n\n  return __jsx(Grid, rest, children);\n}).withConfig({\n  displayName: \"ProductDescription__DetailTab\",\n  componentId: \"od93dl-0\"\n})([\"&&{cursor:pointer;opacity:0.5;margin-bottom:0.5em;text-align:\", \";&:hover{opacity:0.7;}\", \"}\"], function (props) {\n  return props.textAlign;\n}, function (_ref2) {\n  var isActive = _ref2.isActive,\n      markerColor = _ref2.markerColor;\n  return isActive && \"\\n      opacity: 1;\\n      h4 {\\n        &::after {\\n          content: ' ';\\n          width: 38px;\\n          height: 2px;\\n          background: \".concat(markerColor, \";\\n          display: block;\\n          position: relative;\\n          top: 9px;\\n        }        \\n      }\\n\\n    \");\n});\nvar CardList = styled.ul.withConfig({\n  displayName: \"ProductDescription__CardList\",\n  componentId: \"od93dl-1\"\n})([\"padding-left:0px;display:inline-block;ist-style-type:none;margin-top:5px;width:100%;li{display:flex;align-items:center;padding:2px 0px;justify-content:flex-start;}\"]);\n\nfunction ProductDescription(_ref3) {\n  var productDescriptionTitleCopy = _ref3.productDescriptionTitleCopy,\n      productDeliveryTitleCopy = _ref3.productDeliveryTitleCopy,\n      commonLabel = _ref3.commonLabel,\n      description = _ref3.description,\n      delivery = _ref3.delivery,\n      moreInfoCopy = _ref3.moreInfoCopy,\n      moreInfoText = _ref3.moreInfoText,\n      productLink = _ref3.productLink,\n      genericProductDescriptionText = _ref3.genericProductDescriptionText,\n      genericProductDescriptionCopy = _ref3.genericProductDescriptionCopy,\n      customDescriptiveData = _ref3.customDescriptiveData,\n      brand = _ref3.brand;\n\n  var _useState = useState(0),\n      activeDescriptionTab = _useState[0],\n      setActiveDescriptionTab = _useState[1];\n\n  var _useTheme = useTheme(),\n      brandThemeColors = _useTheme.brandThemeColors; // We have two primary variants (delivery and description), there should always be a description\n  // tab but it is not always encouraged for the extractor to pull in bespoke description & delivery\n  // for a given product due to the different formating and cases of different brands but we include\n  // it anyway. There should always be some generic description shown from the CMS which encourages\n  // the user to navigate to the official store.\n\n\n  var tabsInfomration = [{\n    title: productDescriptionTitleCopy,\n    data: toArray(description),\n    isDefault: true\n  }, {\n    title: productDeliveryTitleCopy,\n    data: toArray(delivery)\n  }].concat(_toConsumableArray(mapCustomDataToTabs(customDescriptiveData))).filter(function (_ref4) {\n    var data = _ref4.data,\n        isDefault = _ref4.isDefault;\n    return hasValidTabbedData(data, isDefault);\n  });\n  var hasMultipleTabs = tabsInfomration.length > 1; // Tab clickable headings\n\n  var getTabs = tabsInfomration.map(function (_ref5, index) {\n    var title = _ref5.title;\n    return __jsx(DetailTab, {\n      markerColor: brandThemeColors.primaryColor,\n      textAlign: hasMultipleTabs ? 'center' : 'left',\n      key: index,\n      item: true,\n      xs: true,\n      isActive: index === activeDescriptionTab,\n      onClick: function onClick() {\n        return setActiveDescriptionTab(index);\n      }\n    }, __jsx(Typography, {\n      tag: \"h4\",\n      typeStyles: commonLabel\n    }, __jsx(Copy, {\n      text: title\n    })));\n  }); // Tab inner content\n\n  var getTabsContent = tabsInfomration.map(function (_ref6, index) {\n    var descriptiveValues = _ref6.data;\n    return index === activeDescriptionTab && __jsx(CardList, {\n      key: index\n    }, descriptiveValues.map(function (descriptiveValue, index) {\n      return descriptiveValue && __jsx(\"li\", {\n        key: index\n      }, __jsx(Typography, {\n        tag: \"p\",\n        typeStyles: genericProductDescriptionCopy\n      }, __jsx(Copy, {\n        text: upperFirst(descriptiveValue)\n      })));\n    }));\n  }); // Cms copy\n\n  var getCmsContent = genericProductDescriptionText.map(function (cmsDescriptiveText, index) {\n    return __jsx(Grid, {\n      container: true,\n      xs: 12,\n      key: index\n    }, __jsx(Typography, {\n      tag: \"p\"\n    }, __jsx(Copy, {\n      text: cmsDescriptiveText,\n      replaceText: startCase(brand)\n    })), __jsx(Spacer, {\n      h: 5\n    }));\n  });\n  return __jsx(Grid, {\n    item: true,\n    container: true\n  }, getTabs, getTabsContent, getCmsContent, __jsx(Spacer, {\n    h: 5\n  }), __jsx(Typography, {\n    tag: \"p\",\n    typeStyles: moreInfoCopy\n  }, __jsx(\"a\", {\n    href: productLink,\n    title: moreInfoText,\n    target: \"_blank\",\n    rel: \"nofollow\"\n  }, __jsx(Copy, {\n    text: moreInfoText\n  }))));\n}\n\nexport default ProductDescription;","map":null,"metadata":{},"sourceType":"module"}