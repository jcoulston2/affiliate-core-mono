{"ast":null,"code":"import _slicedToArray from \"/Users/justincoulston/Desktop/affilaite-core-mono/node_modules/next/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\n\nfunction _createForOfIteratorHelper(o, allowArrayLike) { var it; if (typeof Symbol === \"undefined\" || o[Symbol.iterator] == null) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = o[Symbol.iterator](); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it[\"return\"] != null) it[\"return\"](); } finally { if (didErr) throw err; } } }; }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\nimport { HOME_PATH, SEARCH_PATH, PLP_PATH } from '@constants';\nimport { getCopy } from '@helpers/cms';\nimport startCase from 'lodash/startCase';\nexport function getPageMeta(route, query, metaContent) {\n  if (route === HOME_PATH) {\n    return metaContent.home;\n  } else if (route.includes(PLP_PATH)) {\n    var _ref = (query === null || query === void 0 ? void 0 : query.slug) || [],\n        _ref2 = _slicedToArray(_ref, 2),\n        sec = _ref2[0],\n        cat = _ref2[1];\n\n    var secCat = \"\".concat(startCase(sec), \" \").concat(startCase(cat));\n    return {\n      pageTitle: getCopy(metaContent.listing.pageTitle, secCat),\n      pageDescription: getCopy(metaContent.listing.pageDescription, secCat)\n    };\n  } else if (route.includes(SEARCH_PATH)) {\n    var searchTerms = Object.values(query).join(' ');\n    return {\n      pageTitle: getCopy(metaContent.search.pageTitle, searchTerms),\n      pageDescription: getCopy(metaContent.search.pageDescription, searchTerms)\n    };\n  } else {\n    var _iterator = _createForOfIteratorHelper(metaContent.match),\n        _step;\n\n    try {\n      for (_iterator.s(); !(_step = _iterator.n()).done;) {\n        var meta = _step.value;\n\n        if (route.includes(meta.path)) {\n          return meta;\n        }\n      }\n    } catch (err) {\n      _iterator.e(err);\n    } finally {\n      _iterator.f();\n    }\n  } // fallback\n\n\n  return metaContent[\"default\"];\n}","map":null,"metadata":{},"sourceType":"module"}