{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport gql from 'graphql-tag';\nimport { PRODUCTS_API_END_POINT, PREDICTIVE_SEARCH_API_END_POINT } from '@constants';\nimport { productQuery, searchQuery } from '../../graphQL/graphqlQueries';\nimport proxy from '../proxy'; // NOTE: this utility is intended for pages making requests via any client side requests. We should never include the store\n// cache in this file as it will be included inside the JS bundle\n\nexport default {\n  getProductData: (section, productType, productCountStart, productCountEnd, filters) => {\n    const query = `${productQuery}`;\n    return proxy().graphQl(PRODUCTS_API_END_POINT, query, _objectSpread({\n      section,\n      productType,\n      productCountStart,\n      productCountEnd\n    }, filters));\n  },\n  getSearchData: (searchValues, productCountStart, productCountEnd, filters) => {\n    const query = `${searchQuery}`;\n    return proxy().graphQl(PRODUCTS_API_END_POINT, query, _objectSpread(_objectSpread(_objectSpread({}, searchValues), filters), {}, {\n      productCountStart,\n      productCountEnd\n    }));\n  },\n  getPredictiveSearch: async keyTerm => {\n    const result = await proxy().get(PREDICTIVE_SEARCH_API_END_POINT, `?terms=${keyTerm}`, {\n      'content-type': 'application/x-www-form-urlencoded;charset=utf-8'\n    });\n    return result.data;\n  }\n};","map":null,"metadata":{},"sourceType":"module"}