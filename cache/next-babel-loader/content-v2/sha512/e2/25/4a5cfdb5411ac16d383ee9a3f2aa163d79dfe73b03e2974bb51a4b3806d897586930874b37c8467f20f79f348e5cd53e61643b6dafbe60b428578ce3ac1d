{"ast":null,"code":"import _toConsumableArray from \"/Users/justincoulston/Desktop/affilaite-core-mono/node_modules/next/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\nvar __jsx = React.createElement;\nimport React, { useState, useEffect } from 'react';\nimport Grid from '@material-ui/core/Grid';\nimport Collapse from '@material-ui/core/Collapse';\nimport Link from 'next/link';\nimport { DESKTOP_NAV_BAR_REF } from '@constants';\nimport chunk from 'lodash/chunk';\nimport Typography from '@units/Typography';\nimport Button from '@units/Button';\nimport Card from '@units/Card';\nimport usePwa from '@containers/Pwa/hook';\nimport ChevronRightIcon from '@material-ui/icons/ChevronRight';\nimport { useThemeColor, useCms } from '@hooks';\nimport { LabelContent, StyledMenu, NavLinksContainer, CollapseContainer, MenuItemTitle, NavLink, NavLinkChunk, FirstLevelNavTitle, NavButtons, ThirdLevelNavContainer } from './styles';\nimport { PLP_PATH } from '@constants';\nimport { isServer, getNode } from '@helpers/common';\nexport default function SubNavContainers(_ref) {\n  var title = _ref.title,\n      subNav = _ref.subNav,\n      desktopLinksPerColumn = _ref.desktopLinksPerColumn,\n      desktopNavLink = _ref.desktopNavLink,\n      desktopNavLabel = _ref.desktopNavLabel,\n      quickFinderCopy = _ref.quickFinderCopy,\n      setQuickFinderOpen = _ref.setQuickFinderOpen,\n      resetProductFeeds = _ref.resetProductFeeds;\n\n  var _useState = useState([]),\n      subLevelNavItemExpanded = _useState[0],\n      setSubLevelNavItemExpanded = _useState[1];\n\n  var _useState2 = useState(100),\n      navBarHeight = _useState2[0],\n      setNavBarHeight = _useState2[1];\n\n  var primaryColor = useThemeColor('primary');\n\n  var _usePwa = usePwa(),\n      isPwaInitiated = _usePwa.isPwaInitiated,\n      initPwaPrompt = _usePwa.initPwaPrompt;\n\n  var _useCms = useCms('other'),\n      pwaCms = _useCms.pwa;\n\n  useEffect(function () {\n    if (!isServer()) {\n      var _getNode;\n\n      setNavBarHeight(((_getNode = getNode(DESKTOP_NAV_BAR_REF)) === null || _getNode === void 0 ? void 0 : _getNode.clientHeight) || 0);\n    }\n  });\n\n  var handleSubLevelnavItemClick = function handleSubLevelnavItemClick(index) {\n    return function () {\n      if (!subLevelNavItemExpanded.length) {\n        return setSubLevelNavItemExpanded([index]);\n      } // If a subnav is already expanded, remove it's index i.e. collapse it\n\n\n      if (subLevelNavItemExpanded.includes(index)) {\n        setSubLevelNavItemExpanded(subLevelNavItemExpanded.filter(function (expandedSubnavIndex) {\n          return index !== expandedSubnavIndex;\n        }));\n      } else {\n        setSubLevelNavItemExpanded([].concat(_toConsumableArray(subLevelNavItemExpanded), [index]));\n      }\n    };\n  };\n\n  var handleLinkItemClick = function handleLinkItemClick() {\n    resetProductFeeds();\n  }; // Third level - Navigation links (split into columns)\n\n\n  var renderThirdLevelNav = function renderThirdLevelNav(subNavItems) {\n    var split = subNavItems.length / desktopLinksPerColumn;\n    var chunks = subNavItems.length / split;\n    var subNavItemsChunks = chunk(subNavItems, chunks);\n    return subNavItemsChunks.map(function (NavChunk, index) {\n      var fullCol = NavChunk.length > 4;\n      return __jsx(NavLinkChunk, {\n        item: true,\n        xs: true,\n        container: fullCol,\n        key: \"NavLinkChunk-\".concat(index)\n      }, NavChunk.map(function (_ref2, index) {\n        var title = _ref2.title,\n            link = _ref2.link;\n        return __jsx(NavLink, {\n          item: true,\n          xs: 12,\n          key: \"NavLink-\".concat(index),\n          onClick: handleLinkItemClick\n        }, __jsx(Link, {\n          href: \"/\".concat(PLP_PATH, \"/[...slug]\"),\n          as: \"/\".concat(PLP_PATH).concat(link)\n        }, __jsx(\"a\", null, __jsx(Typography, {\n          tag: \"p\",\n          typeStyles: desktopNavLink,\n          fullwidth: true\n        }, title))));\n      }));\n    });\n  }; // Second level - Wrapper around label and nav links\n\n\n  var renderSecondLevelNav = function renderSecondLevelNav(subNav) {\n    return subNav.map(function (_ref3, index) {\n      var title = _ref3.title,\n          subNavItems = _ref3.subNavItems;\n      return __jsx(Grid, {\n        container: true,\n        item: true,\n        xs: true,\n        key: \"grid\".concat(index)\n      }, __jsx(LabelContent, {\n        item: true,\n        xs: true,\n        id: \"menu-list-Collapse\",\n        seperator: true\n      }, __jsx(MenuItemTitle, {\n        onClick: handleSubLevelnavItemClick(index)\n      }, __jsx(Typography, {\n        tag: \"h4\",\n        typeStyles: desktopNavLabel\n      }, title)), __jsx(Collapse, {\n        \"in\": true\n      }, __jsx(ThirdLevelNavContainer, {\n        container: true,\n        borderColor: primaryColor\n      }, renderThirdLevelNav(subNavItems)))));\n    });\n  }; // First level (e.g. top level: Mens, Womens)\n\n\n  var renderFirstLevelNav = function renderFirstLevelNav() {\n    return __jsx(StyledMenu, {\n      \"aria-controls\": \"menu-list-Collapse\",\n      \"aria-haspopup\": \"true\"\n    }, __jsx(FirstLevelNavTitle, null, title));\n  };\n\n  return __jsx(NavLinksContainer, {\n    container: true,\n    item: true,\n    xs: 12,\n    sm: true,\n    hoverEffectColor: primaryColor\n  }, renderFirstLevelNav(), __jsx(Collapse, {\n    \"in\": true\n  }, __jsx(CollapseContainer, {\n    height: navBarHeight,\n    container: true\n  }, renderSecondLevelNav(subNav), __jsx(Grid, {\n    container: true,\n    item: true,\n    xs: 3,\n    lg: 4\n  }, __jsx(LabelContent, {\n    item: true,\n    xs: true,\n    id: \"menu-list-Collapse\",\n    container: true,\n    alignItems: \"center\"\n  }, __jsx(NavButtons, {\n    container: true,\n    alignItems: \"center\"\n  }, __jsx(Button, {\n    fullWidth: true,\n    padding: \"0px\",\n    disableHover: true,\n    textTransform: \"initial\",\n    onClick: function onClick() {\n      return setQuickFinderOpen(true);\n    }\n  }, __jsx(Card, {\n    fullWidth: true\n  }, __jsx(Grid, {\n    container: true,\n    alignItems: \"center\",\n    justify: \"space-between\"\n  }, __jsx(Typography, {\n    tag: \"h4\",\n    weight: 300\n  }, quickFinderCopy), __jsx(ChevronRightIcon, null)))), isPwaInitiated && __jsx(Button, {\n    primary: true,\n    textTransform: \"initial\",\n    onClick: function onClick() {\n      return initPwaPrompt();\n    }\n  }, __jsx(Grid, {\n    container: true,\n    alignItems: \"center\",\n    justify: \"space-between\"\n  }, pwaCms.pwaDownloadableBannerText))))))));\n}","map":null,"metadata":{},"sourceType":"module"}