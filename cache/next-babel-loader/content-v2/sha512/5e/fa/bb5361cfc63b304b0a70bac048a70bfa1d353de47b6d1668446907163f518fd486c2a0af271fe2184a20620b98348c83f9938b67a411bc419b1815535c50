{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/extends\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nvar __jsx = React.createElement;\nimport React from 'react';\nimport Button from '@material-ui/core/Button';\nimport styled from 'styled-components';\nimport { useTheme } from '@hooks';\nimport Typography from '@units/Typography';\nimport Copy from '@units/Copy';\nconst StyledButton = styled((_ref) => {\n  let {\n    color,\n    maxWidth,\n    bgColor,\n    padding,\n    borderRadius,\n    textTransform,\n    disableHover,\n    style,\n    children\n  } = _ref,\n      rest = _objectWithoutProperties(_ref, [\"color\", \"maxWidth\", \"bgColor\", \"padding\", \"borderRadius\", \"textTransform\", \"disableHover\", \"style\", \"children\"]);\n\n  return __jsx(Button, rest, children);\n}).withConfig({\n  displayName: \"Button__StyledButton\",\n  componentId: \"sc-1kxdv2n-0\"\n})([\"&&{max-width:\", \";background-color:\", \";padding:\", \";border-radius:\", \";text-transform:\", \";color:\", \";font-weight:\", \";&:hover{background-color:\", \";}p > span{white-space:nowrap;}}\"], ({\n  maxWidth\n}) => maxWidth ? `${maxWidth}` : 'auto', props => props.bgColor, ({\n  padding\n}) => Number.isInteger(padding) ? `${padding}px` : padding, props => props.square ? '0px' : `${props.borderRadius || 20}px`, props => props.textTransform, props => props.color, props => props.defaultFontWeight, props => !props.disableHover ? '#cecece' : 'initial');\nexport default function BrandButton(_ref2) {\n  let {\n    color: propColor,\n    bgColor: propBgColor,\n    primary,\n    secondary,\n    padding,\n    maxWidth,\n    textTransform,\n    copy,\n    text,\n    noPad,\n    children,\n    cmsEventMappings,\n    reference,\n    disableHover,\n    square\n  } = _ref2,\n      rest = _objectWithoutProperties(_ref2, [\"color\", \"bgColor\", \"primary\", \"secondary\", \"padding\", \"maxWidth\", \"textTransform\", \"copy\", \"text\", \"noPad\", \"children\", \"cmsEventMappings\", \"reference\", \"disableHover\", \"square\"]);\n\n  const {\n    buttonTheme\n  } = useTheme();\n  const calculatedPadding = noPad ? 0 : padding || buttonTheme.defaultPadding;\n  const eventMap = reference && cmsEventMappings && cmsEventMappings[reference] || {};\n  let color, bgColor;\n\n  if (primary) {\n    bgColor = buttonTheme.primaryColor;\n    color = buttonTheme.primaryTextColor;\n  } else if (secondary) {\n    bgColor = buttonTheme.secondaryColor;\n    color = buttonTheme.secondaryTextColor;\n  } else {\n    color = propColor;\n    bgColor = propBgColor;\n  }\n\n  return __jsx(StyledButton, _extends({\n    color: color,\n    bgColor: bgColor,\n    maxWidth: maxWidth,\n    borderRadius: buttonTheme.borderRadius,\n    padding: calculatedPadding,\n    textTransform: textTransform,\n    defaultFontWeight: buttonTheme.defaultFontWeight,\n    disableHover: disableHover,\n    square: square\n  }, rest, eventMap), copy && __jsx(Typography, {\n    tag: \"p\",\n    typeStyles: copy\n  }, text && __jsx(Copy, {\n    text: text\n  })) || children);\n}","map":null,"metadata":{},"sourceType":"module"}