{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/extends\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nvar __jsx = React.createElement;\nimport React, { useState } from 'react';\nimport RadioButton from '@units/RadioButton';\nimport Checkbox from '@units/Checkbox';\nimport RadioGroup from '@material-ui/core/RadioGroup';\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\nimport Typography from '@units/Typography';\nimport { keyWordsToString, urlCase } from '@helpers/common';\nimport { PLP_PATH, SEARCH_PATH } from '@constants';\nimport Input from '@units/Input';\nimport { useCms, useBrandList } from '@hooks';\nimport { useFilters } from '@modules/Filters';\nimport { Spacer } from '@styles/CommonStyledComponents';\nimport { useRouter } from 'next/router';\nimport { SectionTabs, LabelTabs } from './QuickFinderTabs';\nimport startCase from 'lodash/startCase';\nimport Grid from '@material-ui/core/Grid';\nimport { QuickSectionTabs, QuickViewSection, RadioItem, RadioItemContainer, QuickViewModal, SectionLabel } from './styles';\nexport default function QuickFinder(_ref) {\n  var _navigationData$secti, _navigationData$secti2, _getCategoryList;\n\n  let {\n    navigationData,\n    onSubmitCallback\n  } = _ref,\n      modalProps = _objectWithoutProperties(_ref, [\"navigationData\", \"onSubmitCallback\"]);\n\n  const {\n    0: sectionTabValue,\n    1: setSectionTabValue\n  } = useState(0);\n  const {\n    0: labelTabValue,\n    1: setLabelTabValue\n  } = useState(0);\n  const {\n    0: selectedCategory,\n    1: setSelectedCategory\n  } = useState('all');\n  const {\n    productFiltersContent\n  } = useCms('listingContent');\n  const {\n    filterMethods,\n    filterState,\n    normalizedFilters\n  } = useFilters();\n  const router = useRouter();\n  const brandList = useBrandList();\n  const selectedSection = (_navigationData$secti = navigationData[sectionTabValue]) === null || _navigationData$secti === void 0 ? void 0 : _navigationData$secti.title;\n  const hasMultipleLabels = ((_navigationData$secti2 = navigationData[sectionTabValue]) === null || _navigationData$secti2 === void 0 ? void 0 : _navigationData$secti2.subNav.length) > 1;\n\n  const getCategoryList = () => {\n    var _navigationData$secti3;\n\n    return (_navigationData$secti3 = navigationData[sectionTabValue]) === null || _navigationData$secti3 === void 0 ? void 0 : _navigationData$secti3.subNav[labelTabValue].subNavItems;\n  };\n\n  const handleCheckBoxChange = value => {\n    const {\n      brands\n    } = filterState;\n\n    if (brands.includes(value)) {\n      filterMethods.setBrands(brands.filter(brand => urlCase(brand) !== value));\n    } else {\n      filterMethods.setBrands([...brands, value]);\n    }\n  };\n\n  const submitQuickFinder = () => {\n    let path = '';\n    const {\n      keyWords,\n      saleThreshold,\n      brands\n    } = normalizedFilters;\n    const urlParts = [];\n    const isSearchBaseUrl = selectedCategory === 'all';\n    const base = isSearchBaseUrl ? `/${SEARCH_PATH}?section=${selectedSection}` : `/${PLP_PATH}/${urlCase(selectedSection)}/${urlCase(selectedCategory)}`;\n    if (keyWords !== null && keyWords !== void 0 && keyWords.length) urlParts.push(`key-words=${keyWords.join(',')}`);\n    if (brands !== null && brands !== void 0 && brands.length) urlParts.push(`brands=${brands.join(',')}`);\n    if (saleThreshold && parseInt(saleThreshold)) urlParts.push(`sale-threshold=${saleThreshold}`);\n\n    if (isSearchBaseUrl && urlParts.length > 0) {\n      path = `&${urlParts.join('&')}`;\n    } else {\n      path = urlParts.length ? `/filter/${urlParts.join('&')}` : '';\n    }\n\n    if (onSubmitCallback) onSubmitCallback();\n    router.push(`${base}${path}`);\n  };\n\n  const quickFindSectionLabel = text => __jsx(SectionLabel, {\n    container: true\n  }, __jsx(Typography, {\n    tag: \"h2\",\n    weight: 500,\n    margin: \"10px 0px 10px 0px\"\n  }, text));\n\n  return __jsx(QuickViewModal, _extends({\n    onSubmitModal: submitQuickFinder\n  }, modalProps), __jsx(QuickSectionTabs, {\n    container: true\n  }, __jsx(SectionTabs, {\n    navigationData,\n    sectionTabValue,\n    setSectionTabValue\n  })), quickFindSectionLabel('Category'), hasMultipleLabels && __jsx(QuickViewSection, null, __jsx(LabelTabs, {\n    navigationData,\n    sectionTabValue,\n    labelTabValue,\n    setLabelTabValue\n  })), __jsx(QuickViewSection, null, __jsx(RadioGroup, {\n    \"aria-label\": \"set category\",\n    name: \"set-category\",\n    value: selectedCategory,\n    onChange: event => {\n      var _event$target;\n\n      return setSelectedCategory((_event$target = event.target) === null || _event$target === void 0 ? void 0 : _event$target.value);\n    }\n  }, __jsx(RadioItemContainer, {\n    container: true\n  }, __jsx(RadioItem, {\n    item: true,\n    xs: 12,\n    sm: 6\n  }, __jsx(FormControlLabel, {\n    value: 'all',\n    label: \"I'm casually browsing\",\n    control: __jsx(RadioButton, null)\n  })), (_getCategoryList = getCategoryList()) === null || _getCategoryList === void 0 ? void 0 : _getCategoryList.map(({\n    title\n  }, catIndex) => __jsx(RadioItem, {\n    item: true,\n    xs: 12,\n    sm: 6,\n    key: `${title}-${catIndex}`\n  }, __jsx(FormControlLabel, {\n    value: title,\n    label: startCase(title),\n    control: __jsx(RadioButton, null)\n  })))))), quickFindSectionLabel('Sale'), __jsx(QuickViewSection, null, __jsx(RadioGroup, {\n    \"aria-label\": \"sale filter\",\n    name: \"sale-filter\",\n    value: filterState.saleThreshold,\n    onChange: event => {\n      var _event$target2;\n\n      return filterMethods.setSaleThreshold((_event$target2 = event.target) === null || _event$target2 === void 0 ? void 0 : _event$target2.value);\n    }\n  }, __jsx(FormControlLabel, {\n    value: '0',\n    control: __jsx(RadioButton, null),\n    label: \"All products\"\n  }), __jsx(FormControlLabel, {\n    value: '1',\n    control: __jsx(RadioButton, null),\n    label: \"All sale items\"\n  }), __jsx(FormControlLabel, {\n    value: '20',\n    control: __jsx(RadioButton, null),\n    label: \"20% and more\"\n  }), __jsx(FormControlLabel, {\n    value: '50',\n    control: __jsx(RadioButton, null),\n    label: \"50% and more\"\n  }), __jsx(FormControlLabel, {\n    value: '70',\n    control: __jsx(RadioButton, null),\n    label: \"70% and more\"\n  }))), quickFindSectionLabel('Brands'), __jsx(QuickViewSection, null, brandList.map(brand => __jsx(Grid, {\n    key: brand\n  }, __jsx(FormControlLabel, {\n    value: urlCase(brand),\n    control: __jsx(Checkbox, {\n      checked: filterState.brands.includes(urlCase(brand)),\n      onChange: ({\n        target\n      }) => handleCheckBoxChange(target.value)\n    }),\n    label: brand\n  })))), quickFindSectionLabel('Key words'), __jsx(QuickViewSection, null, __jsx(Spacer, {\n    h: 8\n  }), __jsx(Input, {\n    fullWidth: true,\n    variant: \"outlined\",\n    label: !filterState.keyWords.length ? productFiltersContent.keyWordsInputLabel : '',\n    value: keyWordsToString(filterState.keyWords),\n    onChange: ({\n      target\n    }) => filterMethods.setKeyWords(target.value && target.value.toLowerCase().replace(',', ' ').split(' ') || [])\n  })));\n}","map":null,"metadata":{},"sourceType":"module"}