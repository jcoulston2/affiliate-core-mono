{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/extends\";\nimport _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nvar __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport React, { useEffect, useState, useCallback } from 'react';\nimport Grid from '@material-ui/core/Grid';\nimport Button from '@units/Button';\nimport Typography from '@units/Typography';\nimport Loader from '@units/Loader';\nimport Card from '@units/Card';\nimport { Spacer } from '@styles/CommonStyledComponents';\nimport { getScrollTop, setScrollTop, navigateToUrl, urlContainsQuery } from '@helpers/common';\nimport { getFiltersFromUrl } from '@helpers/page';\nimport { SEARCH_PATH } from '@constants';\nimport { useRouter } from 'next/router';\nimport { getProductLink } from '@helpers/page';\nimport { useWishListAction, useCms } from '@hooks';\nimport { useFilters } from '@modules/Filters';\nimport { ProductListingContainer, LoadMoreProductsCopy, ListingInformation } from './styles';\nimport PorductGridControls from './PorductGridControls';\nimport { VIEW_MODE, FLICK_VIEW_QUERY } from '@constants';\nimport { useTheme } from '@hooks';\nimport NoMoreProductsIndicator from './NoMoreProductsIndicator';\nimport memoize from 'fast-memoize';\nimport ProductsView from './ProductsView';\nexport default function ProductListing(_ref) {\n  let {\n    initialProducts,\n    fetchedProducts,\n    initialProductsPerPage,\n    listingContentInnerMaxWidth,\n    listingContentInnerPadding,\n    noMoreProductsCopyText,\n    noMoreProductsCopy,\n    loadMoreProductsButton,\n    loadMoreProductsCopy,\n    fetchProducts,\n    totalCategoryProducts,\n    productSearchValues,\n    fetchProductsInSearch,\n    section,\n    category,\n    setLoading,\n    loading,\n    openProductDetailView,\n    populateProductView,\n    productFilters,\n    setClientFilterStatus,\n    noSearchResultText,\n    flickViewTitleCopy,\n    flickViewTitleText\n  } = _ref,\n      listingItemProps = _objectWithoutProperties(_ref, [\"initialProducts\", \"fetchedProducts\", \"initialProductsPerPage\", \"listingContentInnerMaxWidth\", \"listingContentInnerPadding\", \"noMoreProductsCopyText\", \"noMoreProductsCopy\", \"loadMoreProductsButton\", \"loadMoreProductsCopy\", \"fetchProducts\", \"totalCategoryProducts\", \"productSearchValues\", \"fetchProductsInSearch\", \"section\", \"category\", \"setLoading\", \"loading\", \"openProductDetailView\", \"populateProductView\", \"productFilters\", \"setClientFilterStatus\", \"noSearchResultText\", \"flickViewTitleCopy\", \"flickViewTitleText\"]);\n\n  const {\n    0: viewMode,\n    1: setViewMode\n  } = useState(VIEW_MODE.GRID_MODE);\n  const {\n    0: lastScrolltop,\n    1: setLastScrollTop\n  } = useState(null);\n  const {\n    productFiltersContent\n  } = useCms('listingContent');\n  const {\n    textTheme\n  } = useTheme();\n  const {\n    filterState,\n    filterMethods,\n    normalizedFilters\n  } = useFilters(productFilters);\n  const router = useRouter();\n  const wishListAction = useWishListAction('add');\n  const {\n    sliderPriceScaleMultiplier: scaler\n  } = productFiltersContent;\n  const allProducts = [...initialProducts, ...fetchedProducts];\n  const numberOfProducts = allProducts.length;\n  const nextFetchEndCount = numberOfProducts + initialProductsPerPage;\n  const showNoMoreProducts = numberOfProducts >= totalCategoryProducts;\n  const filters = getFiltersFromUrl();\n  const isSearchPage = router.pathname.includes(SEARCH_PATH);\n  const isFlickView = viewMode === VIEW_MODE.FLICK_MODE;\n\n  const filterProps = _objectSpread({\n    section,\n    category,\n    productFilters,\n    productSearchValues,\n    fetchProducts,\n    fetchProductsInSearch,\n    setClientFilterStatus,\n    setLoading,\n    productFiltersContent,\n    scaler,\n    normalizedFilters,\n    filterMethods\n  }, filterState);\n\n  const openCardAction = product => {\n    try {\n      openProductDetailView();\n      populateProductView(product);\n    } catch (e) {\n      console.warn(e);\n      navigateToUrl(getProductLink(product));\n    }\n  };\n\n  const openCardActionMemo = useCallback(memoize(product => () => openCardAction(product)), []);\n\n  const setScroll = () => {\n    if (document.scrollingElement) {\n      setLastScrollTop(getScrollTop());\n    }\n  };\n\n  const loadMoreProducts = () => {\n    setLoading(true);\n    setScroll();\n\n    if (isSearchPage) {\n      fetchProductsInSearch(productSearchValues, numberOfProducts, nextFetchEndCount, filters, true);\n    } else {\n      fetchProducts(section, category, numberOfProducts, nextFetchEndCount, filters, true);\n    }\n  };\n\n  const maintainScrollTop = () => {\n    if (document.scrollingElement && lastScrolltop !== null) {\n      setScrollTop(lastScrolltop);\n      setLastScrollTop(null);\n    }\n  };\n\n  useEffect(() => {\n    maintainScrollTop();\n  }, [numberOfProducts]);\n  useEffect(() => {\n    if (urlContainsQuery(FLICK_VIEW_QUERY)) {\n      setViewMode(VIEW_MODE.FLICK_MODE);\n    }\n  }, []);\n  return __jsx(React.Fragment, null, __jsx(PorductGridControls, {\n    filterProps: filterProps,\n    setViewMode: setViewMode,\n    viewMode: viewMode\n  }), __jsx(Loader, {\n    active: loading,\n    useBackdrop: true\n  }), __jsx(ProductListingContainer, {\n    padding: listingContentInnerPadding,\n    maxWidth: listingContentInnerMaxWidth\n  }, __jsx(ProductsView, _extends({\n    isFlickView,\n    setViewMode,\n    flickViewTitleCopy,\n    flickViewTitleText,\n    wishListAction,\n    openCardAction,\n    allProducts,\n    loadMoreProducts,\n    showNoMoreProducts,\n    noMoreProductsCopyText,\n    openCardActionMemo,\n    filterProps\n  }, listingItemProps)), !numberOfProducts && __jsx(NoMoreProductsIndicator, {\n    text: !loading && noSearchResultText\n  }), __jsx(ListingInformation, {\n    container: true,\n    justify: \"center\"\n  }, !isFlickView && __jsx(Grid, {\n    item: true,\n    lg: 5\n  }, __jsx(LoadMoreProductsCopy, null, __jsx(Typography, {\n    tag: \"h3\",\n    fullwidth: true,\n    typeStyles: loadMoreProductsCopy\n  }, \"Showing \", numberOfProducts, \" item(s)\"))), __jsx(Grid, {\n    item: true,\n    xs: 12,\n    lg: 8,\n    container: true,\n    justify: \"center\"\n  }, !isFlickView && showNoMoreProducts && __jsx(Card, {\n    padding: \"0px\",\n    margin: \"20px 0px 20px\"\n  }, __jsx(Typography, {\n    tag: \"p\",\n    typeStyles: noMoreProductsCopy,\n    color: textTheme.slightlyFadedTextColor\n  }, noMoreProductsCopyText)), !showNoMoreProducts && !isFlickView && __jsx(Button, _extends({}, loadMoreProductsButton, {\n    onClick: loadMoreProducts\n  }))), __jsx(Spacer, {\n    h: [{\n      value: 20,\n      breakPoint: 'max_xs'\n    }]\n  }))));\n}","map":null,"metadata":{},"sourceType":"module"}