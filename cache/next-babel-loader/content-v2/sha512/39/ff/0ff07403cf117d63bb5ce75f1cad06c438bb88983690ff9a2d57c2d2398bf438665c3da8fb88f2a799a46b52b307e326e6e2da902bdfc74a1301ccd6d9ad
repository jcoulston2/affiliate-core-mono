{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/extends\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nvar __jsx = React.createElement;\nimport React from 'react';\nimport Grid from '@material-ui/core/Grid';\nimport styled from 'styled-components';\nimport Button from '@units/Button';\nimport Image from '@units/Image';\nimport Typography from '@units/Typography';\nimport Copy from '@units/Copy';\nimport isEmpty from 'lodash/isEmpty';\nimport { StyledCmsGrid } from '@styles/CommonStyledComponents';\nconst InnerGridContent = styled(Grid).withConfig({\n  displayName: \"CmsGrid__InnerGridContent\",\n  componentId: \"mbo5y8-0\"\n})([\"&&{\", \" \", \"}\"], props => props.isStacked ? 'flex-wrap: wrap; ' : '', props => props.isStacked ? 'flex-direction: column; ' : '');\nconst CmsGridWrapper = styled.section.withConfig({\n  displayName: \"CmsGrid__CmsGridWrapper\",\n  componentId: \"mbo5y8-1\"\n})([\"background:\", \";box-shadow:\", \";\"], props => props.bgColor, props => props.borderShadow || 'auto');\nexport default function CmsGrid(_ref) {\n  let {\n    rows,\n    bgColor,\n    borderShadow,\n    cmsEventMappings\n  } = _ref,\n      gridContainerProps = _objectWithoutProperties(_ref, [\"rows\", \"bgColor\", \"borderShadow\", \"cmsEventMappings\"]);\n\n  return __jsx(CmsGridWrapper, {\n    bgColor: bgColor,\n    borderShadow: borderShadow\n  }, __jsx(StyledCmsGrid, _extends({\n    container: true\n  }, gridContainerProps), rows === null || rows === void 0 ? void 0 : rows.map((_ref2, index) => {\n    let {\n      cta = {},\n      copy,\n      img,\n      contentLayout,\n      grid\n    } = _ref2,\n        restGrid = _objectWithoutProperties(_ref2, [\"cta\", \"copy\", \"img\", \"contentLayout\", \"grid\"]);\n\n    return __jsx(StyledCmsGrid, _extends({\n      item: true\n    }, grid, restGrid, {\n      key: index\n    }), __jsx(InnerGridContent, {\n      container: true,\n      alignItems: \"flex-start\",\n      isStacked: contentLayout === 'stack'\n    }, copy && __jsx(Typography, {\n      typeStyles: copy\n    }, __jsx(Copy, {\n      text: copy.text\n    })), img && __jsx(Image, img), !isEmpty(cta) && __jsx(Button, _extends({}, cta, {\n      cmsEventMappings: cmsEventMappings\n    }))));\n  })));\n}","map":null,"metadata":{},"sourceType":"module"}