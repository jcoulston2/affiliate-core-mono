{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/extends\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nvar __jsx = React.createElement;\nimport React, { useState } from 'react';\nimport MobileSubNavContainers from '../MobileSubNavContainers/MobileSubNavContainers';\nimport Grid from '@material-ui/core/Grid';\nimport Logo from '@units/Logo';\nimport Button from '@units/Button';\nimport WishList from '@containers/WishList';\nimport Settings from '@containers/UserSettings';\nimport Search from '@modules/Search';\nimport HamburgerNavigation from '@modules/HamburgerNavigation';\nimport Typography from '@units/Typography';\nimport { Flex, CenterAll, Spacer } from '@styles/CommonStyledComponents';\nimport KeyboardBackspaceIcon from '@material-ui/icons/KeyboardBackspace';\nimport Copy from '@units/Copy';\nimport Card from '@units/Card';\nimport ClearIcon from '@material-ui/icons/Clear';\nimport ChevronRightIcon from '@material-ui/icons/ChevronRight';\nimport { useCms } from '@hooks';\nimport usePwa from '@containers/Pwa/hook';\nimport { MobileNavigation, MobileDrawer, MobileDrawerContainer, TitleIndicator, Back, NavCard, TopNavIcons } from './styles';\nexport default function Navigation(_ref) {\n  let {\n    navigationData,\n    togglMobileNav,\n    mobileMenuOpen,\n    mobileNavStatusBarColor,\n    mobileNavStatusBarCopyColor,\n    quickFinderCopy,\n    includeQuickFinderLink,\n    mobileFirstLevelNavLink,\n    mobileNavCardPadding,\n    mobileNavBarBackground,\n    mobileNavBarShadow,\n    setQuickFinderOpen,\n    resetProductFeeds\n  } = _ref,\n      rest = _objectWithoutProperties(_ref, [\"navigationData\", \"togglMobileNav\", \"mobileMenuOpen\", \"mobileNavStatusBarColor\", \"mobileNavStatusBarCopyColor\", \"quickFinderCopy\", \"includeQuickFinderLink\", \"mobileFirstLevelNavLink\", \"mobileNavCardPadding\", \"mobileNavBarBackground\", \"mobileNavBarShadow\", \"setQuickFinderOpen\", \"resetProductFeeds\"]);\n\n  const {\n    pwa: pwaCms\n  } = useCms('other');\n  const {\n    isPwaInitiated,\n    initPwaPrompt\n  } = usePwa();\n  const {\n    0: navigationExpandedLevel,\n    1: setNavigationExpandedLevel\n  } = useState(0);\n  const {\n    0: mobileNavigationActiveTitleIndex,\n    1: setMobileNavigationActiveTitleIndex\n  } = useState(null);\n  const {\n    0: navigationBreadCrumb,\n    1: setNavigationBreadCrumb\n  } = useState({\n    1: null,\n    2: null\n  });\n\n  const handleNavigationBack = () => {\n    if (navigationExpandedLevel) {\n      setNavigationExpandedLevel(navigationExpandedLevel - 1);\n    } else {\n      // If on the first level, reset breadcrumbs\n      setNavigationBreadCrumb({\n        1: null,\n        2: null\n      });\n    }\n  };\n\n  const onSearchSubmit = () => {\n    togglMobileNav(false);\n    resetProductFeeds();\n  };\n\n  return __jsx(React.Fragment, null, __jsx(MobileNavigation, {\n    container: true,\n    justify: \"center\",\n    alignItems: \"center\",\n    background: mobileNavBarBackground,\n    shadow: mobileNavBarShadow\n  }, __jsx(Grid, {\n    item: true,\n    xs: true\n  }, __jsx(CenterAll, null, __jsx(HamburgerNavigation, {\n    onClick: togglMobileNav\n  }))), __jsx(Grid, {\n    item: true,\n    xs: true\n  }, __jsx(CenterAll, null, __jsx(Search, {\n    isToggleSearch: true,\n    onSubmitCallback: onSearchSubmit\n  }))), __jsx(Grid, {\n    item: true,\n    xs: 5\n  }, __jsx(CenterAll, null, __jsx(Logo, null))), __jsx(Grid, {\n    item: true,\n    xs: true\n  }, __jsx(CenterAll, null, __jsx(Settings, null))), __jsx(Grid, {\n    item: true,\n    xs: true\n  }, __jsx(CenterAll, null, __jsx(WishList, null)))), __jsx(MobileDrawer, {\n    anchor: 'left',\n    open: mobileMenuOpen,\n    onClose: () => togglMobileNav,\n    iconCloseClick: togglMobileNav\n  }, navigationExpandedLevel > 0 && __jsx(TitleIndicator, {\n    container: true,\n    alignItems: \"center\",\n    justify: \"center\",\n    mobileNavStatusBarColor: mobileNavStatusBarColor,\n    mobileNavStatusBarCopyColor: mobileNavStatusBarCopyColor\n  }, __jsx(Back, {\n    onClick: handleNavigationBack\n  }, __jsx(Flex, null, __jsx(KeyboardBackspaceIcon, {\n    style: {\n      color: mobileNavStatusBarCopyColor\n    }\n  }))), __jsx(Grid, {\n    item: true\n  }, __jsx(Typography, {\n    tag: \"p\"\n  }, __jsx(Copy, {\n    text: navigationBreadCrumb[navigationExpandedLevel] || ''\n  })))), navigationExpandedLevel === 0 && __jsx(TopNavIcons, {\n    container: true,\n    justify: \"space-between\",\n    spacing: 2\n  }, __jsx(Grid, {\n    item: true,\n    xs: true,\n    container: true,\n    spacing: 4\n  }, __jsx(Grid, {\n    item: true\n  }, __jsx(Search, {\n    isToggleSearch: true,\n    onSubmitCallback: onSearchSubmit\n  })), __jsx(Grid, {\n    item: true\n  }, __jsx(WishList, null))), __jsx(Grid, {\n    item: true,\n    onClick: togglMobileNav\n  }, __jsx(ClearIcon, {\n    fontSize: \"large\"\n  }))), __jsx(MobileDrawerContainer, {\n    container: true,\n    navigationExpandedLevel: navigationExpandedLevel\n  }, navigationData.map((navItem, index) => __jsx(MobileSubNavContainers, _extends({}, navItem, rest, {\n    navigationExpandedLevel,\n    setNavigationExpandedLevel,\n    setMobileNavigationActiveTitleIndex,\n    mobileNavigationActiveTitleIndex,\n    setNavigationBreadCrumb,\n    mobileFirstLevelNavLink,\n    mobileNavCardPadding,\n    togglMobileNav,\n    resetProductFeeds\n  }, {\n    titleIndex: index,\n    key: index\n  }))), includeQuickFinderLink && navigationExpandedLevel === 0 && __jsx(NavCard, {\n    item: true,\n    xs: 4\n  }, __jsx(Button, {\n    fullWidth: true,\n    padding: \"0px\",\n    disableHover: true,\n    textTransform: \"initial\",\n    onClick: setQuickFinderOpen\n  }, __jsx(Card, {\n    padding: mobileNavCardPadding,\n    fullWidth: true\n  }, __jsx(Grid, {\n    container: true,\n    alignItems: \"center\",\n    justify: \"space-between\"\n  }, __jsx(Typography, {\n    tag: \"h3\",\n    typeStyles: mobileFirstLevelNavLink\n  }, quickFinderCopy), __jsx(ChevronRightIcon, null)))), __jsx(Spacer, {\n    h: 20\n  }), __jsx(Grid, null, isPwaInitiated && __jsx(Button, {\n    textTransform: \"initial\",\n    primary: true,\n    onClick: () => initPwaPrompt()\n  }, pwaCms.pwaDownloadableBannerText))))));\n}","map":null,"metadata":{},"sourceType":"module"}