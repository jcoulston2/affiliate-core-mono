{"ast":null,"code":"import _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nimport _defineProperty from \"@babel/runtime/helpers/defineProperty\";\n\nfunction _toPropertyKey(arg) { var key = _toPrimitive(arg, \"string\"); return typeof key === \"symbol\" ? key : String(key); }\n\nfunction _toPrimitive(input, hint) { if (typeof input !== \"object\" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || \"default\"); if (typeof res !== \"object\") return res; throw new TypeError(\"@@toPrimitive must return a primitive value.\"); } return (hint === \"string\" ? String : Number)(input); }\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport { useState } from 'react';\nimport isEmpty from 'lodash/isEmpty';\nexport default function useForm(initialValues, validationSchema) {\n  const {\n    0: formValues,\n    1: setFormValues\n  } = useState(initialValues);\n  const {\n    0: errors,\n    1: setErrors\n  } = useState({});\n\n  const onChangeHandler = key => ({\n    target\n  }) => {\n    setFormValues(state => _objectSpread(_objectSpread({}, state), {}, {\n      [key]: target === null || target === void 0 ? void 0 : target.value\n    }));\n  };\n\n  const getValidationResult = (key, value) => {\n    return validationSchema[key] && validationSchema[key](value);\n  };\n\n  const validate = (key, val) => event => {\n    var _event$target;\n\n    const value = val || (event === null || event === void 0 ? void 0 : (_event$target = event.target) === null || _event$target === void 0 ? void 0 : _event$target.value) || formValues[key];\n    const ValidationResult = getValidationResult(key, value);\n\n    if (ValidationResult) {\n      setErrors(_objectSpread(_objectSpread({}, errors), {}, {\n        [key]: ValidationResult\n      }));\n    } else {\n      const {\n        [key]: _omit\n      } = errors,\n            rest = _objectWithoutProperties(errors, [key].map(_toPropertyKey));\n\n      setErrors(rest);\n    }\n  };\n\n  const validateOnSubmit = () => {\n    return Object.keys(formValues).reduce((acc, cur) => {\n      const ValidationResult = getValidationResult(cur, formValues[cur]);\n      return ValidationResult ? _objectSpread(_objectSpread({}, acc), {}, {\n        [cur]: ValidationResult\n      }) : acc;\n    }, {});\n  };\n\n  const submitForm = cb => {\n    const errorResult = validateOnSubmit();\n    setErrors(errorResult);\n\n    if (isEmpty(errorResult)) {\n      cb(formValues);\n    }\n  };\n\n  return {\n    formValues,\n    onChangeHandler,\n    errors,\n    submitForm,\n    validate\n  };\n}","map":null,"metadata":{},"sourceType":"module"}