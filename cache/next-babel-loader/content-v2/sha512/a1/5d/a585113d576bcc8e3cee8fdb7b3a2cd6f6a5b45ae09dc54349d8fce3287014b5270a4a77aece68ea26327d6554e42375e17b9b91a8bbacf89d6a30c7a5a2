{"ast":null,"code":"var __jsx = React.createElement;\nimport * as React from 'react';\nimport Chip from '@units/Chip';\nimport Grid from '@material-ui/core/Grid';\nimport { useTheme } from '@hooks';\nimport { Highlight } from '@styles/CommonStyledComponents';\nimport { FilterChipWrapper } from './styles';\nimport { urlReverseCase } from '@helpers/common';\nexport default function FilterChips({\n  priceSort,\n  priceThresholdLow,\n  priceThresholdHigh,\n  saleThreshold,\n  setPriceSort,\n  setPriceThreshold,\n  setKeyWords,\n  setSection,\n  setBrands,\n  setSaleThreshold,\n  setCategory,\n  triggerFilterRefresh,\n  scaler,\n  keyWords,\n  brands,\n  category,\n  section\n}) {\n  const {\n    brandThemeColors\n  } = useTheme();\n\n  const renderCommonChip = (label, onDelete, index) => {\n    return __jsx(Chip, {\n      label: label,\n      size: 'small',\n      bgColor: brandThemeColors.commonWhite,\n      key: index,\n      color: \"primary\",\n      useShadow: true,\n      spacing: 20,\n      onDelete: () => {\n        onDelete();\n        triggerFilterRefresh(true);\n      }\n    });\n  };\n\n  const getChipTitle = (title, value) => {\n    return __jsx(React.Fragment, null, __jsx(Highlight, {\n      weight: 500\n    }, title, \": \"), urlReverseCase(value));\n  };\n\n  const createChipArrayValues = (arrayValues, label, setter) => {\n    return (arrayValues === null || arrayValues === void 0 ? void 0 : arrayValues.map(arrayValue => ({\n      name: arrayValue,\n      label: arrayValue && getChipTitle(label, arrayValue),\n      onDelete: () => setter(() => arrayValues.filter(k => k !== arrayValue)),\n      defaultVisibility: true\n    }))) || [];\n  };\n\n  const chipValues = [{\n    name: 'priceSort',\n    label: priceSort && getChipTitle('Price Sort', priceSort),\n    onDelete: () => setPriceSort(null),\n    defaultVisibility: true\n  }, {\n    name: priceThresholdLow,\n    label: priceThresholdLow && getChipTitle('Price threshold low', priceThresholdLow),\n    onDelete: () => setPriceThreshold([0, parseInt(priceThresholdHigh) / scaler || 100]),\n    defaultVisibility: true\n  }, {\n    name: priceThresholdHigh,\n    label: priceThresholdHigh && getChipTitle('Price threshold High', priceThresholdHigh),\n    onDelete: () => setPriceThreshold([parseInt(priceThresholdLow) / scaler || 0, 100]),\n    defaultVisibility: parseInt(priceThresholdHigh) / scaler !== 100\n  }, {\n    name: saleThreshold,\n    label: saleThreshold && getChipTitle('Sale', saleThreshold > 1 ? `${saleThreshold}% and more` : 'All sale'),\n    onDelete: () => setSaleThreshold(null),\n    defaultVisibility: true\n  }, {\n    name: section,\n    label: section && getChipTitle('Section', section || 'all'),\n    onDelete: () => setSection(null),\n    defaultVisibility: true\n  }, ...createChipArrayValues(keyWords, 'KeyWord', setKeyWords), ...createChipArrayValues(brands, 'Brand', setBrands), ...createChipArrayValues(category, 'Category', setCategory)];\n  return __jsx(FilterChipWrapper, {\n    container: true\n  }, chipValues.map(({\n    name,\n    label,\n    onDelete,\n    defaultVisibility\n  }, index) => !!(defaultVisibility && label) && renderCommonChip(label, onDelete, index)));\n}","map":null,"metadata":{},"sourceType":"module"}