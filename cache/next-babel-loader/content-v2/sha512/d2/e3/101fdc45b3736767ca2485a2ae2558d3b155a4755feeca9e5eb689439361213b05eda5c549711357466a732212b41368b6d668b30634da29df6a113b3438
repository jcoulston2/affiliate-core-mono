{"ast":null,"code":"var __jsx = React.createElement;\nimport React, { useEffect } from 'react';\nimport { isServer, isIos, isInPwa, isChrome } from '@helpers/common';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { actions } from './actions';\nimport appAlert from '@sweetalert/with-react';\nimport { PwaInstructions } from '@modules/Pwa';\nexport default function usePwa(onPromptSuccess) {\n  if (isInPwa() || isServer()) return {};\n  const dispatch = useDispatch();\n  const isPwaInitiated = useSelector(appState => {\n    const {\n      pwaState\n    } = appState;\n    return pwaState.isPwaInitiated;\n  });\n\n  const setIsPwaInitiated = flag => {\n    dispatch(actions.setPwaInitialised(flag));\n  };\n\n  const initPwaPrompt = () => {\n    // iOS does not yet support a native PWA prompt\n    if (isIos()) {\n      return appAlert(__jsx(PwaInstructions, null));\n    } else if (!window.pwaPrompt) {\n      return null;\n    }\n\n    window.pwaPrompt.prompt();\n    window.pwaPrompt.userChoice.then(pwaUserSelection => {\n      if (pwaUserSelection.outcome === 'accepted' && onPromptSuccess) {\n        onPromptSuccess();\n      }\n\n      window.pwaPrompt = null;\n      setIsPwaInitiated(false);\n    });\n  };\n\n  useEffect(() => {\n    if (isIos() && !isChrome()) {\n      setIsPwaInitiated(true);\n    }\n\n    window.addEventListener('beforeinstallprompt', event => {\n      event.preventDefault();\n\n      if (!window.pwaPrompt) {\n        window.pwaPrompt = event;\n        if (event) setIsPwaInitiated(true);\n      }\n    });\n  }, []);\n  return {\n    initPwaPrompt,\n    isPwaInitiated,\n    setIsPwaInitiated\n  };\n}","map":null,"metadata":{},"sourceType":"module"}