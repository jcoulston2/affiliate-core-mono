{"ast":null,"code":"var __jsx = React.createElement;\nimport React, { useState, useEffect } from 'react';\nimport Grid from '@material-ui/core/Grid';\nimport Image from '@units/Image';\nimport Card from '@units/Card';\nimport Input from '@units/Input';\nimport Checkbox from '@units/Checkbox';\nimport Typography from '@units/Typography';\nimport RadioButton from '@units/RadioButton';\nimport { Spacer } from '@styles/CommonStyledComponents';\nimport RadioGroup from '@material-ui/core/RadioGroup';\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\nimport FormControl from '@material-ui/core/FormControl';\nimport FormLabel from '@material-ui/core/FormLabel';\nimport Slider from '@units/Slider';\nimport Tooltip from '@material-ui/core/Tooltip';\nimport HelpIcon from '@material-ui/icons/Info';\nimport { CenterVertical } from '@styles/CommonStyledComponents';\nimport Button from '@units/Button';\nimport { useRouter } from 'next/router';\nimport { PLP_PATH, SEARCH_PATH } from '@constants';\nimport { createUrlFilters, normalizeFilters, getNumberOfFiltersSelected, getCategoryFilters, getSectionFilters, sortSelectedCheckboxes, isSearch } from './helper';\nimport { stringifySafe, toArrayNullable, keyWordsToString, urlCase } from '@helpers/common';\nimport { getFilterPlpBasePath, pushFilterPlpBasePath, getFiltersFromUrl } from '@helpers/page';\nimport ClearIcon from '@material-ui/icons/Clear';\nimport Drawer from '@units/Drawer';\nimport { TooltopContent, ClearFilters, FilterNotification } from './styles';\nimport { useBrandList, useCategoryData } from '@hooks';\nimport FilterItem from './FilterItem';\nimport isEmpty from 'lodash/isEmpty';\nimport capitalize from 'lodash/capitalize';\nexport default function Filters({\n  section,\n  category,\n  productSearchValues,\n  fetchProducts,\n  fetchProductsInSearch,\n  setClientFilterStatus,\n  scaler,\n  setLoading,\n  setPriceSort,\n  setPriceThreshold,\n  setKeyWords,\n  setBrands,\n  setCategory,\n  setSection,\n  setSaleThreshold,\n  setFilterDrawOpen,\n  setHasTouchedSlider,\n  hasSetDefaultFilters,\n  triggerFilterRefresh,\n  filterDrawOpen,\n  priceSort,\n  keyWords,\n  brands,\n  saleThreshold,\n  hasTouchedSlider,\n  filterRefresh,\n  priceThreshold,\n  normalizedFilters,\n  useFilterSelectedNotifcation,\n  productFiltersContent: cms\n}) {\n  const router = useRouter();\n  const brandList = useBrandList();\n  const categoryData = useCategoryData();\n  const categoryFilters = getCategoryFilters(section, categoryData);\n  const sectionFilters = getSectionFilters(section, categoryData);\n  const isSearchPage = isSearch(router);\n  const numberOfFiltersSelected = getNumberOfFiltersSelected(normalizedFilters);\n  const sliderMarks = [{\n    label: '£0',\n    value: 0\n  }, {\n    label: hasTouchedSlider ? `£${100 * scaler}` : 'no max',\n    value: 100\n  }];\n\n  const closeFilters = () => setFilterDrawOpen(false);\n\n  const handleInputChange = cb => event => {\n    cb(event.target.value);\n  };\n\n  const handleCheckBoxChange = (stateVale, stateSetter) => value => {\n    if (stateVale.includes(value)) {\n      stateSetter(stateVale.filter(item => urlCase(item) !== value));\n    } else {\n      stateSetter([...stateVale, value]);\n    }\n  };\n\n  const restoreDefaultFilters = () => {\n    setFilterDrawOpen(false);\n    pushFilterPlpBasePath(router);\n  };\n\n  const applyFilters = () => {\n    setClientFilterStatus(true);\n    setFilterDrawOpen(false);\n    setLoading(true);\n    createUrlFilters(normalizedFilters, getFilterPlpBasePath(router), isSearchPage);\n\n    if (isSearchPage) {\n      fetchProductsInSearch(productSearchValues, 0, 100, normalizedFilters);\n    } else {\n      fetchProducts(section, category, 0, 100, normalizedFilters);\n    }\n  };\n\n  useEffect(() => {\n    if (filterRefresh) {\n      triggerFilterRefresh(false);\n      applyFilters();\n    }\n  }, [filterRefresh]);\n  return __jsx(React.Fragment, null, __jsx(Grid, {\n    item: true,\n    onClick: () => setFilterDrawOpen(!filterDrawOpen)\n  }, !!numberOfFiltersSelected && __jsx(FilterNotification, null, numberOfFiltersSelected), __jsx(Image, {\n    src: \"filter-icon.svg\",\n    alt: \"Select productFilters\"\n  })), __jsx(Drawer, {\n    anchor: 'right',\n    open: filterDrawOpen,\n    iconCloseClick: closeFilters,\n    onClose: closeFilters\n  }, __jsx(Card, {\n    padding: '28px'\n  }, __jsx(FormControl, {\n    component: \"fieldset\"\n  }, __jsx(FormLabel, {\n    component: \"legend\"\n  }, __jsx(Typography, {\n    tag: \"h3\",\n    typeStyles: cms.filterCardTitle\n  }, \"Sort\")), __jsx(FilterItem, {\n    isLast: true\n  }, __jsx(RadioGroup, {\n    \"aria-label\": \"price sort\",\n    name: \"price-sort\",\n    value: priceSort,\n    onChange: handleInputChange(setPriceSort)\n  }, __jsx(FormControlLabel, {\n    value: \"low\",\n    control: __jsx(RadioButton, null),\n    label: \"Price low to high\"\n  }), __jsx(FormControlLabel, {\n    value: \"high\",\n    control: __jsx(RadioButton, null),\n    label: \"Price high to low\"\n  }), __jsx(FormControlLabel, {\n    value: 'recommended',\n    control: __jsx(RadioButton, null),\n    label: \"Recommended\"\n  }))))), isSearchPage && __jsx(React.Fragment, null, __jsx(Spacer, {\n    h: 20\n  }), __jsx(Card, null, !!sectionFilters.length && __jsx(React.Fragment, null, __jsx(Typography, {\n    tag: \"h3\",\n    typeStyles: cms.filterItemTitle\n  }, \"Section\"), __jsx(FilterItem, null, __jsx(RadioGroup, {\n    \"aria-label\": \"section\",\n    name: \"section\",\n    value: section,\n    onChange: handleInputChange(setSection)\n  }, sectionFilters.map(sectionFilter => __jsx(FormControlLabel, {\n    value: sectionFilter,\n    control: __jsx(RadioButton, null),\n    label: capitalize(sectionFilter)\n  })), __jsx(FormControlLabel, {\n    value: null,\n    control: __jsx(RadioButton, null),\n    label: \"All\"\n  })))), __jsx(Typography, {\n    tag: \"h3\",\n    typeStyles: cms.filterItemTitle\n  }, \"Categories\"), __jsx(FilterItem, {\n    expandable: true\n  }, sortSelectedCheckboxes(categoryFilters, category).map(catItem => __jsx(Grid, {\n    key: catItem\n  }, __jsx(FormControlLabel, {\n    value: urlCase(catItem),\n    control: __jsx(Checkbox, {\n      checked: category.includes(urlCase(catItem)),\n      onChange: handleInputChange(handleCheckBoxChange(category, setCategory))\n    }),\n    label: capitalize(catItem)\n  })))))), __jsx(Spacer, {\n    h: 20\n  }), __jsx(Card, {\n    padding: '28px'\n  }, __jsx(Typography, {\n    tag: \"h3\",\n    typeStyles: cms.filterCardTitle\n  }, \"Filters\"), __jsx(Spacer, {\n    h: 20\n  }), __jsx(Typography, {\n    tag: \"h3\",\n    typeStyles: cms.filterItemTitle\n  }, \"Price Range\"), __jsx(FilterItem, null, __jsx(Slider, {\n    scale: scale => scale * scaler,\n    value: priceThreshold,\n    onChange: (__, value) => {\n      setHasTouchedSlider(true);\n      setPriceThreshold(value);\n    },\n    valueLabelDisplay: \"auto\",\n    \"aria-labelledby\": \"set-price\",\n    marks: sliderMarks,\n    valueLabelFormat: value => `£${value}`\n  })), __jsx(CenterVertical, null, __jsx(Typography, {\n    tag: \"h3\",\n    typeStyles: cms.filterItemTitle\n  }, \"Key Words\"), __jsx(Tooltip, {\n    title: __jsx(TooltopContent, null, cms.keyWordsTooltipText)\n  }, __jsx(HelpIcon, {\n    size: \"small\"\n  }))), __jsx(FilterItem, null, __jsx(Input, {\n    fullWidth: true,\n    variant: \"outlined\",\n    label: !keyWords.length ? cms.keyWordsInputLabel : '',\n    value: keyWordsToString(keyWords),\n    onChange: ({\n      target\n    }) => setKeyWords(target.value && target.value.toLowerCase().replace(',', ' ').split(' ') || [])\n  })), __jsx(Typography, {\n    tag: \"h3\",\n    typeStyles: cms.filterItemTitle\n  }, \"Brands\"), __jsx(FilterItem, {\n    expandable: true\n  }, brandList.map(brand => __jsx(Grid, {\n    key: brand\n  }, __jsx(FormControlLabel, {\n    value: urlCase(brand),\n    control: __jsx(Checkbox, {\n      checked: brands.includes(urlCase(brand)),\n      onChange: handleInputChange(handleCheckBoxChange(brands, setBrands))\n    }),\n    label: brand\n  })))), __jsx(Typography, {\n    tag: \"h3\",\n    typeStyles: cms.filterItemTitle\n  }, \"Sale\"), __jsx(FilterItem, null, __jsx(RadioGroup, {\n    \"aria-label\": \"sale filter\",\n    name: \"sale-filter\",\n    value: saleThreshold,\n    onChange: handleInputChange(setSaleThreshold)\n  }, __jsx(FormControlLabel, {\n    value: '0',\n    control: __jsx(RadioButton, null),\n    label: \"All products\"\n  }), __jsx(FormControlLabel, {\n    value: '1',\n    control: __jsx(RadioButton, null),\n    label: \"All sale items\"\n  }), __jsx(FormControlLabel, {\n    value: '20',\n    control: __jsx(RadioButton, null),\n    label: \"20% and more\"\n  }), __jsx(FormControlLabel, {\n    value: '50',\n    control: __jsx(RadioButton, null),\n    label: \"50% and more\"\n  }), __jsx(FormControlLabel, {\n    value: '70',\n    control: __jsx(RadioButton, null),\n    label: \"70% and more\"\n  })))), __jsx(Spacer, {\n    h: 7\n  }), __jsx(ClearFilters, {\n    onClick: restoreDefaultFilters\n  }, __jsx(Typography, {\n    tag: \"p\",\n    size: 15,\n    decoration: \"underline\",\n    margin: \"0px 0px 10px 0px\"\n  }, \"Clear filters\")), __jsx(Button, {\n    primary: true,\n    fullWidth: true,\n    onClick: applyFilters\n  }, \"Apply filters\")));\n}","map":null,"metadata":{},"sourceType":"module"}